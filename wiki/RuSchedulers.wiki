#summary Brief description of working with schedulers in embox.

= Introduction =

В операционной системе embox реализован механизм многопоточности. То есть в ней одновременно могут выполнятся несколько задач, поочередно получая доступ к процессорному времени. Переключением потоков занимается планировщик. Он решает, в каком порядке будут поступать на процессор потоки (в зависимости от приоритета и текущего работающего потока). Программист может выбрать сам, какой планировщик ему использовать, в том числе у него есть возможность написать свой.

= Details =

Интерфейс для планировщика описан в scheduler.h, реализован он в scheduler.c. Основные его функции:
{{{
int scheduler_init(void); /* Инициализирует планировщик, позволяя добавлять в него потоки. */
void scheduler_start(void); /* Запускает планировщик. */
void scheduler_dispatch(void); /* Организует поиск следующего потока и переключение на него.
    Вызывается через определенное время (и иногда при выполнении неких особых действий с потоками). */
void scheduler_add(struct thread *added_thread); /* Добавляет поток в множество исполняемых. */
int scheduler_remove(struct thread *removed_thread); /* Удаляет поток из списка исполняемых.
    Если поток - текущий, то, кроме того, переключается на другой поток. */
int scheduler_sleep(struct thread *thread, struct event *event); /* Усыпляет поток thread и заставляет его ожидать события event. */
int scheduler_wakeup(struct event *event); /* Размораживает все потоки, ожидавшие события event. */

void scheduler_lock(void); /* Увеличивает preemption_count - величину, отвечающую за глубину критической секции, в которой сейчас находится поток.
    Если она не равна нулю, то планировщик не может переключаться. */
void scheduler_unlock(void); /* Уменьшает preemption_count. Если она становится равной нулю
и текущий поток готов отдать процессор, то вызывает scheduler_dispatch. */
}}}

Эти функции реализованы так, что используют методы, зависящие от конкретного планировщика, которые непосредственно работают со структурой, в которой хранятся исполняемые (готовые к помещению на процессор и работающий в данный момент) потоки.
Используемые функции описаны в scheduler_base.h (все планировщики могут отличаться только ими). 
Список функций в scheduler_base.h:
{{{
void _scheduler_start(void); /* Начинает работу планировщика -
    делает необходимые изменения в множестве исполняемых потоков. */
void _scheduler_add(struct thread *added_thread); /* Добавляет в планировщик новый поток. */
void _scheduler_init(void); /* Инициализирует структуру данных для хранения исполняемых потоков. */
void thread_move_next(struct thread *prev_thread); /* Ищет поток, который будет работать следующим.
   prev_thread - поток, который работал только что. */
void _scheduler_remove(struct thread *removed_thread); /* Удаляет поток из множества исполняемых. */
}}}

После их реализации в файле <file_name> достаточно в файле conf/options-kernel.conf изменить строку 
{{{
option(THREAD, ...)
}}}
на строку
{{{
option(THREAD, <file_name>)
}}}
После этого будет работать именно выбранный планировщик.
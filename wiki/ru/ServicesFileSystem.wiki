#summary описание виртуальной файловой системы

http://embox.googlecode.com/svn/wiki/images/Kernel/FileSystem.png

[FileSystemDescription Файловая система](FS) является механизмом иерархического
упорядочивания именованных ресурсов ([http://ru.wikipedia.org/wiki/%D0%A4%D0%B0%D0%B9%D0%BB файлов]). С точки зрения программиста файловая система предоставляет интерфейс для работы с файлами и каталогами.

В Embox служба доступа к файлам как и весь проект имеет модульную структуру и состоит  из двух основных частей:
 * виртуальную файловую систему
 * набор драйверов файловой системы 

*[http://ru.wikipedia.org/wiki/%D0%92%D0%B8%D1%80%D1%82%D1%83%D0%B0%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F_%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D0%B0%D1%8F_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0 Виртуальная файловая система(VFS)]* есть сервис предоставляющий сокрытие конкретных реализаций файловой системы, который оперирует с иерархически упорядоченным
деревом файлов(file's tree на картинке).В этой модели файл представлен ассоциированным с ним узлом дерева. Интерфейс 
VFS позволяет _добавлять_, _удалять_ _и_ _осуществлять_ _поиск_ необходимого узла, а также _получать_ _информацию_ о файле ассоциированным с данным узлом.

Виртуальная файловая система позволяет монтировать файловые системы различных типов(devfs, ramfs,romfs). Таким образом различные
сервисы и приложения могут получать доступ к файлам, не зная тип файловой системы к которой они получают доступ. Это сильно упрощает добавление нового _драйвера_ _файловой_ _системы_.

*Драйвером файловой системы* будем называть конкретную реализацию файловой системы(например, FAT). Функции драйвера:
 * операции с созданными файлами(открытие/закрытие,чтение/запись,...)
 * функции инициализации файловой системы, создание/удаление файла, монтирование 
Драйвер обрабатывает и "укладывает" абстрактное дерево файлов на _физический_ _носитель_. Общение драйвера файловой системы с носителем просходит при помощи драйвера конкретного носителя.

== Структура VFS ==
Как говорилось выше, каждый файл представляет собой узел (node) виртуальной файловой системы. Все узлы организованы в иерархию, общая структура которой - дерево.
В корне дерева лежит узел {{{/}}}. Структура узла VFS:
{{{
typedef struct node {
	const char         name[CONFIG_MAX_LENGTH_FILE_NAME];
	void               *fs_info;
	fs_drv             *fs_type;
	struct list_head   neighbors;
	struct list_head   children;
} node_t;
}}}
Элементы структуры:
  * name - имя узла в системе
  * info - некая приватная информация о файле
  * fs_type - указатель на драйвер файловой системы, обслуживающей данный узел
  * neighbours - список узлов содержащихся на том же уровне иерархии в том же поддереве узлов
  * children - список узлов содержащихся на один уровень иерархии ниже узлов, содержащихся в поддереве данного узла

Структура драйвера FS:
{{{
typedef struct fs_drv {
	const char                   *name;
	const struct file_operations *file_op;
	const fsop_desc_t            *fsop;
} file_system_driver_t;
}}}
Элементы структуры:
  * name - имя драйвера файловой системы
  * file_op - указатель на структуру, описывающую операции, которые могут быть произведены с файлом
  * fsop - указатель на структуру, описывающую операции, которые могут быть произведены с файловой системой

Для того, чтобы добавить новый драйвер файловой системы, необходимо реализовать функции файловой системы(все или часть), после чего
зарегистрировать драйвер в системе. Это можно сделать с помощью макроса {{{DECLARE_FILE_SYSTEM_DRIVER}}, который добавит указатель на структуру
драйвера в специальный массив.

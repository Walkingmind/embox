Механизм [TheoryVirtualMemory виртуальной памяти] используется для предоставления приложениям 
линейного адресного пространства, изолированного от адресных
пространств других приложений.

= Приниц работы =

Для работы требуется аппаратный контроллер прерываний (Memory Managment Unit, MMU)
предоставляемый [Hal HAL]. Когда он вкючен (защищённый режим), каждое обращение процессора к памяти 
_транслируется_, происходит отображение виртульного адреса (адреса, к которому процессор
обращается) в физический (адрес в физическом ОЗУ). Отображение задаётся 
_таблицами трансляции_.

Приложение работает в защищённом режиме, оно может обратиться по произвольному виртуальному адресу.
Если не существует отображения, происходит исключение, вызывается обработчик ОС.
В зависимости от текущей политики, может быть выделена 
новая физическое пространство под использование и создано отображение.

= Интерфейсы =

== HAL ==
 
Драйвер для контроллера памяти и службы по управлению отображениями находятся в HAL.
Как правило, драйвер и службы сильно платформо-зависимы. Не имеет смысла их выносить
выше HAL, т.к. обобщение ухудшает показатели размера кода, читаемости.

 * Установить отображение между физической памятью и виртуальной заданного размера
 * Включить/выключить защищённый режим
 * Получить адрес ошибки (адрес, вызвавший исключение; используется обработчиком) 

== Ядро ==

Ядро обеспечивает непрерывное изолированное адресное пространство.

Когда возникает исключение доступа к памяти, вызывается обработчик исключений, который
проверят, что исключение вызвано не нарушением прав доступа, а отсутствием отображением.
Менеджер страниц выполняет поиск свободной страницы, затем, обработчик создаёт отображение,
так, что ошибочный адрес отображается на найденную страницу.

== Пользовательские библиотеки ==

Библиотеки пользовательского уровня управляют предоставленным адресным пространством, как 
описано в MemoryAllocation. Управление происходит в условиях, что в этом пространстве находятся
данные приложения (`.text`, `.data`, `.bss`)

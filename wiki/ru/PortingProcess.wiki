#summary Минимальные требования дя портирования Embox на новую платформу

<wiki:gadget url="http://embox.googlecode.com/svn/wiki/gadgets/userbox-under-construction.xml" width="640" height="100" border="0"/>
<wiki:toc max_depth="3" />

= Описание =
Embox мульти-платформенная система, то есть код портирован на несколько типов процессоров в том числе и открытые платформы [http://ru.wikipedia.org/wiki/SPARC SPARC], [http://ru.wikipedia.org/wiki/MicroBlaze micriblaze] и другие которые часто применяются для построения встроенных систем и часто служат основой вычислительного ядра [http://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D0%BD%D0%B0_%D0%BA%D1%80%D0%B8%D1%81%D1%82%D0%B0%D0%BB%D0%BB%D0%B5 систем на кристалле]. 

Более подробно о всех поддерживаемых платформах можно ознакомится на странице описания проекта. Основной код проекта при этом написан на Си и является платформо независимым. Но существует определенное количество кода специфичного для той либо иной архитектуры. Код таких частей кода располагается в папке *arch*, и содержит как специфичный код (например код первичной инициализации процессора или первичную обработку прерываний), так и макросы константы располагающийся в заголовочных файлах. Так же данная папка содержит и шаблон скрипта для линковки, параметры для генерации линковочного скрипта передаются с помощью конфигурационных файлов.

Данный  раздел содержит описание необходимых частей для добавления поддержки новой архитектуры в проект Embox.

= Части требующие архитектурной  поддержки =
Код проекта Embox можно разделить на платформонезависимую и платформо зависимую части. Когда код переносится на новую платформу необходимо реализовать минимальный интерфейс поскольку наличие данных частей необходимо для платформонезависимой части. Иначе проект просто не соберется. К таким необходимым частям относятся: 
 * Заголовочные файлы
 * Стартовый код
 * Линковочный скрипт
Дальнейшее портирование зависит от настроек проекта и специфичных архитектурных особенностей процессора. Например архитектура SPARC не может работать без обработки исклчючений (window overflow и window underflow) поскольку они необходимы для корректной работы со стеком.

Обычно первое что портируют это * Процедура ввода вывода * по умолчанию, они необходимы чтобы использовать в системе функции *print scan* из библиотеки системы.
Современные системы обычно не мыслимы без таких частей как:
 * Обработка прерываний
 * Системный таймер
 * Обработка исключений

== Заголовочные файлы ==
Необходимо создать несколько платформенных заголофочных файлов, описывающих данную архитектуру.
=== asm/types.h ===
Этот файл включается из корневого файла types.h и описывает архитектурнозависимую часть типов стандарта POSIX. Архитектуры могут различаться по разрядности или порядку байт.
=== asm/hal* ===
в этой папке находятся файлы обеспецивающие описание системы для абстрагирования от архитектуры процессора.
==== clock.h ====
Включается из файла hal/clock.h Описывает интерфейс системного таймера в системе

==== interrupt.h ====
Включается из файла hal/interrupt.h Описывает интерфейс контроллера прерываний (его типы) в системе

==== arch.h ====

==== reg.h ====

==== ipl.h ====
 
== Стартовый код ==
Стартовый код представляет из себя программный код который выполняется после подачи питания на процессор либо после перезагрузки системы. Такой код обычно содержит:
 * начальную инициализацию регистров процессора и его внутренего состояния
 * Копирование и инициализацию некоторых секций
 * Установку системного стека
 * Вызов процедур инициализации * software_init_hook * и * hardware_init_hook *
 * Передача управления в функцию * main * системы
  
== Линковочный скрипт ==
В линковочном скрипте описываются различные секции памяти, их адреса и свойства. Для того чтобы легче было управлять картой памяти линковочный скрипт не используется напрямую, а генерится из файлаю Обычно этот файл расположен в архитектурной папке и называется embox.lds.S. 
Из этого файла с помощью препроцессора получается файл embox.lds который и передается на этапе линковки компилятору. Параметры же для генерации этого файла задаютя в файле конфигурации lds.conf, в нем описываются требуемые основные секции, в том числе и память под стек.
А так же секции которые нужны для работы отдельных модулей например описывают секцию .heap для менеджера динамической памяти. Сам же шаблон в котором описывают секции для специальных модулей располагается в папке с данным модулем, и передается линкеру отдельно. Также как и линкер скрипт для платформенной части проекта, если он необходим.

== Процедура ввода вывода ==
== Обработка прерываний ==
== Системный таймер ==
== Обработка исключений ==
Некоторые платформы немогут работать без исключений, например SPARC там необходимо обработать исключения связанные с работой окон 


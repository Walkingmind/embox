#summary Описание интерфейса тестирования механизма прерываний

<wiki:toc max_depth="2" />

= Описание =

Механизм трепов необходим для обработки исключительных ситуаций, возникающих в системе. Исключительной ситуацией, например, является промах по страницам для mmu (виртуальный адрес не отображен на физический).

Механизм трепов поддерживается всеми современными процессорами, но в каждой из архитектур реализован по-своему.
Операционная система должна поддерживать работу с трепами, причем делать это вполне прозрачно для прикладного ПО. С одной стороны это означает, что прикладное ПО не должно "видеть" механизма работы с трепами, но с другой стороны у прикладного ПО должна быть возможность назначить обработчик на конкретный треп.

Для реализации механизма трепов прежде всего необходимы:
 # Таблица трепов
 # Обработчики трепов
 # Интерфейс для установления обработчиков трепов

На данной странице описывается интерфейс, позволяющий протестировать работу с трепами.

= Работа с таблицей трепов =

Таблица трепов представляет собой массив ассемблерных инструкций, сгруппированных в строчки по четыре, нужных для первичной обработки возникших трепов. Таблица трепов задается программно. Номер возникающего трепа является индексом в таблице и задает строку из четырех ассемблерных инструкций, выполняющихся при обработке этого трепа. Как правило, эти четыре инструкции сохраняют значения неких регистров и передают управление на обработчик трепа.
Обработчик трепа написан на ассемблере. Он подготавливает все необходимое для вызова Сишной функции обработки трепа, которая реализует нужную функциональность.

= Механизм тестирования =

В Embox предусмотрен механизм тестирования системы в рабочем состоянии (фоновое тестирование). Поэтому в момент теста таблицу трепов можно менять, устанавливая обработчики трепов, необходимые для проведения теста. Перед завершением теста таблица трепов должна быть восстановлена и система должна продолжить работу.

Вариант теста, проверяющего корректность работы трепов можно найти в папке `/src/tests/soft_traps`. Рассмотрим его подробно.

 # До начала выполнения теста происходит вызов функции * traps_save_env() *, которая сохраняет данные (environment), необходимые для восстановления таблицы трепов после выполнения теста. Эти данные могут быть различны для разных архитектур. (для спарк, например, это просто адрес таблицы трепов)
 # Функция * traps_set_env() * изменяет таблицу трепов на тестовую. Способ изменения таблицы также зависит от архитектуры (в спарк, например, просто меняют адрес таблицы трепов на нужный)
 # * testtraps_set_handler() * регистрирует обработчики трепов, необходимые для проведения теста. 
 # * testtraps_fire_softtrap() * "дергает" треп с указанным номером. 
 # * traps_restore_env() * восстанавливает первоначальную таблицу трепов в соответствие с сохраненными перед началом теста данными. 

Заметим, что все указанные функции имеют общий интерфейс для всех представленных в проекте архитектур, описанный в `./src/include/hal/tests` и в `./src/include/hal/env`. Реализация же каждой из этих функций архитектурно-зависима и располагается в папке `./src/arch`. В зависимости от указанной при конфигурировании архитектуры в проект будет включена соответствующая этой архитектуре реализация функций.

Такой подход к организации механизма тестирования трепов
 # делает тесты на трепы не зависящими от конкретной архитектуры.
 # делает механизм тестирования более независимым благодаря сохранению / востановлению окружения
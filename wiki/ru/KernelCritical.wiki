#summary О механизме Critical

*Critical API* - внутренний механизм ядра для контролирования текущего контекста исполнения. *Контекст исполнения* определяет набор доступных коду _возможностей_ и _приоритет_ относительно других контекстов.

Основной задачей, решаемой механизмом, является разрешение либо запрет вытеснения, реализуемое через маскирование и отложенную обработку.

= Вытеснение, маскирование и отложенная обработка =

*Вытеснение* - передача управления какому-либо обработчику. При вытеснении текущее исполнение прерывается, а после завершения обработчика возобновляется с той точки, на которой произошло вытеснение.

 Например, в случае аппаратных прерываний под вытеснением понимается сохранение регистров процессора, запуск зарегистрированного обработчика, восстановление регистров и возврат управления коду, исполнявшемуся в момент возникновения прерывания.

*Маскирование* - запрет вытеснения в данном контексте исполнения. Каждый контекст имеет свой приоритет, по которому определяется, можно ли выполнить вызов того или иного обработчика.

 Обработка аппаратного прерывание производится только при условии, что его приоритет выше текущего Уровня Допустимых Прерываний (IPL). Таким образом, прерывание может быть замаскировано обработчиком более приоритетного прерывания либо полным запретом прерываний с помощью вызова `ipl_save()`.

*Отложенная обработка* - запуск обработчика по выходу из критического контекста, замаскировавшего вызов этого обработчика.

 В случае, если обработка возникшего прерывания была замаскирована, она откладывается до тех пор, пока значение IPL не разрешит ее вновь: до выхода из обработчика прерывания более высокого приоритета или до вызова `ipl_restore()`.

Таким образом, можно сформулировать основной принцип, по которому действует механизм Critical API. _Вытеснение_ текущего контекста исполнения обработчиком возможно только вне любых контекстов, _маскирующих_ этот обработчик. В противном случае вызов _откладывается_ до выхода из этих контекстов.

= Возможные обработчики и контексты =

В зависимости от конфигурации, в системе могут присутствовать обработчики трех различных типов: обработчики _аппаратных_ и _программных прерываний_ и диспетчер, осуществляющий _переключение потоков_. Для каждого типа обработчика определен свой маскирующий контекст. Кроме того, обработчики прерываний исполняются в своем собственном контексте, допускающем вложения.

http://embox.googlecode.com/svn/wiki/images/KernelCritical/critical-contexts.png
 Существующие обработчики и контексты, в которых они исполняются.

== Вне критических контекстов ==
К этому контексту относится большая часть загрузочного кода, исполняемого после инициализации низкоуровневых модулей, отвечающих за обработку и маскирование прерываний, а также код, запускаемый в отдельных потоках.

Такой код может использовать любые доступные ресурсы (разумеется, после инициализации соответствующих модулей): выделение динамической памяти, примитивы синхронизации, межпроцессное взаимодействие и т.д.

Будучи вне какого-либо критического участка, исполнение может быть вытеснено обработчиком аппаратного или программного прерывания, а также более приоритетным потоком.

== В блоке `sched_lock` ==
Для временного запрета переключения потоков планировщиком, код следует окружить вызовами `sched_lock()` и `sched_unlock()`. Такая атомарность необходима, к примеру, при работе с большей частью полей, содержащихся в структуре потока (`struct thread`), и используется главным образом в коде планировщика:
{{{
void do_something_with_thread_state(struct thread *t) {
	sched_lock();
	{
		thread_state_t state = t->state;

		// Do some state change...

		t->state = state;
	}
	sched_unlock();
}
}}}
Если при нахождении внутри такого блока возникает необходимость вытеснения текущего потока более приоритетным, то непосредственное переключение откладывается до выхода из этого контекста и _всех контекстов, имеющих преимущество перед этим_ (все рассматриваемые далее).

Основным ограничением этого контекста является запрет выполнения действий, которые могут привести к блокировке текущего потока, например, захват мьютекса или вызов `usleep()`.

Запрет перепланирования по прежнему не отменяет возможности возникновения программного или аппаратного прерывания.

== В обработчике программного прерывания ==
Программные прерывания - простой механизм обработки задач, не имеющих строгого ограничения по времени отклика, как у аппаратных прерываний. В отличие от аппаратных, программные прерывания инициируются самой программой, как правило, это происходит внутри обработчика аппаратного прерывания для откладывания вычислений "на потом".

Внутри обработчика действуют все ограничения, что и для кода в блоке `sched_lock`, и в добавок *TODO тут уже думать надо*.

|| || Переключение потоков || Обработка программных прерываний || Обработка аппаратных прерываний ||
|| Вне критического контекста || <font color="green">*Разрешено*</font> || <font color="green">*Разрешено*</font> || <font color="green">*Разрешено*</font> ||
|| В блоке `sched_lock` || <font color="maroon">*Запрещено*</font> || <font color="green">*Разрешено*</font> || <font color="green">*Разрешено*</font> ||
|| В обработчике программного прерывания || <font color="maroon">*Запрещено*</font> || <font color="olive">*Зависит от приоритета*</font> || <font color="green">*Разрешено*</font> ||
|| В блоке `softirq_lock` || <font color="maroon">*Запрещено*</font> || <font color="maroon">*Запрещено*</font> || <font color="green">*Разрешено*</font> ||
|| В обработчике аппаратного прерывания || <font color="maroon">*Запрещено*</font> || <font color="maroon">*Запрещено*</font> || <font color="olive">*Зависит от приоритета*</font> ||
|| В блоке `irq_lock` || <font color="maroon">*Запрещено*</font> || <font color="maroon">*Запрещено*</font> || <font color="maroon">*Запрещено*</font> ||
#summary О механизме Critical

*Critical API* - внутренний механизм ядра для контроля над текущим контектом исполнения. Контекст исполнения определяется прежде всего по _условиям_, при которых исполнение может попасть в этот контекст, и по _возможностям_, доступным коду, работающему в этом контексте.

Для упрощения понимания контекстов рассмотрим обработчик прерывания как один из примеров:
 * Прерывание может возникнуть, только при условии, что его приоритет выше текущего Уровня Допустимых Прерываний (IPL). Иными словами: прерывания не были запрещены с помощью `ipl_save()`, и в данный момент не происходит обработка более приоритетного прерывания.
 * Код обработчика прерывания имеет доступ лишь к ограниченному набору ресурсов. К примеру, он может будить потоки, ждущие наступления какого-либо события, но он не может захватывать мьютекс или создавать новые потоки.

В системе возможны разные контексты исполнения в зависимости от конфигурации.

= Возможные контексты =
Рассматривать существующие контексты будем по возрастанию "суровости": от кода, работающего в обычном окружении с доступом к любым ресурсам, к атомарным блокам, исполняемым с отключенными прерываниями.

== Вне критических участков ==
К этому контексту относится большая часть загрузочного кода, исполняемого после инициализации низкоуровневых модулей, отвечающих за обработку и маскирование прерываний, а также код, запускаемый в отдельных потоках.

Такой код может использовать любые доступные ресурсы (разумеется, после инициализации соответствующих модулей): выделение динамической памяти, примитивы синхронизации, межпроцессное взаимодействие и т.д.

Будучи вне какого-либо критического участка, исполнение может быть вытеснено обработчиком аппаратного или программного прерывания, а также более приоритетным потоком.

== Запрет перепланирования с помощью `sched_lock` ==
Для временного запрета переключения потоков планировщиком, код следует окружить вызовами `sched_lock()` и `sched_unlock()`. Такая атомарность необходима, к примеру, при работе с большей частью полей, содержащихся в структуре потока (`struct thread`), и используется главным образом в коде планировщика:
{{{
void do_something_with_thread_state(struct thread *t) {
	sched_lock();
	{
		thread_state_t state = t->state;

		// Do some state change...

		t->state = state;
	}
	sched_unlock();
}
}}}
Если при нахождении внутри такого блока возникает необходимость вытеснения текущего потока более приоритетным, то непосредственное переключение откладывается до выхода из этого контекста и _всех контекстов, имеющих преимущество перед этим_ (все рассматриваемые далее).

Основным ограничением этого контекста является запрет выполнения действий, которые могут привести к блокировке текущего потока, например, захват мьютекса или вызов `usleep()`.

Запрет перепланирования по прежнему не отменяет возможности возникновения программного или аппаратного прерывания.

== Обработка программного прерывания ==
Программные прерывания - простой механизм обработки задач, не имеющих строгого ограничения по времени отклика, как у аппаратных прерываний. В отличие от аппаратных, программные прерывания инициируются самой программой, как правило, это происходит внутри обработчика аппаратного прерывания для откладывания вычислений "на потом".

Внутри обработчика действуют все ограничения, что и для кода в блоке `sched_lock`, и в добавок *TODO тут уже думать надо*.

|| || Переключение потоков || Обработка программных прерываний || Обработка аппаратных прерываний ||
|| Вне критического контекста || <font color="green">*Разрешено*</font> || <font color="green">*Разрешено*</font> || <font color="green">*Разрешено*</font> ||
|| В блоке `sched_lock` || <font color="maroon">*Запрещено*</font> || <font color="green">*Разрешено*</font> || <font color="green">*Разрешено*</font> ||
|| В обработчике программного прерывания || <font color="maroon">*Запрещено*</font> || <font color="olive">*Зависит от приоритета*</font> || <font color="green">*Разрешено*</font> ||
|| В блоке `softirq_lock` || <font color="maroon">*Запрещено*</font> || <font color="maroon">*Запрещено*</font> || <font color="green">*Разрешено*</font> ||
|| В обработчике аппаратного прерывания || <font color="maroon">*Запрещено*</font> || <font color="maroon">*Запрещено*</font> || <font color="olive">*Зависит от приоритета*</font> ||
|| В блоке `irq_lock` || <font color="maroon">*Запрещено*</font> || <font color="maroon">*Запрещено*</font> || <font color="maroon">*Запрещено*</font> ||
#summary Написание Makefile'ов используя EMBuild инфраструктуру.

<wiki:toc max_depth="2"/>

= Введение =

Этот документ описывает процесс написания Makefile'ов для работы с *EMBuild* -
Embox Build System. Предназначен для рядовых разработчиков, которые работают с
обычным C/ASM кодом реализовывающим различные модули ядра. Script writers who need
to work directly with EMBuild model should follow another document - [EMBuildAPI]
*TODO to be written soon. -- Eldar*.

= Обзор =

В целом, процесс сборки состоит из нескольких стадий включающих генерацию и
чтение конфигурационных файлов, просмотр дерева исходников на предмет чтения
Makefile'ов в каждой поддиректории и, как итог, построение модели, которая
полностью описывает окружение и определяет правила для сборки конечной цели.

Генерация конфигов происходит с помощью отдельной утилиты из EMBuild и здесь это
не описывается. Подробнее о процессе конфигурациим см. [EMBuildConfig] *TODO to
be written soon. -- Eldar*.

We'll focus on per-directory Makefiles so-called *EMBuild Makefiles*.

= EMBuild Makefile'ы =

EMBuild Makefile is one placed in each subdirectory of the source tree and named
`Makefile.em` or `Makefile`. If both files exist, then `Makefile.em` is preferred.
This chapter describes the syntax and special notation used in EMBuild Makefiles.

Typical EMBuild Makefile is composed of various definitions, such as libraries
and modules declaration, source assignments, compilation flags, and list of
subdirectories to be entered recursively. Each definition is regular `make`
variable.

It's important to note that every local variable used in EMBuild Makefiles
should be named with leading *$`_`* (dollar-underscore) sequence so-called
*guard symbol*. It is used to prevent namespace collisions between Makefiles and
isolates them from each other.

Далее будет обсуждаться каждый специальное определение индивидуально.

== `$_MODS` ==

Используется для объявления нового модуля в EMBuild.
{{{
$_MODS += foo bar baz
$_MODS += embox.test.foo
}}}

== `$_LIBS` ==

{{{
$_LIBS += libfoo.a
}}}

== `$_SRCS-`_`{<mod>|<lib>}`_ ==

{{{
$_SRCS-bar      += bar.c
$_SRCS-libfoo.a += foo*.c
}}}

== `$_DEPS-`_`<mod>`_ ==
== `$_USES-`_`<lib>`_ ==
== `$_SUBS-`_`<lib>`_ ==

== `$_PACKAGE` ==

== `$_CFLAGS-`_`{<src>|<mod>|<lib>|<package>}`_ ==
== `$_CPPFLAGS-`_`{<src>|<mod>|<lib>|<package>}`_ ==

== `$_SUBDIRS` ==

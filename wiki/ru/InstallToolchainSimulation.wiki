#summary Описание некоторых симуляторов, на которых можно запустить Embox

<wiki:toc max_depth="3" />

= SPARC =

== TSIM ==

 # Установить [ftp://ftp.gaisler.com/gaisler.com/tsim/tsim-eval-2.0.18.tar.gz tsim-eval]
 # tsim-leon3 -gdb
 # Присоединиться к gdb серверу

= x86 =

== QEMU ==

Установить [http://wiki.qemu.org/Download QEMU]

=== Установка GRUB на образ диска, используемый Qemu ===

 # Создать образ диска (21 MB)
{{{
dd if=/dev/zero of=hd0.img count=40320
}}}
 # Создать раздел на образе диска
{{{
/sbin/fdisk hd0.img
}}}
  # Задать геометрию диска:
   * x - extra functionality
   * h 16
   * s 63
   * c 40
   * r - return to main menu
  # n, p, 1, enter, enter - create new partition
  # a 1 - make bootable
  # w - write the table to disk
 # Setup the loopback device (1048576 =  2048 x 512 bytes)
{{{
/sbin/fdisk -u -l hd0.img
sudo /sbin/losetup -o 1048576 /dev/loop0 hd0.img
}}}
 # Создать файловую систему
{{{
sudo /sbin/mkfs.ext2 /dev/loop0
}}}
 # Примонтировать образ
{{{
sudo mount /dev/loop0 /mnt/flash
}}}
 # Соберите GRUB
  # Загрузить [ftp://alpha.gnu.org/gnu/grub/grub-0.97.tar.gz grub-0.97.tar.gz]
  # tar -xzf grub-0.97.tar.gz
  # cd grub-0.97 && ./configure && make && cd ..
 # Установить GRUB (stage1 и stage2)
{{{
sudo mkdir -p /mnt/flash/boot/grub
sudo cp grub-0.97/stage1/stage1 grub-0.97/stage2/stage2 /mnt/flash/boot/grub
}}}
 # Put Embox image
{{{
cp path/embox /mnt/flash
}}}
 # Отмонтировать образ диска
{{{
sudo umount /mnt/flash
}}}
 # Отсоединить loopback устройство
{{{
sudo /sbin/losetup -d /dev/loop0
}}}
 # Установить GRUB device map
{{{
grub-0.97/grub/grub --device-map=/dev/null
    > device (hd0) hd0.img
    > geometry (hd0) 40 16 63
    > root (hd0,0)
    > setup (hd0)
    > quit
}}}
 # Загрузиться с помощью Qemu
  # используя GRUB
{{{
qemu -hda hd0.img -m 256
}}}
  # или внутренний загрузчик qemu
{{{
qemu -kernel path/embox -m 256
}}}
 # Запустите Embox из GRUB     
  # во время загрузки нажмите 'c' для входа в консоль grub'а, если необходимо
  # найдите, где находиться ваш образ Embox, можно с помощью команды "ls"
  # загрузите образ командой
   * {{{"kernel <path>"}}} для grub (0.9x)
   * {{{"multiboot <path>"}}} для grub2 (1.98)
{{{
    grub> kernel /boot/embox
}}}
  # запустите Embox командой "boot"
{{{
    grub> boot
}}}

=== Эмуляция сети в QEMU через TAP интерфейс ===

{{{
/sbin/ifconfig eth0 down    
/sbin/ifconfig eth0 0.0.0.0 promisc up
/usr/sbin/openvpn --mktun --dev tap0 --user `id -un`
/sbin/ifconfig tap0 0.0.0.0 promisc up
/usr/sbin/brctl addbr br0   
/usr/sbin/brctl addif br0 eth0
/usr/sbin/brctl addif br0 tap0
/usr/sbin/brctl stp br0 off
/sbin/ifconfig br0 10.0.2.3 netmask 255.0.0.0 broadcast 10.255.255.255
/sbin/route add default gw 10.0.2.2
qemu -m 256 -hda hd0.img -net nic,model=ne2k_pci -net tap,ifname=tap0,script=no
/sbin/ifconfig eth0 down
/sbin/ifconfig br0 down
/usr/sbin/brctl delbr br0
/sbin/ifconfig eth0 -promisc
/sbin/ifconfig eth0 up
/usr/sbin/openvpn --rmtun --dev tap0
}}}

=== Эмуляция сети в QEMU через сокеты ===

 # Загрузите [http://wiki.qemu.org/download/linux-0.2.img.bz2 образ linux диска]
 # Запустите эмуляцию linux
{{{                              
qemu -hda linux-0.2.img -net nic,model=ne2k_pci,macaddr=AA:BB:CC:DD:EE:01 -net socket,listen=:1234
}}}
 # Запустите эмуляцию Embox
{{{
qemu -kernel build/base/bin/embox -net nic,model=ne2k_pci,macaddr=AA:BB:CC:DD:EE:02 -net socket,connect=127.0.0.1:1234
}}}
 # Каждый фрейм отправленный из Linux будет получен в Embox, и наоборот

=== Отладка с помощью GDB ===
 # Запускаем qemu с ключями -s -S
{{{
qemu -s -S -kernel path/embox
}}}
 # Запускаем GDB
{{{
gdb path/embox
.
.
(gdb) target remote :1234
(gdb) br foo
(gdb) c
}}}

== Bochs ==                 
                            
 # Создать hd0.img (как описано выше)
 # пример bochs.cfg
{{{
megs: 32
cpu: count=1, ips=15000000
romimage: file=/usr/share/bochs/BIOS-bochs-latest, address=0xe0000
vgaromimage: /usr/share/bochs/VGABIOS-elpin-2.40
vga: extension=vbe
ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14
ata0-master: type=disk, path=hd0.img, mode=flat, cylinders=40, heads=16, spt=63, translation=none
boot: disk                  
log: bochsout.txt
mouse: enabled=0
clock: sync=realtime
#gdbstub: enabled=1, port=1234, text_base=0, data_base=0, bss_base=0
#ne2k: ioaddr=0x300, irq=9, mac=AA:BB:CC:DD:EE:00, ethmod=linux, ethdev=eth0
}}}
 # bochs -f bochs.cfg

NOTE: на данный момент в bochs имеет место проблема запуска Embox из grub.

= ARM =

== SKYEYE ==

Из интересующих платформ можем использовать для симуляции под ARM (Atmel AT91) (вообще говоря возможно для LEON2). Имеется поддержка UART.

Установить Skyeye:

   [http://sourceforge.net/projects/skyeye/files/skyeye/skyeye-1.3.0_rc1.tar.gz/download skyeye-1.3.0rc1]

   [http://sourceforge.net/projects/skyeye/files/skyeye/skyeye-1.2.6_rc1/skyeye-1.2.6_rc1.tar.bz2/download skyeye-1.2.6rc1] (recommended)

 # Пример конфига skyeye.conf
{{{
arch:arm
cpu: arm7tdmi

mach: at91

mem_bank: map=M, type=RW,  addr=0x00000000,  size=0x10000000
mem_bank: map=I, type=RW,  addr=0xf0000000,  size=0x10000000
uart:mod=term
}}}
 # Запускаем симулятор
{{{
skyeye -d -c [path-to-embox]/third-party/conf/skyeye.conf
}}}
 # Загружаем Embox в skyeye
{{{
arm-elf-gdb [path-to-embox-elf]
    (gdb) tar extended-remote :12345
    (gdb) load
}}}
 # Теперь можно отлаживать
{{{
    (gdb) c
}}}


#summary процесс портирования Embox на различные процессорные архитектуры

<wiki:gadget url="http://embox.googlecode.com/svn/wiki/gadgets/userbox-under-construction.xml" width="640" height="100" border="0"/>

<wiki:toc max_depth="4" />
= Получение окружения =
Для обеспечения запуска *Embox* на какой либо архитектурной платформе прежде всего нужно настроить [InstallToolchain кросс платформенное окружение для данной архитектуры]. Нужен кросс-компилятор-gcc и отладчик - gdb.
их либо можно получить в бинарном виде либо собрать самостоятельно, с помощью какого либо скрипта или самостоятельно с помощью шагов описанных [InstallToolchainCrossCompiler здесь].

== Шаг первый - загрузочный код ==
Чтобы увидеть исполнение кода на какой либо архитектуре необходимо иметь загрузочный код (в компиляторах это crt0.S) и линкер скрипт с описанием карты памяти.
Минимальный загрузочный код должен выставить регистры процессора определенное состояние, обнулять секцию bss, выставлять указатель стека и если требуется копировать секцию данных.
Модуль для загрузки относится к интерфейсу locore
В конфигурационных файлах необходимо указать следующее
{{{
package genconfig

configuration conf {
	@Runlevel(2) include embox.arch.mips.kernel.locore /* boot code*/
	@Runlevel(2) include embox.arch.mips.lds           /* linker script template*/
	
	@Runlevel(2) include embox.arch.mips.cpu
	@Runlevel(2) include embox.arch.mips.kernel.arch
	
	@Runlevel(2) include embox.driver.diag.no_diag            /* without diag output */
	@Runlevel(2) include embox.driver.interrupt.no_interrupts /* without interrupt code */
	
	
	@Runlevel(2) include embox.prom.noprom_printf      /* without format output library */


	@Runlevel(2) include embox.framework.LibFramework
	@Runlevel(2) include embox.arch.mips.libarch
}
}}}
в слуаче успешной сборки проекта вы можете запустить образ на симуляторе и приконектиться gdb.

== Шаг второй - получение вывода  на диагностический интерфейс ==
Следующим шагом является получение вывода на экран или какой либо терминал для этого необходимо
реализовать интерфейс diag.
{{{
abstract module diag_api {
}
}}}
для этого необходимы следующие функции
{{{
extern void diag_init(void);

extern char diag_getc(void);

extern void diag_putc(char ch);

extern int diag_has_symbol(void);
}}}
В описание модуля нужно указать что он реализует данный интерфейс
{{{
module diag_xxx extends diag_api {
	source "diag_xxx.c"
}
}}}
и конфигурационный файл пример вид
{{{
package genconfig

configuration conf {
	@Runlevel(2) include embox.arch.mips.kernel.locore /* boot code*/
	@Runlevel(2) include embox.arch.mips.lds           /* linker script template*/
	
	@Runlevel(2) include embox.arch.mips.cpu
	@Runlevel(2) include embox.arch.mips.kernel.arch
	
	@Runlevel(2) include embox.driver.diag.diag_xxx          /* diag_xxx as diag output */
	@Runlevel(2) include embox.driver.interrupt.no_interrupts /* without interrupt code */
	
	
	@Runlevel(2) include embox.prom.prom_printf      /* with format output library */


	@Runlevel(2) include embox.framework.LibFramework
	@Runlevel(2) include embox.arch.mips.libarch
}
}}}
в результате после сборки вы должны увидеть на экране следующий вывод
{{{
Embox kernel start
runlevel: init level is 0
runlevel: init level is 1
runlevel: init level is 2
runlevel: init level is 3
}}}

== Шаг третий - запуск пользовательсткого кода (тестов) ==
самым простыми пользовательскими модулями который можно выполнить в системе являются тесты.
Для их выполнения необходимо реализовать стандартные функции *setjmp* и *longjmp*. Обычно они располагаются в модуле LibArch и находятся в папке embox/src/arch/new_arch/lib
после реализации этих функции можно включить какой нибудь тест из набора например тест на саму работу setjmp конфигурационный файл будет выглядить
{{{
package genconfig

configuration conf {
	@Runlevel(2) include embox.arch.mips.kernel.locore /* boot code*/
	@Runlevel(2) include embox.arch.mips.lds           /* linker script template*/
	
	@Runlevel(2) include embox.arch.mips.cpu
	@Runlevel(2) include embox.arch.mips.kernel.arch
	
	@Runlevel(2) include embox.driver.diag.diag_xxx          /* diag_xxx as diag output */
	@Runlevel(2) include embox.driver.interrupt.no_interrupts /* without interrupt code */
	
	
	@Runlevel(2) include embox.prom.prom_printf      /* with format output library */


	@Runlevel(2) include embox.framework.LibFramework
	@Runlevel(2) include embox.arch.mips.libarch
}
}}}
после выполнения вывод должен быть следующим
{{{
Embox kernel start
runlevel: init level is 0
runlevel: init level is 1
	test: running setjmp_test . done
runlevel: init level is 2
runlevel: init level is 3
}}}

== Шаг чествертый - прерывания и исключения ==

== Шаг пятый - время добавление системного таймера ==


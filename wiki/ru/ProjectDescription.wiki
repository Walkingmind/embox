#summary Краткое описание проекта Embox.

<wiki:toc max_depth="2"/>

= Введение =

Современные вычислительные систем применяются в очень большом спектре задач,
начиная от управления двигателями и до огромных дата центров, которые обслуживают
множество пользователей в реальном времени. Для различных задач требуется и
различное количество ресурсов, и требования к таким системам также различные.
Соответственно, программное обеспечение, которое им управляет тоже имеет свои
особенности. Особенно ярко это заметно в сегменте встроенных систем, в них часто
применяют ОС мягкого либо жесткого реального времени. От таких ОС ожидают
предсказуемости реакции в любой ситуации, то есть отсутствия отказов системы.
Такие отказы возникают, как правило, при ошибке в ядре системы. Наибольшее же
количество таких ошибок, например в Линуксе, находится в драйверах. Поскольку,
как известно, драйвера разрабатываются производителями оборудования, и уровень
кода, в этих частях ниже чем в кусках созданных, разработчиками ядра ОС. К тому
же драйвера в монолитном ядре, к которым относится Линукс трудно отлаживать.

Все это накладывает отпечаток на процесс проектирования встроенных систем. В
подобных системах, при создании нового оборудования, сначала создаются
низкоуровневые тесты, затем разрабатывается код драйверов системного загрузчика,
и только потом разрабатывается драйвер в составе основной операционной системы.
Происходит дублирование кода, следовательно, увеличение количества ошибок.

*Embox* представляет из себя конфигурируемую модульную ОС. В отличие от
монолитных ядер, весь код ядра Embox располагается в различных пакетах
(библиотеках), которые реализуют различные интерфейсы, например интерфейс
диспетчера памяти. Только требуемые части системы включаются в конечный образ.
Таким образом, достигается создание образа ОС нацеленного на конкретную задачу,
будь то система для тестирования аппаратного обеспечения, либо полноценная
операционная система, включающая сетевую и файловую подсистемы, а так же
управление виртуальной памятью.

Каждая подсистема также может конфигурироваться в зависимости от назначения
конечного продукта. Например, код данного проекта был портирован на платформу
[http://mindstorms.lego.com/en-us/Default.aspx lego-mindstorms], которая
содержит очень ограниченное количество ресурсов. Для разработки пользовательских
программ на подобных системах не целесообразно портировать стандартную
библиотеку. С другой стороны хотелось бы иметь специализированную библиотеку
нацеленную на работу с двигателями и датчиками. Таким образом удобно было бы
задать несколько стандартных интерфейсов, для управления теми либо иными
подсистемами, и реализовывать те или иные их подмножества в зависимости от
конечной цели проекта.

Поскольку областью применения Embox является прежде всего встраиваемые системы,
а в данном сегменте часто применяются архитекторы процессоров отличные от x86
(например ARM), то Embox задумывался как портируемая ОС, то  есть предназначенная
для [EmboxArchPorting переноса на различные архитектуры]. Для этого основной код
ядра разрабатывался на платформо независимом языке Си, а код привязанный к
конкретной платформе вынесен в отдельную папку.

К тому же поскольку для встроенных систем характерно наличие множество различных
конфигураций конкретных архитектур обычно такие конфигурации называются
[PlatformsDescription платформами], в проекте предусмотрена возможность для
удобного добавления новой платформы.

= Архитектуры =

На данный момент, в проекте определены несколько интерфейсов для различных
подсистем (проект молодой, и они могут поменяться в будущем).  К ним относятся
интерфейс пакета HAL, управление динамической памятью, управление виртуальной
памятью, сетевая подсистема, файловая подсистема.

== HAL ==

HAL – в данном пакете располагаются архитектурные части системы в целом.
К таким частям относятся:
 * Стартовый код процессора
 * Таблица прерываний и исключений
 * Первичные обработчики прерываний и обработчики исключений (в том числе и системных вызовов)
 * Интерфейс управления системными устройствами (контроллер прерываний и системным таймером) (Сами устройства вынесены в драйвера)
 * Процессорно специфичная часть управления виртуальной памятью ( Сам модуль управления находится в соответствующем пакете)

== Динамически выделяемая память ==

[http://ru.wikipedia.org/wiki/%D0%94%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8_%D1%80%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F%D0%B5%D0%BC%D0%B0%D1%8F_%D0%BF%D0%B0%D0%BC%D1%8F%D1%82%D1%8C Динамически выделяемая память] -
память выделяемая приложениям и самой системе в процессе работы, в отличие от
статически выделяемой памяти, которая выделяется на этапе сборки проекта. Иногда
механизм динамического выделения называют кучей (heap).

В проекте реализованно несколько алгоритмов выделения памяти в том числе:
метод близницов, метод граничных маркеров, SLAB и так далее.
Более подробно можно узнать на странице с описанием
[AlgorithmAllocationMemory алгоритмов].

В зависимости от типов выделяемых объектов алгоритмы могут быть разные. Более
подробно о различных алгоритмах динамического распределения памяти можно
прочитать на [AlgorithmAllocationMemory странице с алгоритмами] (или у классиков
Дональда Кнута и Эндрю Таненбаума).

== Виртуальная память ==

Виртуальная память --- механизм позволяющий изолировать адресные пространства
различных процессов и позволяет получить линейное адресное пространство для
каждого процесса. А также позволяет расширить адресное пространство системы.

Более подробно об этом механизме и ее использовании в Embox можно прочитать на
странице описания [VirtualMemory виртуальной памяти] (либо у товарища Эндрю Таненбаума)

== Многопоточность ==
В этом пакете находятся средства позволяюшие обеспечить псевдо паралельное
выполнение приложений. Такие как планировщики, средства синхронизации и
межпроцессорного обмена и так далее.

== Сетевая подсистема ==
В проекте есть реализация (не полная) стека протоколов TCP/IP. Она включает в
себя реализацию нескольких протоколов таких как: IP, ICMP, ARP, UDP, TFTP и
так далее. Основной особенность реализации является что можно включать в
конечный образ только необходимые протоколы, что экономит ресурсы системы и
упрощает отладку модулей.

== Файловая подсистема ==
Файловая система предоставляет единый интерфейс доступа к данным, что является
удобным как для обращения к данным на устройствах храниния, так и для обращения
с различными устройствами, например устройствами ввода вывода.

В проекте реализована виртуальная файловая система и драйвера для некоторых
типов flash памяти.

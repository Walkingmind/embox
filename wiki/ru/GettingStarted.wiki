#summary С чего начать в Embox

Эта страница описывает простой путь для того чтобы собрать и запустить Embox. 

Для сборки проекта необходимо следующее окружение
 * gcc и make
 * кросс компилятор для целевой платформы 

 = Установка окружения =
<table cellspacing="10"><tr valign="top"><td width="50%">
== Windows(R) (Cygwin) ==
Установите [http://cygwin.com/ cygwin]. Во время установки необходимо выбрать следующие пакеты: make, gcc. 
Детали [InstallToolchainWindowsCygwin здесь].

</td><td>
== Linux ==
В Линуксе обычно уже есть необходимое окружение (make, gcc). Если его нет можно его доставить самостоятельно. В ubuntu можно использовать следующую команду для установки make и gcc
{{{
$ sudo apt-get install build-essential
}}}
</td></tr></table>

= Сборка Embox =
Мы установили необходимое окружение для сборки проекта под x86 архитектуру. Поскольку Embox является высококонфигурируемым проектом перед сборкой мы должны указать набор модулей участвующих в сборке, а также параметры для этих модулей. Сборка же осуществляется просто командой make.
Но в любом случае прежде всего заходим в корневую папку проекта она содержит (conf/, src/, ...)
{{{
$ cd embox
}}}

== конфигурация Embox ==
Затем нужно указать набор опций и модулей которые с которыми мы хотим собирать систему. Embox содержит набор готовых темплейтов и чтобы указать нужный нам нужно выполнить команду
Заходим в корневую папку проекта она содержит (conf/, src/, ...)
{{{
$ make confload
}}}
В результате появится список доступных темплейтов 
<table cellspacing="10" width="839"><tr valign="top"><td width="50%">
Наиболее простой путь для загрузки нужных параметров это указать в команде имя темплайта.
{{{
make confload-<template>
}}}
</td><td>
Например, для быстрого ознакомления подходит темплейт qemu имеющийся в каждой архитектуре поскольку нам нужна архитектура x86 требуемый темплейт будет *`x86/qemu`*. А команда:
{{{
make confload-x86/qemu
}}}
</td></tr></table>

Конфигурацию проекта под конкретную требуемую платформу вы можете найти на [PlatformsDescription соотвествующей странице].

== Сборка образа ==
После конфигурации чтобы собрать проект вам необходимо просто набрать команду
{{{
$ make
}}}

== Загрузка на QEMU ==
Для демонстрации работоспособности нужно запустить QEMU с уже собранным образом. Самый простой способ это выполнить скрипт ./scripts/qemu/auto_qemu:
{{{
$ sudo ./scripts/qemu/auto_qemu
}}}
Этот скрипт создает tuntab для этого ему нужны права суперюзера. Он использует утилиту ethtool установить ее можно с помощью команды
{{{
$ sudo apt-get install ethtool
}}}
В случае успешного запуска вы должны наблюдать вывод сообщений на экран QEMU. После загрузки появится приглашение "embox>" и вы сможете запускать на выполние команды.
Для начала наберите команду "help" которая выведет вам список доступных команд.

Для проверки соединения, после загрузки Embox. Пропингуйте интерфейс 10.0.2.16. В случае успеха вы можете зайти на него с помощью telnet

Для выхода из Qemu нужно набрать последовательность *ctrl + 'a'* затем *'X'*

== Отладка ==
Для работы в режиме запуска образа в режиме отладки, можно использовать тот же скрипт передав ему в качестве параметров следующие флаги *-s -S -no-kvm* то есть
{{{
$ sudo ./scripts/qemu/auto_qemu -s -S -no-kvm
}}}
После этого QEMU будет ожидать подключения gdb клиентом.

== Сборка под другие архитектуры ==
Embox поддерживает следующие архитектуры процессора: x86, ARM, Microblaze, SPARC, PPC, MIPS.

Для работы с архитектурами отличными от x86 вам понадобиться [InstallToolchainCrossCompiler кросс-компилятор].
После установки кросс-компилятора вам достаточно повторить шаги начиная с конфигурации. А именно для выбранной архитектуры набирите команды
{{{
make confload-<arch>/qemu
make
sudo ./scripts/qemu/auto_qemu
}}}
Вы должны увидеть успешное прохождение загрузочных тестов, а затем приглашение, точно также как и в случае с архитектурой x86.

=== Поддержка сетевого соединения для различных архиектур ===
В Embox не для всех архитектур QEMU поддерживают сетевые соединенияю Поддержка есть для x86, ARM, Microblaze

=== Отладка для различные архитектур ===
Отладка для на x86 архитектур ничем не отличается от описанной выше, единственное не нужно указывать ключ *-no-kvm*


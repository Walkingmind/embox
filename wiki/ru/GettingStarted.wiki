#summary С чего начать в Embox

На этой странице описан простой путь сборки и запуска Embox.

Необходимое окружение:
 * gcc и make
 * кросс компилятор для целевой платформы

= Установка окружения =
<table cellspacing="10"><tr valign="top"><td width="50%">
== Windows(R) (Cygwin) ==
Установите [http://cygwin.com/ cygwin]. Во время установки необходимо выбрать следующие пакеты: make, gcc.
Подробнее [InstallToolchainWindowsCygwin здесь].
</td><td>
== Linux ==
В Linux обычно уже есть необходимое окружение. Если нет, его можно установить самостоятельно. Например, для систем, основанных на Debian:
{{{
$ sudo apt-get install build-essential
}}}
</td></tr></table>
= Сборка Embox =
Поскольку Embox является высококонфигурируемым проектом, перед сборкой нужно указать набор модулей, участвующих в сборке, а также параметры для этих модулей. Сборка осуществляется просто командой make.
Все описанные ниже команды запускаются из корневой папки проекта, которая содержит (conf/, src/, ...)
{{{
$ cd embox
}}}

== Конфигурация Embox ==
Для конфигурации необходимо указать набор опций и модулей, которые мы нужно включить в систему. Embox содержит набор готовых темплейтов, список можно посмотреть из корневой папки проекта:
{{{
$ make confload
}}}
<table cellspacing="10" width="839"><tr valign="top"><td width="50%">
Самый простой способ загрузить темплейт - указать в команде его название:
{{{
make confload-<template>
}}}
</td><td>
Для быстрого ознакомления подойдет темплейт qemu, который имеется для каждой архитектуры. Для x86 это *`x86/qemu`*. Команда:
{{{
make confload-x86/qemu
}}}
</td></tr></table>

Конфигурации проекта под различные платформы можно найти на [PlatformsDescription соотвесттвующей странице].

== Сборка образа ==
После того, как проект сконфигурирован, для сборки достаточно запустить скрипт make:
{{{
$ make
}}}

== Загрузка на QEMU ==
Собранный образ можно запустить QEMU. Самый простой способ - выполнить скрипт ./scripts/qemu/auto_qemu:
{{{
$ sudo ./scripts/qemu/auto_qemu
}}}
Этот скрипт создает tuntab, для чего ему нужны права суперпользователя. Кроме того, в скрипте используется утилита ethtool. Установка для основанных на Debian систем:
{{{
$ sudo apt-get install ethtool
}}}
Если запуск прошел успешно, то на экране QEMU будут выводиться сообщения. После загрузки системы появится приглашение "embox>", теперь можно запускать команды на выполнение.
Например, "help" выведет список доступных команд.

Для проверки соединения можно пропинговать интерфейс 10.0.2.16. Если соединение установлено, к терминалу можно подключиться по telnet.

Для выхода из Qemu нужно набрать последовательность *ctrl + 'a'*, затем *'X'*.

== Отладка ==
Для работы в режиме отладки можно использовать тот же скрипт, передав ему в качестве параметров флаги *-s -S -no-kvm*, то есть:
{{{
$ sudo ./scripts/qemu/auto_qemu -s -S -no-kvm
}}}
После этого QEMU будет ожидать подключения gdb-клиентом.

== Сборка под другие архитектуры ==
Embox поддерживает следующие архитектуры процессора: x86, ARM, Microblaze, SPARC, PPC, MIPS.

Для работы с архитектурами, отличных от x86, понадобится [InstallToolchainCrossCompiler кросс-компилятор].
После установки кросс-компилятора, достаточно повторить шаги, начиная с конфигурации:
{{{
make confload-<arch>/qemu
make
sudo ./scripts/qemu/auto_qemu
}}}
На экране должны выводиться сообщения об успешном прохождении загрузочных тестов, а затем приглашение, как и в случае с архитектурой x86.

=== Поддержка сетевого соединения для различных архиектур ===
Embox поддерживает сетевые соединения для архитектур x86, ARM, Microblaze.

=== Отладка для различные архитектур ===
Отладка для различных архитектур не отличается от описанной выше, единственное, не нужно указывать ключ *-no-kvm*


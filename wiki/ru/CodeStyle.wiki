#summary Стандарт оформления кода, принятый в проекте.

<wiki:toc max_depth="3" />

= Введение =

В настоящий момент codestyle является неполным. Если есть какие-то недопонимания,
как нужно писать код - обращайтесь. Мы расширим этот документ, объясним.

По любым вопросам по документу из серии "почему" и "что это значит" также
задавайте вопросы, будем рады ответить.

Более того, codestyle был введен не с самого начала, поэтому возможны участки
кода, где он соблюден плохо. В этом случае хорошо было бы исправить код,
разумеется, не повредив целостности всего проекта=).

== Embox codestyle ==

За основу стиля кодирования, принятого в проекте Embox, взят стиль Кернигана и
Ритчи (K&R). Далее перечислены основные правила структуры и оформления кода.
* Все содержимое файлов (в том числе и комментарии) должно содержать только
английсие символы.*

=== Расположение текста ===

Длина строк не должна превышать 80 символов.

Размер функции должен быть порядка одного экрана (учимся писать по-хорошему).

=== Табуляция и скобки ===

Пример хорошо написанных функций:
{{{
int foo(void) {
    while (NULL != p) {
        for (i = 0; i < p->tabsize; i++) {
            if (p->tab[i] == x) {
                return i;
            }
        }
        return -1;
    }
}
}}}

{{{
int bar(void) {
    __asm__ __volatile__ (
        "lwi  %0, %1, 0;\n\t"
        "mfs     %0, rmsr;\n\t"
        "or   %0, r0, %2;\n\t"
        "mts   rmsr, %1, 0;\n\t" :
        "=r"(msr), "=&r"(tmp):
        "r"(status), "i"(MSR_VM_MASK) :
        "memory"
    );
}
}}}
*Комментарии к примеру*:
 * В качестве отступа используется табуляция, в редакторе следует задать длину табуляции в 4 знакоместа.
 * Сокращенная запись (например, однострочный if) не используется. Всегда ставить фигурные скобки.
 * Открывающаяся фигурная скобка ставится на той же строке, где и операнд, к которому она относится (через 1 пробел).
 * Закрывающаяся фигурная скобка ставится на новой строке, на том же уровне (отступ слева), что и "родительский" код.

=== Пробелы и пустые строки ===

*Пустые строки*:
 * Не более одной пустой строки подряд
 * В конце файла 1 пустая строка
 * Между объявлениями или определениями функций и переменных 1 пустая строка
 * Определения локальных переменных функции отделяются от кода 1 пустой строкой

Насчет пробелов все стандартно.

*Один пробел ставится*:
 * между операторами:
{{{
int a = x + y * (1 + b) / foo(11);
}}}
 * между управляющими конструкциями (for/while/if/switch) и скобками:
{{{
if (a < 7) {
  ...
}
}}}
 * При приведении типа:
{{{
int x = (int) ((double) a / 13 + 13);
}}}
*Пробел не ставится*:
 * При описании функции:
{{{
int main(void) {
}
}}}
 * При вызове функции:
{{{
int x = foo(1);
}}}
 * До или после операторов инкремента и декремента:
{{{
i++;
}}}
 * При указателе между именем и {{{*}}}:
{{{
struct list_head *tmp;
}}}

=== Макросы ===

 * Если макрос многострочный - пишите его в несколько строк =) Для этого используется обратный слеш. Он должен ставиться через 1 пробел.
 * Все аргументы макроса внутри него должны быть в скобках. Исключением является склеивание строк ##. Параметры макроса должны отличаться от обычных переменных, например:
{{{
#define MACRO(_field) struct somestruct ss = { .field = _field }
}}}
 * Макрос должен подразумевать, что после него будет стоять точка с запятой.
{{{
#define MACRO(...) do { } while(0)
}}}
 * Обратите внимание, после while (0) не стоит “;”

Следует различать макросы-”процедуры” (раскрываются в statements) и макросы-”функции” (раскрываются в выражение). Первые типы макросов используются для объявления и выполнения побочных эффектов, их следует помещать внутрь do {...} while(0), таким образом, неправильное использование приведет к ошибке компиляции. Например, нужно писать:
{{{
#define STORE(x) \
    do { ((volatile int *) 0x100) = x } while (0)
}}}
Тогда выражение STORE(some_var) = 0xff не скомпилируется. Если же опустить do {} while(0), то такая конструкция будет выполнять совсем не то, что задумывал создатель макроса.
Второй тип макросов (“функции”) ведут себя как функции. Они должны помещаться внутрь ({ … }). Хороший пример такого макроса {{{WAITQ_WAIT_TIMEOUT}}}, который принимает выражение и несколько раз проверяет его истинность, поэтому он не может быть реализован в виде функции.

Примеры хороших макросов:
{{{
#define INTERRUPT_NRS_TOTAL 16
}}}
{{{
#define interrupt_nr_valid(interrupt_nr) \
	((interrupt_nr_t) interrupt_nr < (interrupt_nr_t) INTERRUPT_NRS_TOTAL)
}}}
{{{
#define INTERRUPT_NR_CHECK(interrupt_nr) \
  do { \
    if (!interrupt_nr_valid(interrupt_nr)) { \
      printf("Invalid interrupt number"); \
      return -EINVAL; \
    } \
  } while (0)
}}}

=== Именование ===

==== Основные требования ====
Все сущности должны носить значимые имена. В Си принято использовать {{{стиль_через_подчеркивание}}}. Почти всегда используются строчные буквы, заглавные - только для макросов и констант, определенных через директиву #define.
==== Именование в модулях ====
В модуле объединены логически связанные сущности. Все они должны иметь в имени общий для данного модуля префикс.
==== Локальные переменные ====
В именах переменных допустимо использовать общепринятые сокращения типа cnt, err, ret и прочее, для переменных с ограниченной областью видимости, например, в теле функции. Имена переменных должны быть короткими, но понятными и значимыми. Для итерации по числовым диапазонам используются общепринятые i, j, k. Для итерации по спискам используются i_имясущности, например i_netdev, i_file.
==== Глобальные переменные и константы ====
Вы уверены, что нельзя обойтись без глобальной переменной? Тогда формат именования : {{{<имя модуля>_r_<имя переменной>}}}, таким образом глобальные переменные можно безошибочно отличить от любой другой. Глобальные константы именуются подобно: {{{<имя модуля>_c_<имя константа>}}}.
==== Функции ====
Все функции именуются по формату {{{<имя модуля>_<имя функции>}}}, даже если функция не экспортируемая. Имя функции должно четко определять то, что она совершает. Не нужно использовать сокращения, если это не обосновано. Сравните: {{{count_active_users()}}} и {{{cntusr()}}}.
Неэкспортируемые функции необходимо помечать как static.
==== Структуры ====
Желательно, чтобы имя поля структур содержало некоторый небольшой префикс, отличающийся для разных структур. Особенно если структура содержит поля, имена которых совпадают с именами полей других структур.
Например:
{{{
struct net_interface { .ni_name, .ni_num, .ni_xxx }
}}}
==== Константы и макросы ====
Задефайненные константы и макросы, и только они, пишутся {{{ЗАГЛАВНЫМИ_БУКВАМИ}}}. Допускается (но не требуется) писать макрос маленькими буквами через подчеркивания, если при вызове он ни чем не отличается от обычной функции, то есть не имеет никаких побочных эффектов (не содержит инструкции return и т.п.)

=== Комментарии ===
 * Комментарий - это законченное, полноценное предложение, которое должно следовать нормам английского языка.
 * В комментариях необходимо отмечать не очевидные свойства функции, например то, что функция должна быть запущена при определенных блокировках.
{{{
/** Called by critical dispatching code with IRQs disabled. */
static void sched_preempt(void) {
		sched_lock();
		__schedule(1);
		sched_unlock();
}
}}}
 * Избегайте избыточного комментирования. Комментарии типа  “++i; // increments i” самоочевидны и не несут полезной информации.
 * Следите за тем, чтобы комментарии всегда были в актуальном состоянии. Помните, что комментарий, противоречащий коду, хуже, чем отсутствие комментария.
 * В коде должен присутствовать только английский язык и никакого транслита. Это касается не только комментариев, но и именования функций и переменных.
 * Допускаются только комментарии в стиле С:
{{{
/* ... */
}}}
 * Комментарий *//...* не допускается
 * Большие блоки кода следует отключать, используя условную компиляцию препроцессора:
{{{
#if 0
  ... unused_code ...
#endif
}}}
 * Многострочные комментарии начинаются со звездочки. В конце предложений ставится точка, Параграфы отделяются пустой строкой:
{{{
/* This code is necessary.
 *
 * Attension! It uses architecture-dependent code for SPARC.
 */
... Some code
}}}
 * В начале файлов и к каждой функции пишутся [http://www.stack.nl/~dimitri/doxygen/manual.html Doxygen] комментарии. Это относится в первую очередь к заголовочным файлам, содержащим API модуля.

   Как начинать каждый файл:
{{{
/**
 * @file
 * @brief Short brief: starts with capital letter, point on the end.
 * @details Complete description. Possible to be written not on one line
 * Each line must be less then 80 symbols length. Each phrase ends with point.
 * Different paragraphs should be separated with empty line.
 * <empty line after description>
 * @date <creation date: dd.mm.yy>
 * @author <Name Surname of the first author>
 * @author <Name Surname>
 *         - <Changes description>
 *         - Doxygen understands any visual enhancement commands in this
 *           section, e.g. you may use hyphens to create a list of items.
 */
}}}
   Пример такого комментария:
{{{
/**
 * @file
 * @brief IO Boards driver.
 * @details This driver defines generic operations with registers
 * of IO board's address space: @link #io_board_reg_load() load @endlink
 * and @link #io_board_reg_store() store @endlink.
 *
 * <b>Driver details</b>:
 * <table>
 * <tr><td>Bus</td>         <td>@c APB</td></tr>
 * <tr><td>Vendor ID</td>   <td>@c 0x08 (Terkom)</td></tr>
 * <tr><td>Device ID</td>   <td>@c 0x0A</td></tr>
 * <tr><td>Base</td>        <td>@c 0x80000B00</td></tr>
 * <tr><td>IRQ</td>         <td>@c --</td></tr>
 * </table>
 *
 * @date 18.12.08
 * @author Anton Bondarev
 *         - Initial implementation
 * @author Eldar Abusalimov
 *         - Reviewing, refactoring and documenting
 */
}}}

 * Все макросы, объявления типов, прототипы функций, перечисления, объединения, структуры, а также их поля, являющиеся частью общедоступного API, обязаны быть подробно прокомментированы.

{{{
/**
 * Checks if the specified irq_nr represents valid IRQ number.
 * @note The same as HAL @link interrupt_nr_valid() @endlink macro.
 */
#define irq_nr_valid(irq_nr) interrupt_nr_valid(irq_nr)

/**
 * Type representing interrupt request number.
 * @note The same as HAL #interrupt_nr_t type.
 */
typedef interrupt_nr_t irq_nr_t;

/**
 * Interrupt Service Routine type.
 *
 * @param irq_nr the number of interrupt request being handled
 * @param data the device tag specified at @link irq_attach() @endlink time
 *
 * @return interrupt handling result
 * @retval IRQ_NONE if ISR didn't handled the interrupt
 * @retval IRQ_HANDLED if interrupt has been handled by this ISR
 */
typedef irq_return_t (*irq_handler_t)(irq_nr_t irq_nr, void *data);

/**
 * Attaches @link #irq_handler_t interrupt service routine @endlink to the
 * specified @link #irq_nr_t IRQ number @endlink.
 *
 * @param irq_nr the IRQ number to attach the @c handler to
 * @param handler the ISR itself
 * @param flags TODO not yet implemented -- Eldar
 * @param data the optional device tag which will be passed to the ISR.
 * @param dev_name the optional device name
 *
 * @return attach result
 * @retval 0 if all is OK
 * @retval -EINVAL if @c irq_nr is not @link #irq_nr_valid() valid @endlink or
 *                 if the @c handler is @c NULL
 * @retval -EBUSY if another ISR has already been attached to the specified IRQ
 *                number
 * @retval -ENOSYS if kernel is compiled without IRQ support
 */
extern int irq_attach(irq_nr_t irq_nr, irq_handler_t handler,
		irq_flags_t flags, void *data, const char *dev_name);
}}}

=== Заголовочные файлы ===

Все, что описывается в файле *.h* должно быть "обернуто" следующим образом:
{{{
#ifndef <subsystem_prefix>_<file_name>_H_
#define <subsystem_prefix>_<file_name>_H_

#endif /* <subsystem_prefix>_<file_name>_H_ */
}}}

=== Особые участки кода ===
Некоторые участки кода должны быть выполнены с определенными блокировками. Это, например, отключение прерываний и использование примитивов синхронизации. Такие участки когда должны быть заключены в фигурные скобки { }.
{{{
int foo(struct my_data *data) {
	sched_lock();
	{
		pool_free(&my_pool, data);
	}
	sched_unlock();
}
}}}

=== Определение новых типов ===
Директиву #typedef по возможности лучше вообще не использовать. Но если все-таки используетя, то хотя бы по назначению. Директива #typedef используется:
для избежания неразберихи в использовании целочисленных типов
как тип-абстракция, реальный тип которого будет разниться в зависимости от конфигурации
для пустых структур, если в некоторых конфигурациях реальный тип может быть простым. Например:
 * no_affinity.h:
{{{
typedef struct { } __affinity_t;
}}}
 * smp_affinity.h:
{{{
typedef int __affinity_t;
}}}

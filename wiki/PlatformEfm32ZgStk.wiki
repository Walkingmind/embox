#summary Getting started with Efm32ZgStk
#labels Phase-Deploy

<img src="http://www.silabs.com/SiteCollectionImages/board-images/efm32zg-stk3200.png" align="right">
The board features EFM32ZG222F32 Zero Gecko MCU and on-board SEGGER J-Link debugger.

===Install Toolchain===

 # Download linux installation toolchain from https://launchpad.net/gcc-arm-embedded/+download. You need file like gcc-arm-none-eabi-4_8-`*`-linux.tar.bz2
 # Extract it somewhere. I will assume system-wide installation to `/opt`, but it could be any directory.
{{{
$ cd /opt
$ sudo tar -axf ~/Downloads/gcc-arm-none-eabi-4_8-2013q4-20131204-linux.tar.bz2
}}}
(Because `/opt` isn't writeable to regular user it is called via `sudo`)
 # Download and extract SEGGER J-Link software pack for Linux (32 or 64 bit TGZ) from http://www.segger.com/jlink-software.html When serial number requested click on "I do not have a serial number because I own an eval board with J-Link on-board"

===Configure and build Embox===
 # Grab an Embox copy. Open termial and  change directory to it's root
{{{
$ cd ~/embox
}}}
 # Load template `platform/efm32zg_sk3200/debug`
{{{
$ make confload-platform/efm32zg_sk3200/debug
}}}
 # If you extracted toolchain not to `/opt`, edit `conf/build.conf`, change `CROSS_COMPILE` to match toolchain extraction dir. If you extracted toolchain in `~/gcc-arm-embedded`, then `CROSS_COMPILE` should be like
{{{
CROSS_COMPILE = ~/gcc-arm-embedded/gcc-arm-none-eabi-4_8-2013q4/bin/arm-none-eabi-
}}}
 # Build it
{{{
$ make
}}}
You should see `Build complete` at the end.

===Load Embox===
Now you should have one terminal opened with Embox root current directory and Embox should be successfully built.
 # Open second terminal and change directory to SEGGER package extracted directory.
 # In second terminal, run JLink `gdb` server
{{{
$ sudo ./JLinkGDBServer
...
J-Link found 1 JTAG device, Total IRLen = 4
JTAG ID: 0x0BC11477 (Cortex-M0)
Connected to target
Waiting for GDB connection...
}}}
 # Switch to the first terminal with Embox and run `gdb` from toolchain to debug `embox` after `.gdbinit` script loaded. If you've placed toolchain not in `/opt`, provide another path for gdb.
{{{
$ /opt/gcc-arm-none-eabi-4_8-2013q4/bin/arm-none-eabi-gdb build/base/bin/embox -x platform/efm32zg_sk3200/.gdbinit
Target interface speed set to 30 kHz
Target endianess set to "little endian"
Resetting target
Select auto target interface speed (2000 kHz)
Selecting device: EFM32ZG222F32
Flash breakpoints enabled
(gdb) 
}}} 
 # load Embox to target and start it
{{{
(gdb) load
Loading section .text, size 0x53b4 lma 0x0
Loading section .ARM.exidx, size 0x8 lma 0x53b4
Loading section .rodata, size 0x1e20 lma 0x53c0
Loading section .data, size 0x1a0 lma 0x71e0
Start address 0x74, load size 29564
Transfer rate: 14435 KB/sec, 5912 bytes/write.
(gdb) c
Continuing.
}}}

#summary First steps
#labels Featured

This page describes simple steps to get the first Embox image running on x86 simulator (using the QEMU simulator). More detailed introductions can be found in the corresponding sections.
There are also platform-specific instructions available separately for each of [PlatformsDescription supported platforms].

= [InstallToolchain Preparing environment] = 
Depending on your operating system perform the following steps. If it is unclear for you what is happening below please refer to the [InstallToolchain complete manual].
<table cellspacing="10" width="839"><tr valign="top"><td width="50%">
== Windows ==
First you have to install [http://cygwin.com/ Cygwin] Unix compatibility layer. During normal installation you'll be asked for additional packages, choose *make* and *gcc*. In the most case that will be enough.
 There are possible issues with using default gcc from Cygwin. If you are experiencing some problems with building Embox, try to use [http://code.google.com/p/embox/wiki/Downloads?tm=2#Tools our build] of gcc as one known to work.
</td><td>
== Linux ==
Linux boxes usually already have working compilation environment. If not, simply install *make* and *gcc* with your packet manager.
 For example, there is metapackage on Ubuntu for those things, installing is quite simple:
{{{
sudo apt-get install build-essential
}}}
</td></tr></table>

= [BuildingEmbox Building Embox] =
Well, you've installed build environment, now it's time to perform you first Embox build. Embox is highly configurable, it consists of a set of modules that can be configured with custom options, and compiling it is not just typing `make`.

Anyway, first of all, you have to go into `embox` directory (which contains `src/`, `mk/`, etc.):
{{{
cd embox
}}}

== Configuring ==
Before actually compiling the system, you have to describe a configuration to build.

Embox is bundled with a set of common configuration templates for various architectures and purposes. It is much more easy to modify one of them instead of writing your own from scratch. To list all available template just type:
{{{
$ make confload
}}}

Once you know the name of the template, you should _load_ it in order to be able to build it.
<table cellspacing="10" width="839"><tr valign="top"><td width="50%">
The simplest way to load it is to type the following line with *`<template>`* substituted by the desired value.
{{{
make confload-<template>
}}}
</td><td>
For example, if you want to play with Embox just as on a real machine, configure it using *`x86/debug`* template:
{{{
make confload-x86/debug
}}}
</td></tr></table>

Another way of loading a template is using an interactive menu (however, it requires `dialog` program to be installed):
{{{
$ make menuconfig
}}}

== Compiling ==
Now you can build Embox just typing
{{{
make
}}}
Based on the configuration loaded on the previous step the build system determines which modules are needed to be built and includes those to the image.

= [SimulationQemu Running on QEMU] =
The most straightforward way to test the resulting image is to run it under the [http://www.qemu.org QEMU simulator].
<table cellspacing="10" width="839"><tr valign="top"><td width="50%">
== Windows ==
On Windows you can use *Qemu Manager*, a step-by-step guide is available [SimulationQemuWindows here].

Another option is to build QEMU for Windows manually as described on the [http://wiki.qemu.org/Hosts/W32 QEMU wiki].
</td><td>
== Linux ==
Installation on Linux is pretty simple, most likely that just installing *qemu* package will be enough:
{{{
sudo apt-get install qemu
}}}
</td></tr></table>
Once you have the QEMU installed, you can run it using the following command:
{{{
qemu-system-i386 -kernel build/base/bin/embox -nographic
}}}
More details about using QEMU you can get [SimulationQemu here].

A new window should appear with Embox running within it.
In case of success you will get a command prompt:
{{{
embox>
}}}
Type *`help`* to list all available commands.
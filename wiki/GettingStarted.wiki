#summary How to get envolved to Embox

This wiki describes simple way get first Embox image running x86 simulator (QEMU).

= Preparing environment = 
Depending on your operating system perform the following steps. If it is unclear for you what is happening below please refer to the [InstallToolchain complete manual].
<table cellspacing="10"><tr valign="top"><td width="50%">
== Windows ==
First you have to install [http://cygwin.com/ Cygwin] Unix compatibility layer. During normal installation you'll be asked for additional packages, choose *make* and *gcc*. In the most case that will be enough.
 There are possible issues with using default gcc from Cygwin. If you are experiencing some problems with building Embox, try to use [http://code.google.com/p/embox/wiki/Downloads?tm=2#Tools our build] of gcc as one known to work.
</td><td>
== Linux ==
Linux boxes usually already have working compilation environment. If not, simply install *make* and *gcc* with your packet manager.
 For example, there is metapackage on Ubuntu for those things, installing is quite simple:
{{{
$ sudo apt-get install build-essential
}}}
</td></tr></table>

= Building =
Well, you've installed build environment, now it's time to perform you first Embox build. Embox is highly configurable, it consists of a set of modules that can be configured with custom options, and compiling is not just typing `make`.

But first of all, into `embox` directory (which contains `src/`, `mk/`, etc.):
{{{
$ cd embox
}}}

== Configuring ==
Before actually compiling the system, you have to describe build configuration. Embox is bundled with a set of common configuration templates for various architectures and purposes. It is much more easy to modify one of them instead of writing your own from scratch.

There are two ways to load a configuration template.
If you know the exact name of the template, the simplest way to load it is to type the following line with *`<project>`* and *`<profile>`* substituted by the desired values.
{{{
$ make config TEMPLATE=<project>/<profile>
}}}
For example, if you want to play with Embox just as on real machine, configure it using *`x86/debug`* template:
{{{
$ make config TEMPLATE=x86/debug
}}}

If you want to look at list of all available templates you may use interactive menu:
{{{
$ make menuconfig
}}}

== Compiling ==
Now you can build Embox just typing
{{{
$ make
}}}
It's smart build-system resolves all dependences and automatically includes those to image.

= Running Embox =
Now, You have Embox image ready to run. You can place image on disk and boot it with grub as described [here], or run it on simulator. We usually use second choise for easear debug. As You've build x86 version, run it on qemu (various parameters for qemu can be found [http://code.google.com/p/embox/wiki/InstallToolchainSimulation#QEMU here]). Very simple is 
{{{
$ qemu -kernel build/base/bin/embox
}}}
New window opens with Embox to play with.

= Going deeper =
== Understanding modules ==

Embox consists of modules. Module is a building unit, generalization of object in terms of compilation. Module is a set of objects with dependencies. Each subsystem is a module, which can be included or not to resulting image. Module can be included by automatic dependences resolving or by explicit inclusion. Inclusion is controlled by conf/mods.conf which is preprocessed.

Config syntax is pretty simple. To include general module with kernel domain, add to mods-kernel.conf 
{{{
mod(embox.kernel.irq)
}}}

As there are several runlevels, module can be explicitly loaded on chosed one. For example, this loads irq on 2'nd runlevel
{{{
mod(embox.kernel.irq, 2)
}}}

There are some specail module types, which are included with special directive. Such types are: test, cmd (command), example
{{{
test(kernel.irq_test)
}}}
Domain is not specified when including special modules.

== Options ==

Options are placed in conf/ too. Build.conf points compilator and describes compilator's options such as optimization, debug info,..

System configuring options are placed in options.conf. These are controll buffers' size,..

lds.conf describes target's memory layout and section loading. 

== Platforms ==

There are several supported platforms, some of them have simulator.

List of simulators with starting parameters can be found [InstallToolchainSimulation here].

Building for a specified platform is accomplished by selecting appropriate template.
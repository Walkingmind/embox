#summary Simple command line
#labels Phase-Implementation

= Оболочка системы =
<wiki:toc max_depth="3" />

 == Описание ==
'''Оболочка''' предоставляет простейший интерфейс командной строки для управления системой, позволяя пользователю выполнять расширенную настройку и диагностику (для этого используется набор специальных ~~утилит~~). Консоль поддерживает историю команд посредством стрелок, а также добитие команд с помощью клавиши табуляции.
Работает через эмулятор терминала [http://ru.wikipedia.org/wiki/VT100 VT100], для взаимодействия с пользователем используется отладочный интерфейс [http://ru.wikipedia.org/wiki/RS232 RS232].

 == Пример использования ==
{{{
Welcome to EMBOX and have a lot of fun...
embox> agrrr
agrrr: Command not found

embox> 
}}}
Подробную информацию о конкретных командах можно найти на ~~этой~~ странице.

 == Реализация ==
Модуль состоит из нескольких независимых частей.

 === Интерпретатор ===
Отвечает за разбор полученной из консоли команды, выделение аргументов, сопоставление и запуск соответствующего обработчика. Кроме того, участвует в дополнении частично введенной команды до полной.
Код находится в папке `shell`

 === Консоль ===
Реализует привычную командную строку: вывод приглашения, перемещение курсора по строке с помощью стрелок, навигация по истории введенных команд и т.д. 
Построена с использованием паттерна [http://ru.wikipedia.org/wiki/MVC MVC].
Код в `shell/console`

 ==== Модель ====
Внутреннее представление введенной пользователем команды. Обеспечивает базовые операции над строкой: перемещение курсора, вставка/удаление символа, а также поддержка истории команд.
 `shell/console/cmdline`

 ==== Представление ====
Отвечает за взаимодействие с драйвером терминала: вывод приглашения, передача команд управления курсором, получение введенных пользователем данных, синхронизацию экрана с внутренней моделью по команде контроллера и т.д. Представление не общается напрямую с контроллером и моделью, все события передаются по интерфейсу `SCREEN_CALLBACK`.
 `shell/console/screen`

 ==== Контроллер ====
Описывает структуру `CONSOLE` и интерфейсы, необходимые для взаимодействия с интерпретатором.
Выполняет начальную инициализацию консоли, обеспечивает обработку событий, полученных от представления, изменение модели, вызов команд обновления представления.
 `shell/console/console`

 === Терминал ===
Абстракция, позволяющая общаться с внешним устройством, используя управляющие последовательности вместо потока сырых данных.
Описывает необходимые структуры и простой интерфейс для программ, использующих терминал. Кроме того, содержит константы для некоторых часто используемых последовательностей.
 `drivers/char/terminal`

 === Драйвер VT100 ===
Общие для парсера и генератора структуры.
 `drivers/char/vt`

 ==== Парсер ====
Разбор входящего потока данных на токены. В основе - конечный автомат с открытым исходным кодом, написанный Josh Haberman и доступный по [http://vt100.net/emu/dec_ansi_parser этому] адресу.
 `drivers/char/vtparse`

 ==== Генератор ====
Генерация потока данных из токенов. 
 `drivers/char/vtbuild`
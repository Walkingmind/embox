#summary How to work with threads in embox.

= Что наши потоки могут =

В системе могут работать несколько потоков, которые могут поочередно получать доступ к процессорному времени. Они обладают приоритетами и могут находиться в разных состояниях. Для них реализованы следующие механизмы: очередь сообщений, ожидание события и мьютексы.

= Подробно =

Интерфейс для планировщика описан в thread.h, реализован он в thread.c. В thread.h описана сама структура потока, содержащая следующие поля 
(исключены поля, имеющие непосредственное отношение к планировщику и совершенно ненужные пользователю):
{{{
struct context context; /* Контекст, соответствующий потоку. Собственно, определяет состояние и действия внутри потока */

void (*run)(void); /* Функция, с которой начинается выполнение потока. */

thread_id_t id; /* Идентификатор потока. Уникален для каждого существующего */
	
thread_priority_t priority; /* Приоритет потока. Чем он выше, тем больше/раньше/чаще поток будет запускаться. */

thread_state_t state; /* Состояние потока. Возможные значения: 
    THREAD_STATE_RUN    (поток выполняется или готов к выполнению), 
    THREAD_STATE_STOP   (поток либо не запускался, либо удален),  
    THREAD_STATE_WAIT   (поток ожидает какого-либо события), 
    THREAD_STATE_ZOMBIE (поток остановлен, но пока не удален). */

bool need_message; /* Если true, то поток ждет сообщение (state = THREAD_STATE_WAIT). */

queue_t messages; /* Очередь сообщений для данного потока. */

struct event msg_event; /* Это событие происходит, когда поток получает сообщение. */
}}}
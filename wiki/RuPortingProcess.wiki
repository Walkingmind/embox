#summary Advices for process of porting to different platform

<wiki:toc max_depth="4" />

= Описание =
Embox мульти-платформенная система, то есть код портирован на несколько типов процессоров в том числе и открытые платформы [http://ru.wikipedia.org/wiki/SPARC SPARC], [http://ru.wikipedia.org/wiki/MicroBlaze micriblaze] и другие которые часто применяются для построения встроенных систем и часто служат основой вычислительного ядра [http://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D0%BD%D0%B0_%D0%BA%D1%80%D0%B8%D1%81%D1%82%D0%B0%D0%BB%D0%BB%D0%B5 систем на кристалле]. Более подробно о всех поддерживаемых платформах можно ознакомится на странице описания проекта. Основной код проекта при этом написан на Си и является платформо независимым. Но существует определенное количество кода специфичного для той либо иной архитектуры. Код таких частей кода располагается в папке *arch*, и содержит как специфичный код (например код первичной инициализации процессора или первичную обработку прерываний), так и макросы константы располагающийся в заголовочных файлах. Так же данная папка содержит и шаблон скрипта для линковки, параметры для генерации линковочного скрипта передаются с помощью конфигурационных файлов.
Данный  раздел содержит описание необходимых частей для добавления поддержки новой архитектуры в проект Embox.

= Части требующие архитектурной  поддержки =
Код проекта EMBOX можно разделить на платформонезависимую и платформо зависимую части. Когда код переносится на новую платформу необходимо реализовать минимальный интерфейс поскольку наличие данных частей необходимо для платформонезависимой части. Иначе проект просто не соберется. К таким необходимым частям относятся: 
 * [ RuPortingProcess#Заголовочные_файлы ]
 * [ RuPortingProcess#Стартовый_код ]
 * [ RuPortingProcess#Линковочный_скрипт ]
Дальнейшее портирование зависит от настроек проекта и специфичных архитектурных особенностей процессора. Например архитектура SPARC не может работать без обработки исклчючений (window overflow и window underflow) поскольку они необходимы для корректной работы со стеком.

Обычно первое что портируют это [ #Процедура_ввода_вывода ] по умолчанию, они необходимы чтобы использовать в системе функции *print scan* из библиотеки системы.
Современные системы обычно не мыслимы без таких частей как:
 * [ RuPortingProcess#Обработка_прерываний ]
 * [ RuPortingProcess#Системный_таймер ]
 * [ RuPortingProcess#Обработка_исключений ]

== Заголовочные файлы ==
Необходимо создать несколько платформенных заголофочных файлов, описывающих данную архитектуру.
=== asm/types.h ===
Этот файл включается из корневого файла types.h и описывает архитектурнозависимую часть типов стандарта POSIX. Архитектуры могут различаться по разрядности или порядку байт.
=== asm/hal* ===
в этой папке находятся файлы обеспецивающие описание системы для абстрагирования от архитектуры процессора.
==== clock.h ====
Включается из файла hal/clock.h Описывает интерфейс системного таймера в системе

==== interrupt.h ====
Включается из файла hal/interrupt.h Описывает интерфейс контроллера прерываний (его типы) в системе

==== arch.h ====

==== reg.h ====

==== ipl.h ====
 

== Стартовый код ==
== Линковочный скрипт ==
== Процедура ввода вывода ==
== Обработка прерываний ==
== Системный таймер ==
== Обработка исключений ==
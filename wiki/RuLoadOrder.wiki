#summary Order of loading embox.

= Введение =
На данной странице упрощенно представлен порядок загрузки системы embox. Смотреть надо папку `./src/arch/sparc/kernel/`
Рассмотрено на примере архитектуры sparc. Но в основном тут представлены общие моменты.

= Постановка задачи =
У физической платы существует набор правил, по которым она выполняет инструкции.

В частности, есть так называемая точка входа - адрес, с выполнения инструкции по которому начинается работа после включения питания.
Этот адрес соответствует флэш памяти - т.е. ПЗУ, а значит на момент включения платы там должны находиться требуемые, написанные нами, инструкции.

Но все остальное: значения глобальных переменных, указатель стека, состояние процесора - все это на момент подачи питания непроинициализированно. Именно с инициализации и начинается работа.

= Загрузка =
см. файл `./head.S`

Метка start указывет на trap_table, который инклюдится из файла trap_table.inc - представляет из себя просто содержимое таблицы трэпов.

таким образом, точка входа = первый элемент таблицы трепов, т.е. старт платы 
эквивалентен 0-му трепу (он же reset-trap).
В файле trap_table.inc смотрим 4 первые инструкции:
{{{
b boot_start; nop; nop; nop;
}}}
b boot_start - инструкция перехода.
nop - пустая команда.

boot_start располагается в том же файле `head.S`. 

 * Сначала нициализируется внутреннее состояние процессора (все его регистры), в том числе указатель на стек (только после этого можно будет вызвать функцию на си) 
 * Потом копируется секция .data. В ней находятся значения инициализируемых переменных, они копируются в ОЗУ.
 * Зануляется секция .bss - там хранятся те же глобальные переменные, только инициализируемые нулем. Таких переменных обычно много, поэтому, чтобы не хранить в образе лишние нули, они выделены в отдельную секцию.
 * Вызывается высокоуровневая функция kernel_start. Она проводит инициализацию модулей системы и вызывает метод main()
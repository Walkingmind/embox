#summary Описание потоков.

= Потоки =

*Поток* - это набор инструкций. В ОСРВ Embox поток представляется следующей структурой:

http://embox.googlecode.com/svn/wiki/images/KernelThreads/threadStruct.png

Поток в любой момент может быть прерван планировщиком, т.е. поток будет заменен на другой. Основным полем потока является контекст - состояние процессора во время исполнения этого потока. Во время переключения потока, чтобы обеспечит его корректное возобновление, нужно сохранить регистры, состояние памяти и прочее. При возобновлении работы процессору возвращается то состояние, на котором он был прерван. Процесс сохранения текущего контекста и выставление нового состояние процессора называется переключение контекста. 
Так же не мало важной частью потока являются атрибуты для стратегии планирования. Это данные, зависящие от выбранной реализации стратегии планирования. К примеру, если стратегии не требуется ничего специального, то эта структура пуста. Но если же стратегии требуются дополнительные данные, то полями этой структуры могут быть дополнительные данные, ссылки и т.д.
Так же в структуре находится вспомогательные поля - детали реализации. Кроме того поток всегда имеет свой идентификатор, состояние, и исполняемую функцию.

*Атрибуты потока* позволяют определить поведение потока, отличное от поведения по умолчанию. К атрибутам потока относятся время начала исполнения (`running` или `suspended`), являтеся ли он наследником текущего (`inherit`), является ли он отсоединенным или нет (`joinable` или `detached`), больший или меньший у него приоритет (`priority lower` или `priority higher`). Передача атрибутов происходит при создании потока.
если поток отледен (`detached`), то его ресурсы могут многократно использоваться после того, как он завершится. Если нет необходимости в вызывающем потоке ждать завершения вызванного потока, то такие потоки следует создавать отделенными. Если же заверешнеи ждать стоит, то поток должен быть `joinable`. Это означает, что вызывающий поток должен вызовать на нем `thread_join`. Независимо от типа потока процесс, к которому он относится, не закуончит свою работу, пока не завершатся все потоки.  

== Создание и удаление потока ==

Для того, чтобы создать поток нужно вызвать функцию `thread_create`. Исполняемая функция, параметры этой функции, а так же атрибуты потока задаются параметрами. Поток начнет свое исполнение с функцией и переданным ей параметром. По умолчанию потоку задаются некоторые атрибуты: `joinable`, `running` и т.д. передача в `thread_create` различный флагов изменяет атрибуты. 

Память из под потока выделяется динамически, поэтому ее необходимо освобождать. Для того, чтобы освободить память, поток должен быть отсоединен (`detached`). Чтобы отсоединить поток, на нем нужно либо вызвать функцию `thread_join()`, либо явно отсоединить его функцие `thread_detach()`, либо указать при создании потока флаг `THREAD_FLAG_DETACHED`. После отсоединения любой указатель на поток считается недействительным, даже если сам поток еще не завершился. Функция `thread_join()` к тому же дает возможность дождаться выполнения текущего потока и  узнать о результатах завершения работы потока. После вызова этих функций будет сказано, что память может быть удалена, но реально же она удалится после завершения потока. 

На особенности исполнения, освобождения памяти и т.п. влияют флаги. Флаги могут указывать, является ли поток частью какой-нибудь новой задачи, нужно ли освобождать из под него память, когда ему начинать исполняться и с каким он может быть приоритетом. Без каких либо флагов память под поток выделится динамически, его исполнение начнется сразу после создания и с функцией от указанного в аргументах `thread_create()` параметра. 
 
 * `THREAD_FLAG_DETACHED` - При указании флага этого флага система отсоединит поток сразу после создания и не вернет указатель на созданную структуру. 
 * `THREAD_FLAG_SUSPENDED` - означает, что его запуск откладывается до вызова `thread_resume()`. Поток создается с соятоянием suspended, и если этого флага не было, то при создании `thread_resume()` вызовется автоматически. 
 * `THREAD_FLAG_PRIORITY_HIGHER` и `THREAD_FLAG_PRIORITY_LOWER` повышают и понижают приоритет соответственно. По умолчанию приоритет равен среднему значению между наибольшим и наименьшим приоритетом. 
 * `THREAD_FLAG_IN_NEW_TASK` создает новую задачу и добавляет в нее создаваемый поток.
 * `THREAD_FLAG_INHERIT` показывает, что создаваемый поток является наследником текущего.

== Изменение состояния потока ==

*картинка*

Как уже отмечалось, при создании потока его состояние является `suspended`. В зависимости от параметров создания поток либо начинает исполняться сразу (на нем вызывают `thread_resume()`), либо остается в этот стоянии и дожидается возобновления своей работы. Когда поток запускается, он попадет в планировщик. При каждой операции планировщика состояние потока изменяется. Он либо засыпает, либо его приостанавливает, либо и то, и другое. Покинуть планировщик поток может только завершившись. При завершении потока его состояние изменяется на `suspended` и затем сразу переходит в `exited`. 
#summary HAL description, interface
 
In order to have hardware abstraction, HAL (Hardware Abstract Layer) was introduced.
It provides general arch-dependent features: 

 * I/O Access Limitation
 * Timing Control
 * Instruction Traps
 * Memory Management Unit (MMU)
 * Privileged mode of operation
 * Atomicity

= Details =

== [EmboxTrapsDescription Instruction Traps] ==

Support for traps caused by priveleged instructions. It's done by HAL itself by setting appropriate handlers for HW traps. Traps can be optionally be passed to a higher levels.

== Priveleged mode of operation ==

Only HAL is running in priveleged mode. Higher levels are restricted to perform priveleged operations. The only way to access priveleged functions is to call HAL interface.

== I/O Access Limitation ==

Access limitations to devices on higher levels than HAL. It's done by privileged mode of operations (for access by special instructions) and MMU (for access by memory mapping).

== Timing Control ==

Interface for HW clock. Defines interface with `setup` function used to set interruption period generated by clock.

== Memory Management Unit (MMU) ==

MMU interface for control address translation process. Consists of functions:
 * `mmu_on` -- Enables HW memory managment
 * `mmu_disable` -- Disables HW memory managment
 * `mmu_map_region` -- Maps physical region to virtual region of specified size
 * `mmu_get_fault_addr` -- Get virtual address of last failed access

Virtual page interface. Consists of getters and setters for page options:
 * writable
 * executable
 * cachabel

== Atomicity ==

Inteface for HW supported atomic operations. These operations used for synchronization, for example. `test-and-set` operation is defined, it atomically get value and, if it's zero, sets it to non-zero, then returns getted value.
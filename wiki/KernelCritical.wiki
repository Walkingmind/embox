#summary About Kernel Critical API

*Critical API* is a special mechanism for tracking the current execution context. An execution context is primarily defined by _conditions_ under which the context may be entered and _capabilities_ of the code running inside it.

To make it easier to understand what is execution context, lets consider an interrupt handler as an example:
 * An interrupt can happen if its priority is higher then the current Interrupt Priority Level or, more precisely, when two conditions are met: interrupts are not disabled by call to `ipl_save()`, and there is no interrupt with higher priority is being handled right now.
 * The interrupt handler can access only a limited set of resources. For instance, it can wake up threads waiting for some event, but it can't lock a mutex or create a new thread.

Depending on how the system is configured there can be different sets of possible execution contexts.

|| || Thread switch || Handling Soft IRQ || Handling IRQ ||
|| Outside critical context || <font color="green">*Permitted*</font> || <font color="green">*Permitted*</font> || <font color="green">*Permitted*</font> ||
|| Inside `sched_lock` block || <font color="maroon">*Forbidden*</font> || <font color="green">*Permitted*</font> || <font color="green">*Permitted*</font> ||
|| Inside Soft IRQ handler || <font color="maroon">*Forbidden*</font> || <font color="olive">*Depends on Priority*</font> || <font color="green">*Permitted*</font> ||
|| Inside `softirq_lock` block || <font color="maroon">*Forbidden*</font> || <font color="maroon">*Forbidden*</font> || <font color="green">*Permitted*</font> ||
|| Inside IRQ handler || <font color="maroon">*Forbidden*</font> || <font color="maroon">*Forbidden*</font> || <font color="olive">*Depends on Priority*</font> ||
|| Inside `irq_lock` block || <font color="maroon">*Forbidden*</font> || <font color="maroon">*Forbidden*</font> || <font color="maroon">*Forbidden*</font> ||
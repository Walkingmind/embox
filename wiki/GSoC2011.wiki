#summary Google Summer of Code 2011 Ideas.

= Introduction =
This is a list of ideas for Google Summer of Code 2011. Read more about participating in Embox as part of GSoC [GSoC here].

<wiki:toc max_depth="3" />

= GSoC 2011 Ideas =
Here are some ideas, but we are open to suggestions for other projects. We mark out three idea types:
 * BlueSky - Big problems which require scientific research.
 * Tasks - Medium problem (or set of problems in the same area). It requires knowledges in this area.
 * Issues - Small concrete problems which have detailed description.

== Blue sky ==

=== Scheduling algorithms ===
 There are several principles of multitasking (cooperative, preemptive). Different strategies suit different targets, for example canonical implementation is not very effective for some tasks but a state machine is really effective. Right choice of strategy saves a lot of resources (processor time or memory). 
 First of all this project aims to design a system allowing one to switch planning strategy. And then implementation a few of them.
 We hope that one of possible outcomes of the project will be the development of new scheduling algorithms which can be faster or can use less memory in some of types task than existing ones.

 ==== Requirements ====
 You will require a good knowledge of kernel organization and good C programming language skills.

 ==== Links ====
 [http://wiki.osdev.org/Scheduling_Algorithms OSdev Scheduling Algorithms], [http://joshaas.net/linux/ Introduction to the Linux 2.6.8.1 CPU scheduler implementation]
 ==== Possible mentor ====
 Eldar Abusalimov (eldar.abusalimov@gmail.com)

----
=== Multicore processor support ===
 Nowadays a lot of systems are designed to support multi-core processors, which can be either symmetric or non-symmetric. We need to design a special loader and scheduler to effectively manage resource distribution for such systems. For example, some of the threads should be executed on the graphical co-processor or DSP module. It would greatly benefit the programmers, if they haven't cared about their application’s execution details, and system loader and scheduler could manage the resources, possibly taking into account programmer’s recommendations. In order to make this idea be possible, the structures which scheduler uses must include some additional information.
 This project includes research and implementation of special structure of threads and their documentation.

 ==== Requirements ====
 This project is very hard. You must be very strong in processor architecture, have a lot of experience in assembly language, and have a good knowledge in algorithm scheduling.

 ==== Possible mentor ====
 Anton Bondarev (anton.bondarev2310@gmail.com)

----
=== Profiling and debugging resource development ===
 GDB server could allow to start and debug user application remotely through the network, for instance a running Linux kernel, because all existing simulators for different architectures do not have a good enough support of protected mode debugging. 
 It would also be beneficial to develop methods for effective profiling at the execution stage, high resolution timer interfaces, execution path specification for specific threads as well as for the whole system.

 ==== Possible mentor ====
 Alexander Batyukov (batsun@gmail.com)

----

== Tasks ==
=== Porting a virtual java machine ===
 This project aims at porting some of the virtual java machine to embedded systems (for example [http://java.sun.com/products/cldc/wp/ KVM] or [http://lejos.sourceforge.net/ LeJOS]. The project’s result allows us to ease the development process of user applications. And if LeJOS jvm would be ported we can use a couple of existing application for Lego Mindstorms.

 ==== Requirements ====
 If you are going to take part in this project you should have some skills in C language and Java platforms as well as to have some knowledge about processor architecture.

 ==== Possible mentor ====
 Anton Bondarev (anton.bondarev2310@gmail.com)

----
=== Porting one of the standard libraries ===
 Currently programmers build their user applications with kernel into a monolithic image. It decreases code size, but leads to difficult development and debugging. This project aims at porting one of the C standard libraries, we think that it will be one for embedded systems, [http://sourceware.org/newlib/ newlib] for example. This allows to load a user application without the kernel, and allow easier development and debugging. This also allows porting user applications from other operating systems.

 ==== Requirements ====
 You should have experience in C and assembler languages.

 ==== Possible mentor ====
 Anton Bondarev (anton.bondarev2310@gmail.com)

----
=== TCP/IP stack ===
 We already have implemented some parts of the TCP/IP stack (several protocols IP, ARP, UDP,  and network utilities ifconfig, route, ping, etc). We’d like to extend the current implementation with a few features such as IP fragmentation, routing and bridging frames, realize a couple of network protocols (TCP for example) and etc. We also want to add several network servises such as: ftpd, httpd, telnetd, sshd etc. If it will be fulfilled we'll be able to manage our device simpler.

 ==== Requirements ====
 If you want to participate in this part you should have some network skill, and good knowledge of the C language.

 ==== Links ====
 [http://lwip.wikia.com/wiki/LwIP_Wiki LwIP description]

 ==== Possible mentor ====
 Nikolay Korotky (sikmir@gmail.com)

----
=== Flash file system ===
 Modern embedded systems often use not hard disks but flash memory (NOR or NAND). This type of memory has its own particular qualities, for example a quantity of erase cycles or the impossibility of setting random bits in a block. Therefore we want to have a file system which allows to distribute data in different blocks of chip, collect blocks statistic, logging and etc. This task aims to design a similar system in our project. May be good idea will be porting [http://sourceware.org/jffs2/jffs2-html/ jffs].

 ==== Requirements ====
 You should have experience in flash driver development and knowledge file system stucture.

 ==== Possible mentor ====
 Alexander Batyukov (batsun@gmail.com)

----
=== Embedded RTSP server ===
 Currently Embox is capable of managing Lego Mindstorms robots through Bluetooth. If our robot had Wi-Fi, it would be possible to stream real-time video from the camera. All the existing implementations of [http://tools.ietf.org/html/rfc2326 RTSP] protocol do not suit for embedded systems, because they have a very long algorithms.
 Implementing RTSP algorithm for embedded systems will allow us to employ Embox in robotic system (e.g., in UAVs).

 ==== Requirements ====
 You should have experience in video codecs and embedded systems. Also you should have knowledge in socket communication.

 ==== Possible mentor ====
 Anton Bondarev (anton.bondarev2310@gmail.com)

----
=== Graphical User Interface (GUI) Library Development ===
 Currently Embox is capable of working only in a command line mode, with exception of Lego Mindstorm platform. Many modern embedded systems implement some sort of GUI, which allows users to make better looking applications. We would like to develop a library that will have a support for drawing lines and polygons, as well as a library of user interfaces. A good alternative to developing it from scratch would be porting an existing library for embedded systems (e.g. Qtopia).

 ==== Possible mentor ====
 Alexey Fomin (fomin.alexey@gmail.com)

----
=== Input/output (I/O) subsystem and device drivers ===
 Embox has already contained a few device drivers for different platforms, but we would like to expand that list. For instance we do not have any drivers that support Wi-Fi interface. It is also necessary to add support for graphic devices, USB devices, networking, storage devices, and I/O devices (e.g. gyroscopes, touch screens, non-standard keyboards).

 ==== Possible mentor ====
 Alexander Batyukov (batsun@gmail.com)

----
 === Inter-process communications ===
 There exist a number of inter-process communication methods, such as mutex algorithms, monitors, semaphores, mailboxes, message queues, global memory and so on. Currently Embox contains only the simplest mutex algorithms. This project includes implementation, profiling, and optimization of IPC.

 ==== Requirements ====
 In order to complete this task you should have a solid knowledge of C and experience in multithread programming. 

 ==== Possible mentor ====
 Eldar Abusalimov (eldar.abusalimov@gmail.com)

----
=== Console and Command Interpreter ===
 Our current realization of command interpreter relies heavily on the serial port (UART), which makes its use through Ethernet and USB very hard.
 The primary goal of this project is to implement a console that will allow both canonical and non-canonical modes. The console should be independent of the I/O method used. Command interpreter should use the console specified in the configuration file and allow switching of consoles. It is desired that the final design complies with POSIX standards. 

 ==== Requirements ====
 Experience with UNIX shell, understanding of I/O mechanisms.

 ==== Possible mentor ====
 Nikolay Korotky (sikmir@gmail.com)

----
=== LUA Virtual Machine Porting ===
 LUA is a high-level programming language, that is easy to learn. It is often used for automation purposes. There are open-source and easy-to-implement virtual machines for it. 
 For this project, we would like to port LUA virtual machine on Embox. When this task is accomplished, it would be possible to use LUA scripts for user action automation, as well as for further OS development. 

 ==== Requirements ====
 You need to have a fundamental knowledge in translator development and C language. 

 ==== Links ====
 http://www.lua.org/
 http://www.eluaproject.net/en_overview.html

 ==== Possible mentor ==== 
 Nikolay Korotky (sikmir@gmail.com)

----
=== Testing System ===
 Historically providing a convenient testing interface for embedded system developers has been an important part of the project. Up to date Embox has a pretty sophisticated testing system, which requires expansion. It is proposed to add a support for scripting languages, such as TCL, which can be employed in writing different testing scenarios. Another proposition is to develop a system of code building patterns, which will improve automatic testing possibilities. 

 ==== Requirements ====
 A good knowledge of C language is preferred, as well as familiarity with script languages and general understanding of assembly principles. 

 ==== Links ====
 http://tcl.tk/

 ==== Possible mentor ====
 Alexander Batyukov (batsun@gmail.com)

----
=== Build System ===

 Embox uses relatively effective build system. Some of the specifics include dependency tracking, configuration definition separately from source code and etc. The system is written using standard Make language, and therefore does not need additional software installation. 
 We would like to improve its abilities, adding a possibility of defining interfaces and implementations, module inheritance, restrictions and etc.

 ==== Requirements ====
 You need good GNU Make skills. Bash and python knowledge is an advantage.

 ==== Possible mentor ==== 
 Eldar Abusalimov (eldar.abusalimov@gmail.com)
----

== Issues ==
=== Some ideas from Biff ===
 What Embox needs to be the perfect OS for [http://bifferos.bizhat.com/ Bifferboard]:

  # (optional) Complete the r6040 NIC Qemu emulation that I've started.  It works without interrupts, it is very messy, but will be a useful start for someone.  It will make the port to the Bifferboard easier if this is finished off and correctly runs Linux/OpenWrt. Apart from this and OHCI, my port of Qemu emulates this platform fairly well.
  # Support console on serial port and no display hardware, i.e. prevent Embox attempting to talk to the display controller or keyboard.
  # Support R6040 NIC, DHCP and a telnet server is going to be really usefull, since the Bifferboard has no display.  There is some example code [http://sites.google.com/site/bifferboard/attic/alternative-oses/ethernet here]
  # Support NOR flash filing system.  I have some code to read and write flash memory on my website, but it should be enhanced to add some wear-levelling.  I'm sure we can have a much simpler strategy than JFFS.  It doesn't need to be too intelligent.  NOR gives 100,000 + erase cycles, so much better than Nand.
  # Support OHCI/EHCI.  Although this is difficult, there is quite a lot of code to copy from with compatible license, i.e. LibPayload, PrettyOS, possibly even FreeBSD itself.
----

= GSoC 2011 useful links =
There are several available pages with helpful information. They are:
 * [http://socghop.appspot.com/ Google Summer of Code main page]
 * [http://code.google.com/p/google-summer-of-code/wiki/AdviceforStudents Advice for Students]
 * [http://socghop.appspot.com/document/show/gsoc_program/google/gsoc2011/faqs GSoC FAQ]
 * [http://socghop.appspot.com/document/show/gsoc_program/google/gsoc2011/timeline Timeline]
Please keep in mind that the deadline for applications is *April 8 19:00 UTC*.
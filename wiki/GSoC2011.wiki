#summary Google Summer of Code 2011 Ideas list.
#labels Featured

<wiki:toc max_depth="2" />

= Introduction =
Every summer, Google sponsors a [http://code.google.com/soc/ Summer of Code] global program in which students are paid to work on open source projects.

This year Embox is applying to participate in the GSoC for the first time. Our primary goal is to expand the developers community, improve the existing code base and add some new features.

== About us ==
Why would you like to work for Embox?
 * Embox offers you the opportunity to learn how "this black box" does work inside on a simple example with a relatively small code base.

Embox is open source and uses the BSD license. By applying, you agree that we can distribute your code under this license. However, you also retain your right to reuse it as you wish.

== About You ==
There are several pages available with helpful information. These include:
 * [http://socghop.appspot.com/ Google Summer of Code main page]
 * [http://code.google.com/p/google-summer-of-code/wiki/AdviceforStudents Advice for Students]
 * [http://socghop.appspot.com/document/show/gsoc_program/google/gsoc2011/faqs GSoC FAQ]
 * [http://socghop.appspot.com/document/show/gsoc_program/google/gsoc2011/timeline Timeline]
Please keep in mind that the deadline for applications is *April 8 19:00 UTC*.

= Ideas =
Here are some ideas, but we are open to suggestions for other projects.

== Porting a virtual java machine ==

This project aims at porting some of the virtual java machine to embedded systems (for example KVM http://java.sun.com/products/cldc/wp/ or LeJOS http://lejos.sourceforge.net/). The project’s result allows us to ease the development process of user applications. And if LeJOS jvm would be ported we can use a couple of existing application for Lego Mindstorms.

=== Requirements ===
If you are going to take part in this project you should have some skills in C language and Java platforms as well as have some knowledge about processor architecture.

=== Possible mentor ===
Anton Bondarev (anton.bondarev2310@gmail.com)


== Porting one of the standard library ==

Currently programmers build their user applications with kernel into a monolithic image. It decreases code size, but leads to difficult development and debugging. This project aims to port one of the C standard library, we think that it will be one for embedded systems, newlib for example. This allows to load a user application without the kernel, and allow easier development and debugging. This also allows porting user applications from other operating systems.

=== Requirements ===
You should have experience in C and assembler languages.

=== Possible mentor ===
Anton Bondarev (anton.bondarev2310@gmail.com)


== Scheduling algorithms ==

There are several principles of multitasking (cooperative, preemptive). Different strategies suit different targets, for example canonical implementation is not very effective for some tasks but state machine is strong effective. Right choice of strategy saves a lot of resources (processor time or memory). 
First of all this project aims to design a system allowing one to switch planning strategy. And then  implementation a few of them.
We hope that one possible outcome of the project will be new scheduling algorithms which can be faster or require less memory in some of types task than existing.

=== Requirements ===
You will require good knowledge of kernel organization and good C programming language skills.

=== Possible mentor ===
Eldar Abusalimov (eldar.abusalimov@gmail.com)


== TCP/IP stack ==

We already have implemented some parts of the TCP/IP stack (several protocols IP, ARP, UDP,  and network utilities ifconfig, route, ping, etc). We’d like to extend the current implementation with a few features such as IP fragmentation, routing and bridging frames, realize a couple of network protocols (TCP for example) and etc. We also want to add several network servises such as: ftpd, httpd, telnetd, sshd etc. If it will be fulfilled we'll be able manage our device simpler.

=== Requirements ===
If we want to participate in this part you should have some network skill, and good knowledge of the C language.

=== Possible mentor ===
Nikolay Korotky (sikmir@gmail.com)


== Flash file system ==

Modern embedded system often use not hard disks but flash memory (NOR or NAND). This type of memory has its own particular qualities, for example a quantity of erase cycles or the impossibility of setting random bits in a block. Therefore we want to have a file system which allows to distribute data in different blocks of chip, collect blocks statistic, logging and etc. This task aims to design a similar system in our project. May be good idea will be porting jffs.

=== Requirements ===
You should have experience in flash driver development and knowledge file system stucture.

=== Possible mentor ===
Alexander Batyukov (batsun@gmail.com)


== Multicore processor support ==
Nowadays a lot of systems are designed to support multi-core processors, which can be either symmetric or non-symmetric. We need to design a special loader and scheduler to effectively manage resource distribution for such systems. For example, some of the threads should be executed on the graphical co-processor or DSP module. It would greatly benefit the programmers, if they did not have to care about their application’s execution details, and system loader and scheduler could manage the resources, possibly taking into account programmer’s recommendations. In order to make this possible, the structures which scheduler uses must include some additional information.
This project includes research and implementation of special structure of threads and their documentation.

=== Requirements ===
This project is very hard. You must be very strong in processor architecture, have a lot of experience in assembly language, and have a good knowledge in algorithm scheduling.

=== Possible mentor ===
Anton Bondarev (anton.bondarev2310@gmail.com)


== Embedded RTSP server ==
Currently Embox is capable of managing Lego Mindstorms robots through Bluetooth. If our robot had Wi-Fi, it would be possible to stream real-time video from the camera. All the existing implementations of RTSP protocol don’t suit for embedded system, because they have a very long algorithms.
Implementing RTSP algorithm for embedded system will allow us to employ Embox in robotics system (e.g., in UAVs).

=== Requirements ===
You should have experience in video codecs and embedded systems. Also you should have knowledge in socket communication.

=== Possible mentor ===
Anton Bondarev (anton.bondarev2310@gmail.com)
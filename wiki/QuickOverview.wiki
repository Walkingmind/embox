#summary Short description of Embox.

= Description =

*Embox* is modular configurable RTOS for embedded applications
 Instead monolitic architecture all part of Embox separate to different packets (modules), which implemented some interfaces, scheduling strategy for example. Therefore final image of Embox can be finely tuned for a specific system.

*Embox* is testing system
 Embox can be used for debugging and checking both hardware and all sotfware modules in the system

*Embox* helps during design and debugging hardware part of the system
 During a design phase of the project you can estimate required hardware resources. And on the debugging stage you can setup a set of tests with required covering.

*Embox* help in the certification process
 The project's build system allows to include the only required modules to the final distributive, it reduces the full amount of code and make certification process more cheaper. in addition the build system allows to get full files list and modules graph. 

*Embox* is cross-platform system
 Now Embox support follow processor architectures (x86, SPARC v8, ARM, Microblaze). List of supported platform can be found [PlatformsDescription here]. The interface [Hal HAL] is defined in the project. It is the interface that must be implemented for porting Embox on a new processor architecture.
 
= Goals of the project =

*Embox* is used in embedded system, including network systems

*Embox* is used in robots. The project was ported to the [http://mindstorms.lego.com/en-us/Default.aspx lego-mindstorms] platform.

*Embox* is used for teaching students for practice in the programming and design of embedded system, robotics, architecture of operating system, telecommunication system. It's also used in the research in pointed directions.  

*Embox* is used just for fun. We like kernel hacking.
#summary Краткое описание проекта Embox.

<wiki:toc max_depth="2"/>

= Введение =

Современные вычислительные системы применяются в очень большом спектре задач,
начиная от управления двигателями и до огромных дата центров, которые обслуживают
множество пользователей в реальном времени. Для различных задач требуется и
различное количество ресурсов, и требования к таким системам также различные.
Соответственно, программное обеспечение, которое им управляет тоже имеет свои
особенности. Особенно ярко это заметно в сегменте встроенных систем, в них часто
применяют ОС мягкого либо жесткого реального времени. От таких ОС ожидают
предсказуемости реакции в любой ситуации, то есть отсутствия отказов системы.
Такие отказы возникают, как правило, при ошибке в ядре системы. Наибольшее же
количество таких ошибок, например в Линуксе, находится в драйверах. Поскольку,
как известно, драйвера разрабатываются производителями оборудования, и уровень
кода, в этих частях ниже чем в кусках созданных, разработчиками ядра ОС. К тому
же драйвера в монолитном ядре, к которым относится Линукс трудно отлаживать.


Все это накладывает отпечаток на процесс проектирования встроенных систем. В
подобных системах, при создании нового оборудования, сначала создаются
низкоуровневые тесты, затем разрабатывается код драйверов системного загрузчика,
и только потом разрабатывается драйвер в составе основной операционной системы.
Происходит дублирование кода, следовательно, увеличение количества ошибок.

*Embox* представляет из себя конфигурируемую модульную ОС. В отличие от
монолитных ядер, весь код ядра Embox располагается в различных пакетах
(библиотеках), которые реализуют различные интерфейсы, например интерфейс
диспетчера памяти. Только требуемые части системы включаются в конечный образ.
Таким образом, достигается создание образа ОС нацеленного на конкретную задачу,
будь то система для тестирования аппаратного обеспечения, либо полноценная
операционная система, включающая сетевую и файловую подсистемы, а так же
управление виртуальной памятью.

Каждая подсистема также может конфигурироваться в зависимости от назначения
конечного продукта. Например, код данного проекта был портирован на платформу
[http://mindstorms.lego.com/en-us/Default.aspx lego-mindstorms], которая
содержит очень ограниченное количество ресурсов. Для разработки пользовательских
программ на подобных системах не целесообразно портировать стандартную
библиотеку. С другой стороны хотелось бы иметь специализированную библиотеку
нацеленную на работу с двигателями и датчиками. Таким образом удобно было бы
задать несколько стандартных интерфейсов, для управления теми либо иными
подсистемами, и реализовывать те или иные их подмножества в зависимости от
конечной цели проекта.

Поскольку областью применения Embox является прежде всего встраиваемые системы,
а в данном сегменте часто применяются архитекторы процессоров отличные от x86
(например ARM), то Embox задумывался как портируемая ОС, то  есть предназначенная
для [PortingProcess переноса на различные архитектуры]. Для этого основной код
ядра разрабатывался на платформо независимом языке Си, а код привязанный к
конкретной платформе вынесен в отдельную папку.

К тому же поскольку для встроенных систем характерно наличие множество различных
конфигураций конкретных архитектур обычно такие конфигурации называются
[PlatformsDescription платформами], в проекте предусмотрена возможность для
удобного добавления новой платформы.

== Wiki в помощь ==
Чтобы более подробно изучить структуру проекта Вы можете читать наше Wiki. Мы постараемся рассказать про каждую часть системы. Цель страниц вики состоит не просто в том, чтобы донести до Вас сведения как устроен *Embox*, но и рассказать про сами алгоритмы и идеи,которыми мы руководствуемся при разработке. Читать вики можно в любом порядке, на каждой странице есть ссылки на необходимую информацию. 

== Краткий экскурс ==
  
#summary Writing Makefiles that use EMBuild infrastructure.

<wiki:toc max_depth="2"/>

= Introduction =

This document describes how to write Makefiles processed by *EMBuild* - Embox
Build System. It is intended to be read by normal developers who work with
regular C/ASM code implementing various kernel modules. Script writers who
need to work directly with EMBuild model should follow another document -
[EMBuildAPI] *TODO to be written soon. -- Eldar*.

= Overview =

Generally build process consists of several stages including generating and
reading configuration files, traversing source tree reading Makefile of each
subdirectory and finally constructing the model which completely describes the
world around and defining make-rules to build the target.

Generating configs is responsibility of another EMBuild tool and therefore it is
not covered here. For more info about configuration sequence please refer to
[EMBuildConfig] *TODO to be written soon. -- Eldar*.

We'll focus on per-directory Makefiles so-called *EMBuild Makefiles*.

= The EMBuild Makefiles =

EMBuild Makefile is one placed in each subdirectory of the source tree and named
`Makefile.em` or `Makefile`. If both files exist, then `Makefile.em` is preferred.
This chapter describes the syntax and special notation used in EMBuild Makefiles.

Typical EMBuild Makefile is composed of various definitions, such as libraries
and modules declaration, source assignments, compilation flags, and list of
subdirectories to be entered recursively. Each definition is regular `make`
variable.

It's important to note that every local variable used in EMBuild Makefiles
should be named with leading *$`_`* (dollar-underscore) sequence so-called
*guard symbol*. It is used to prevent namespace collisions between Makefiles and
isolates them from each other.

Further will be discussed each special definition individually.

== `$_MODS` ==

Used to declare a new mod to be processed by EMBuild.
{{{
$_MODS += foo bar baz
$_MODS += embox.test.foo
}}}

== `$_LIBS` ==

{{{
$_LIBS += libfoo.a
}}}

== `$_SRCS-`_`{<mod>|<lib>}`_ ==

{{{
$_SRCS-bar      += bar.c
$_SRCS-libfoo.a += foo*.c
}}}

== `$_DEPS-`_`<mod>`_ ==
== `$_USES-`_`<lib>`_ ==
== `$_SUBS-`_`<lib>`_ ==

== `$_PACKAGE` ==

== `$_CFLAGS-`_`{<src>|<mod>|<lib>|<package>}`_ ==
== `$_CPPFLAGS-`_`{<src>|<mod>|<lib>|<package>}`_ ==

== `$_SUBDIRS` ==

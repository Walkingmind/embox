#summary Writing Makefiles that use EMBuild infrastructure.

= Introduction =

This document describes how to write Makefiles processed by *EMBuild* - EMBOX Build System. It is intended to be read by normal developers who work with regular C/ASM code implementing various kernel modules. Script writers who need to work directly with EMBuild model should follow another document - [EMBuildAPI] *TODO to be written soon. -- Eldar*.

= Overview =

Generally build process consists of several stages including generating and reading configuration files, traversing source tree reading Makefile of each subdirectory and finally constructing the model which completely describes the world around and defining make-rules to build the target.

Generating configs is responsibility of another EMBuild tool and therefore it is not covered here. For more info about configuration sequence please refer to [EMBuildConfig] *TODO to be written soon. -- Eldar*.

We'll focus on per-directory Makefiles so-called *EMBuild Makefiles*.

= The EMBuild Makefiles =
EMBuild Makefile is one placed in each subdirectory of the source tree and named `Makefile.em` or `Makefile`. If both files exist, then `Makefile.em` is preferred.
This chapter describes the syntax and special notation used in EMBuild Makefiles.

Typical EMBuild Makefile is composed of various definitions, such as libraries and modules declaration, source assignments, compilation flags, and list of subdirectories to be entered recursively. Each definition is regular `make` variable.

It's important to note that every local variable used in EMBuild Makefiles should be named with leading *$`_`* (dollar-underscore) sequence so-called *guard symbol*. It is used to prevent namespace collisions between Makefiles and isolate them from each other.

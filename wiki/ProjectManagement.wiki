#summary Paper describes project management in open source project is used in student projects
<wiki:toc max_depth="3" />
= Overview =
Данная статья описывает процесс управления проектами с открытым кодом, в частности для применения в студенческих проектах [http://www.lanit-tercom.com/ Ланит - Терком] и [http://se.math.spbu.ru/SE кафедры системного программирования СПбГУ]
=  Introduction =
Современные программные системы  достигли объема в сотни тысяч и миллионы строчек кода. Данный код хочется переиспользовать. Но, как известно, чем больше строчек кода, тем больше в нем ошибок. Поиск и исправление ошибок - сопровождение кода - зачастую является более дорогостоящей процедурой, чем сама разработка.  Часто ошибка, проявившаяся уже на этапе эксплуатации,  например в банковской системе, или, скажем, в медицинской технике, может стоить миллионы долларов, а может и человеческих жизней. 

Таким образом, стремятся выявить и исправить ошибки на как можно более ранних стадиях разработки. Для этих целей применяют кодревью, юнит и регрессионное тестирование, но даже в крупных компаниях данный подход не гарантирует устранение ошибок. Выявление части ошибок стремятся переложить на пользователей или на компании партнеры, поскольку это существенно сокращает расходы на разработку.

Другой подход, все больше набирающий популярность, - открыть исходный код  проекта или какой-то его части. Тем самым привлекаются сторонние компании и разработчики использующие данный код,  что, несомненно, способствует выявлению ошибок и улучшению кода. К тому же, сам проект уже является рекламой, открытой демонстрацией своих возможностей, что очень важно для небольших и средних компаний.

Еще одной важной особенность проектов с открытым кодом, является их применимость для обучения, как потенциальных сотрудников в частности студентов, так и повышение квалификации или перепрофилирование сотрудников фирмы.

Как  и любой другой программный IT проект, проект с открытым кодом требует затрат на организацию: определение направлений развития, обработка коммитов в репозитории, проверка целостности кода и так далее. При этом данные вопросы встают значительно более остро, чем при разработке локальных проектов. Поскольку разработка ведется распределено, зачастую люди никогда не встречаются лично, но при этом должны вместе выполнять задачи, необходимые для развития проекта. Поэтому в таких проектах необходимо создание сообщества разработчиков, которые поддерживают данный проект, ведут его в нужное русло. Зачастую, этой группе приходится использовать специфичные коммуникации.

И хотя накладные расходы тоже существуют и достаточно велики, зачастую они оправдывают себя по причинам, описанным выше. Многие компании поддерживают проекты с открытым кодом или ведут свои по тем же принципам, чтобы иметь возможность использовать хорошо отлаженный просмотренный многими разработчиками код, в своих коммерческих продуктах. А также подготавливать новых специалистов по интересующим направлениям или отрабатывать новые технологии.

= Постановка задачи =
Целью данной работы было оценить затраты использования подобной стратегии, а также получить численные оценки затрат и выгод. Компания Ланит - Терком совместно с кафедрой системного программирования активно использует данный подход. Опираясь на опыт из двух двух проектов ведущихся в студенческих проектах и летней школе компании, и проводится данное исследование. Эффективность сравнивается по следующим метрикам:
 * Для студентов
 * Для проекта
 * Для разработчиков
= Описание проектов =
== Qreal project ==
=== Description ===
http://unreal.tepkom.ru/trac/
=== Основной язык ===
=== Инструментарий ===
=== Цели проекта ===

== Embox project ==
=== Основной язык ===
=== Инструментарий ===
=== Цели проекта ===

= Student project (не нравится) =
Студенческие проект – это попытка внедрить в классическое высшее образование обучение промышленной разработке. Студенческие проекты ведут специалисты в своей области. В них применяются многие практики используемые в коммерческих проектах. Данные проекты строятся на принципах проектов с открытым кодом, так что студенты могу использовать исходный код и архитектурные особенности в курсовых и дипломных проектах. 
Основной целью студенческих проектов является:
 * Для  разработчиков проекта
Понять, насколько интересна идея и реализуемые планы, при возможности расширить сообщество и максимально сосредоточиться на проекте для обеспечения его развития. Кроме того, получить навык в обучении новых членов команды, и попробовать некоторые технологии управления проектом.
 * Для студентов участвующих в проекте
Получить практические знания в интересующих их направлениях поучаствовать в коллективной разработке и просто попрактиковаться в программировании

*Здесь наверное проблемы нужно описать которые планируем решать а уже потом от них к практикам переходить*
В проекте были введены некоторые общепринятые, необходимые в подобных вещах, практики.


= Community =
Для нормального функционирования проекта с открытым кодом необходимы несколько групп людей:
 * Пользователи – люди, которые используют проект для своих нужд, например разработчики которые применяют данные наработки для ускорения и удешевления разработки собственных продуктов.
 * Разработчики – люди, которые реализуют некоторую функциональность проекта, исправляют ошибки и так далее. То есть занимаются разработкой, поддержкой и улучшением кода.
 * Руководители (лидеры) – люди, отвечающие за планы развития, поддержания проекта в рабочем состоянии , передачи знаний менее опытным людям и так далее.

Все эти люди составляют сообщество, которое и поддерживает проект, без них невозможно существование проекта. У каждого члена этого сообщества своя роль, роли могут объединяться, хотя данная граница между группами может стираться. Как уже отмечалось, зачастую разработчики не видят друг друга лично. И встает вопрос о коммуникациях между людьми. Между пользователями и разработчиками, разработчиками между собой и так далее. Кроме того в как и в любом проекте стоит вопрос о передачи информации между разными людьми, а следовательно требуется хорошо проработанная документация. Существуют и другие проблемы, они будут описаны ниже с решениями, которые применялись в конкретных проектах.

Важно понимать, что чем больше сообщество, тем стабильнее проект и тем легче происходит передача знаний, от опытных участников к менее опытным, например студентам.

Метрика
Количество человек в проектах
|| Название проекта || Количество руководителей || Количество студентов ||
|| Qreal || 2 || ?? ||
|| Embox || 5 || 7 ||

== Summary ==
Поскольку у проектов несколько разные цели, Qreal больше направлен на обучение как можно большего числа студентов, а Embox ориентирован на развитие проекта, формирование сообщества у этих проектов идет по разным направлениям. Для проекта Embox это прежде всего привлечение новых членов общества, которых в будущем можно было бы привлечь к обучению менее опытных разработчиков, например студентов более младших курсов. В проекте Qreal во главу угла ставится обучение каждого студента современным методам разработки. Поэтому в этом проекте есть четко выраженные руководители которые каждый год подготавливают определенную группу студентов.


= Motivation =
Как было отмечено выше сообщество в проекте состоит из разных групп людей, каждая группа важна для проекта. Для привлечения и удержания членов сообщества соответственно можно использовать различные виды мотиваций. Ниже мы попытаемся привести несколько типов мотивации при этом мы будем учитывать не все типы мотивации, это выходит за рамки данной статьи, а с учетом обучающей стороны студенческих проектов.
== Интересное направление ==
Как известно наиболее эффективно люди занимаются теми вещами которые им интересны, зачастую только этот фактор может быть достаточным для мотивации как обучающегося студента так и руководителя проекта. Они могут улучшить свои знания в какой то области либо изучить новую интересную тему тем самым расширить свой кругозор.
== Eexperience ==
Участие в любом проекте с открытым кодом это естественно очень хорошее резюме для любого разработчика, поскольку все данные публичные их можно указывать в своем резюме. И конечно это будет положительно сказываться при приеме на работу.

Для студентов которые еще не участвовали в промышленных проектах это тем более актуально, поскольку они получают реальный опыт разработки подобных систем
== Развитие проекта ==
Как ни странно но не только руководители заинтересованны в развитии проекта в целом, известно что участие в успешно развивающемся проекте, который приносит пользу людям и его результаты востребованы, является также очень хорошим стимулом

== Курсовые и дипломные работы ==
== Рекомендации ==

= Communications =
Основное отличие проекта с открытым кодом от обычного – в специфике коммуникаций. Зачастую проект разрабатывается удаленно, и его участники лишены возможности лично участвовать на совещаниях. Это ставит вопрос коммуникаций внутри проекта особенно остро. К тому же обучение (введение) новых членов требует очень активных коммуникаций и передачи информации для новых членов группы.
Даже если рассматривать обучающую сторону подобных проектов, в отличие от проведения классических лекций и присутствия на семинарах, которые могут применяться, у руководителей не всегда есть четко оговоренное время для встреч и четкий план изложения материала.
Для разных целей используют различные виды коммуникации.
Такие как:
 * Рассылки
 * Форумы
 * Блоги
 * Конференции
 * Чаты
 * Инстанс месенджер/джабер

Каждая из этих технологий обладает своими достоинствами и недостатками.
== Mailing List ==
Во-первых, она максимально проста в освоении и не требует дополнительной настройки. Руководители проекта наравне с другими участниками всегда в курсе проблем других разработчиков и оперативно на них реагировали, помогая в решении проблемы.
С другой стороны, простота и не формальность применяемого метода несколько раз приводили к отвлеченному от изначальной темы разговору, а распространяемая на всех участников группы рассылка становилась спамом. 
=== Вывод с которым не согласен Антон ===
Данный проект показал, что 10 активных участников проекта – это максимум, при котором еще можно применять рассылку в качестве основного инструмента для коммуникаций.

Основная проблема рассылки – ее неструктурированность и неинтерактивность. Даже при таком непродолжительном сроке – студенческий проект длился всего пару месяцев – в ней теряются некоторые важные договоренности и решения типичных проблем. Успешное применение подобной технологии возможно лишь в связке с другими – как, например, система задач и база ошибок, причем, если вопрос был решен в рассылке, он обязательно должен быть продублирован в соответствующей системе.
=== Вывод Антона ===
Скорее рассылку применяют для оперативного оповещения о проблемах. Ее можно настраивать (приходят ли письма или нет как часто и так далее. Но ее не стоит использовать для хранения информации. Выводы с рассылки обязательно переносить в какие то другие хранилища. и там можно дать ссылку на письмо.
Здесь можно дать те данные по рассылке EMBOX что бы показать высокую активность. И рассказать о пугливых студентах:)

== Forums ==
Более структурированная система, можно вести дискуссии и так далее, но не такая оперативная как рассылка. И результаты все равно нужно фиксировать в каком то месте на вики сайте и так далее. Хорошо подходит для обсуждения архитектурных решений направлений развития и так далее
=== Вывод ===
Зря не использовали:)

== Blogs ==
Можно использовать как новостную систему, мысли вслух которые еще не очень сформулированы, если они сформулированы их стоит перенести на форум. У кого нибудь был блог?

== Conferentions ==
Замена личных встреч.
Нужен план конференции иначе болтология

== Chats ==
 Может перенести в конференции
 == Инстанс месенджер/джабер ==
 Очень оперативный способ общения. Но стоит использовать только в для небольших проблем, либо уже связных по задачам людей.
 == Выводы ==
Для эффективной работы в проектах, необходимо использовать как можно большее число коммуникационных технологий. Поскольку они не исключают а дополняют друг друга. При этом необходимо помнить и о других средствах передачи информации, например документирование и комментирование кода.

= Documentations =
Так как проект с открытым кодом предполагает постоянный приток новых людей, необходимо максимально упростить процесс вхождения, а также процесс интеграции различных частей, написанных разными людьми, для передачи информации используется документация
Можно выделить несколько типов документации:
 * Пользовательская - Оформленная в виде документа, описывающего функциональные возможности системы, ее настройку и возможности применения
== Doxygen-comments in code ==
Единый стиль комментариев упрощает понимание чужого кода. Кроме того, применение подобных технологий позволяет генерировать удобные для освоения документации, подробно расписывающие реализованные функции, что, несомненно, упрощает совместную разработку, а конкретно – использование частей, реализованных другими участниками.
== Wiki-documentations ==
Постоянно обновляющаяся актуальная информация, необходимая для работы над проектом.
Изначально она содержала лишь мануал по сборке проекта и описание принципов кодирования. На протяжении всего студенческого проекта вики пополнялась описанием архитектурных решений, применяемых алгоритмов, нетривиальных элементов кода. В будущем планируется достаточно подробное описание всех реализованных и реализуемых модулей, а также зависимостей между ними.
=== Переписать это к конкретному проекту ===
Нужно отметить, что существующая система конфигурирования позволяет задавать зависимости между модулями – указывать те модули, которые должны быть загружены в систему для его нормального функционирования. Иногда существуют альтернативные модули, реализующие требуемый интерфейс. Примером такого модуля может быть упрощенный драйвер UART, реализация которого заключается в записи по заранее заданному адресу, без предварительного обнаружения plug-n-play устройства.

Все это необходимо понимать и учитывать при создании собственного модуля, и поэтому необходимо было доступно объяснить, как пользоваться системой конфигурирования и как описывать собственные модули. Обо всем этом было также написано в документации.
= Code review =

Другой проблемой типичной для распределенных проектов является поддержка кода. Код пишется разными людьми и необходимо что бы они понимали друг друга. Для этих целей вводится единый стиль кодирования, в проекте embox присуствовал с самого начала проекта, и оформлен в виде страницы на вики.
При принятии единого стиля упрощается проведение code-review. Данная практика очень полезна, и хотя на это и тратится дополнительное время, но она позволяет решать следующие задачи:
# Введение человека в проект, его обучение.
# Выявление ошибок на ранней стадии разработки.
# Устраняет проблему зависимости кода от одного разработчика.
За время студенческого проекта было проведено 2 код-ревью, один из которых был вводным и скорее ознакомительным. 
В данном проекте код-ревью проводился в следующем формате:
# Заранее обговаривались участники и то, какой конкретно участок кода предстояло ревьюить. Была объявлена дата, до которой нужно было привести свою часть в порядок.
# Всем участникам предлагалось самостоятельно дома изучить чужие участки кода и подготовить замечания и предложения по его улучшению
# На очередной встрече был подробно рассмотрен код и озвучены комментарии
# Перед участниками была поставлена задача - исправить все недочеты в своих частях
Код ревью проводилось с помощью функциональности google-code то есть через веб интерфейс удаленно. И уже при личной встрече отмечались все комментарии которые были сделаны к моменту закрытия данного код ревью.

= премодерация / постмодерация =
Еще одной практикой которую можно отнести к код ревью является просмотр коммитов. Такая практика так же применялась в проекте, и по ее результатам тоже выдавались комментарии к коду.

= Roadmap План развития =

Хотя проекты с открытым кодом и являются бесплатными, но в них тоже необходимо четко описанные цели и направления развития, и как следствие на кадом этапе необходим план развития проекта.  Для этих целей применяется roadmap. Он позволяет контролировать выпуски и промежуточные релизы продукта, сопровождая эту информацию перспективным графиком работ.

Как выяснилось, следование roadmap’у – одна из самых трудных задач в управлении IT проектом.  Правильно угадать перспективное направление развития, распределить задачи и оценить затраты, не всегда удается даже в обычном проекте, не говоря уже о проекте с открытым исходным кодом.

В проекте направления и следующие milestone’ы определялись по совещательному принципу: сначала обсуждалось желаемое направление развития, и планировались некоторые глобальные задачи, которые хотелось бы решить в данном направлении, раставлялись приоритеты и зависимости. После этого фиксировались требования на данный этап и дата его завершения.

= Tasks =
Когда над проектом работает много людей, важно, чтобы их труд не пропадал зря, чтобы не получалось так, что пятеро одновременно реализовали одну и ту же функциональность, оставив без внимания другую. К тому же, подобное состояние ведет к конфликтам версий и повреждению актуальной версии в репозитории. Кроме этого это сильно деморализует разработчиков, так как средний программист (а их большинство) будет думать, что пока он закончит написание кода, кто-то другой реализует функциональность, и, возможно, еще и лучше. Когда нет распределения задач – нет и ответственности.

Для этих целей применяется система контроля задач. Она представляет собой базу улучшений и исправлений, с критичностью и статусом, а также с данными о том, кто и когда ими занимался. 

Причем как  задачи связываются с конкретным milestone’ом, так и коммиты в репозиторий связываются с каким-то номером задачи. Таким образом уменьшается число конфликтов по коду.
diff -aur qpidc-0.24/CMakeLists.txt qpid/CMakeLists.txt
--- qpidc-0.24/CMakeLists.txt	2013-06-27 07:41:13.000000000 +0400
+++ qpid/CMakeLists.txt	2014-06-27 17:20:15.919124347 +0400
@@ -60,8 +60,8 @@
   set (CPACK_PACKAGE_EXECUTABLES "")
 endif (WIN32)
 
-set_absolute_install_path (QPIDC_CONF_FILE ${QPID_INSTALL_CONFDIR}/qpidc.conf)
-set_absolute_install_path (QPIDD_CONF_FILE ${QPID_INSTALL_CONFDIR}/qpidd.conf)
+set_absolute_install_path (QPIDC_CONF_FILE /qpidc.conf)
+set_absolute_install_path (QPIDD_CONF_FILE /qpidd.conf)
 
 install(FILES  LICENSE NOTICE  DESTINATION ${QPID_INSTALL_DOCDIR})
 install(FILES  include/qmf/qmfengine.i
@@ -103,7 +103,7 @@
 
 
 # Subdirectories
-add_subdirectory(managementgen)
+#add_subdirectory(managementgen)
 add_subdirectory(src)
 add_subdirectory(etc)
 add_subdirectory(bindings)
 
diff -aur qpidc-0.24/src/CMakeLists.txt qpid/src/CMakeLists.txt
--- qpidc-0.24/src/CMakeLists.txt	2013-07-13 13:15:49.000000000 +0400
+++ qpid/src/CMakeLists.txt	2014-07-02 16:31:05.488388491 +0400
@@ -271,7 +271,7 @@
    # -Wunreachable-code -Wpadded -Winline
    # -Wshadow - warns about boost headers.
    set (WARNING_FLAGS
-        "-Werror -pedantic -Wall -Wextra -Wno-shadow -Wpointer-arith -Wcast-qual -Wcast-align -Wno-long-long -Wvolatile-register-var -Winvalid-pch -Wno-system-headers -Woverloaded-virtual")
+        "-Wall -Wextra -Wno-shadow -Wpointer-arith -Wcast-qual -Wcast-align -Wno-long-long -Wvolatile-register-var -Winvalid-pch -Wno-system-headers -Woverloaded-virtual")
 
    set (CATCH_UNDEFINED "-Wl,--no-undefined")
    # gcc on SunOS uses native linker whose "-z defs" is too fussy
@@ -347,7 +347,7 @@
 if (CMAKE_SYSTEM_NAME STREQUAL Windows)
   set (Boost_components program_options date_time thread unit_test_framework regex)
 else (CMAKE_SYSTEM_NAME STREQUAL Windows)
-  set (Boost_components program_options unit_test_framework)
+  set (Boost_components program_options)
 endif (CMAKE_SYSTEM_NAME STREQUAL Windows)
 
 # Visual Studio 2010 requires boost 1.45 or better.
@@ -935,7 +935,6 @@
   )
   set (qpidcommon_platform_LIBS
     ${Boost_PROGRAM_OPTIONS_LIBRARY}
-    ${CMAKE_DL_LIBS}
   )
 
   set (qpidbroker_platform_SOURCES
@@ -1003,13 +1002,13 @@
      qpid/framing/Uuid.cpp
      qpid/framing/TransferContent.cpp
      qpid/log/Logger.cpp
-     qpid/log/Options.cpp
+     qpid/log/Options_.cpp
      qpid/log/OstreamOutput.cpp
      qpid/log/Selector.cpp
      qpid/log/Statement.cpp
-     qpid/management/Buffer.cpp
+     qpid/management/Buffer_.cpp
      qpid/management/ConnectionSettings.cpp
-     qpid/management/Mutex.cpp
+     qpid/management/Mutex_.cpp
      qpid/management/Manageable.cpp
      qpid/management/ManagementObject.cpp
      qpid/sys/AggregateOutput.cpp
@@ -1017,7 +1016,7 @@
      qpid/sys/Dispatcher.cpp
      qpid/sys/DispatchHandle.cpp
      qpid/sys/Runnable.cpp
-     qpid/sys/Shlib.cpp
+     qpid/sys/Shlib_.cpp
      qpid/sys/Timer.cpp
      qpid/sys/TimerWarnings.cpp
      qpid/amqp_0_10/Codecs.cpp
@@ -1058,7 +1057,7 @@
 )
 add_msvc_version (qpidcommon library dll)
 
-add_library (qpidcommon SHARED ${qpidcommon_SOURCES})
+add_library (qpidcommon STATIC ${qpidcommon_SOURCES})
 if (CLOCK_GETTIME_IN_RT)
   set (qpidcommon_platform_LIBS ${qpidcommon_platform_LIBS} rt)
 endif (CLOCK_GETTIME_IN_RT)
@@ -1085,7 +1084,7 @@
   ${qpidtypes_platform_SOURCES}
 )
 add_msvc_version (qpidtypes library dll)
-add_library(qpidtypes SHARED ${qpidtypes_SOURCES})
+add_library(qpidtypes STATIC ${qpidtypes_SOURCES})
 target_link_libraries(qpidtypes ${qpidtypes_platform_LIBS})
 set_target_properties (qpidtypes PROPERTIES 
                        VERSION ${qpidtypes_version}
@@ -1135,7 +1134,7 @@
 )
 add_msvc_version (qpidclient library dll)
 
-add_library (qpidclient SHARED ${qpidclient_SOURCES})
+add_library (qpidclient STATIC ${qpidclient_SOURCES})
 target_link_libraries (qpidclient qpidcommon ${qpidclient_platform_LIBS})
 set_target_properties (qpidclient PROPERTIES VERSION ${qpidclient_version}
 SOVERSION ${qpidclient_version_major})
@@ -1203,7 +1202,7 @@
 )
 add_msvc_version (qpidmessaging library dll)
 
-add_library (qpidmessaging SHARED ${qpidmessaging_SOURCES})
+add_library (qpidmessaging STATIC ${qpidmessaging_SOURCES})
 target_link_libraries (qpidmessaging qpidclient)
 set_target_properties (qpidmessaging PROPERTIES 
                        VERSION ${qpidmessaging_version} 
@@ -1336,7 +1335,7 @@
      qpid/sys/TCPIOPlugin.cpp
 )
 add_msvc_version (qpidbroker library dll)
-add_library (qpidbroker SHARED ${qpidbroker_SOURCES})
+add_library (qpidbroker STATIC ${qpidbroker_SOURCES})
 target_link_libraries (qpidbroker qpidcommon ${qpidbroker_platform_LIBS})
 set_target_properties (qpidbroker PROPERTIES 
                        VERSION ${qpidbroker_version}
@@ -1369,8 +1368,8 @@
 endif (CPACK_GENERATOR STREQUAL "NSIS")
 
 if (UNIX)
-  install (CODE "FILE(MAKE_DIRECTORY \$ENV{DESTDIR}/${QPID_LOCALSTATE_DIR}/lib/qpidd)")
-  install (CODE "FILE(MAKE_DIRECTORY \$ENV{DESTDIR}/${QPID_LOCALSTATE_DIR}/spool/qpidd)")
+#  install (CODE "FILE(MAKE_DIRECTORY \$ENV{DESTDIR}/${QPID_LOCALSTATE_DIR}/lib/qpidd)")
+#  install (CODE "FILE(MAKE_DIRECTORY \$ENV{DESTDIR}/${QPID_LOCALSTATE_DIR}/spool/qpidd)")
 endif (UNIX)
 
 set (qmf_SOURCES
@@ -1384,7 +1383,7 @@
     )
 
 add_msvc_version (qmf library dll)
-add_library (qmf SHARED ${qmf_SOURCES})
+add_library (qmf STATIC ${qmf_SOURCES})
 target_link_libraries (qmf qmfengine)
 set_target_properties (qmf PROPERTIES
                        VERSION ${qmf_version} 
@@ -1474,7 +1473,7 @@
         )
 
     add_msvc_version (qmf2 library dll)
-    add_library (qmf2 SHARED ${qmf2_SOURCES})
+    add_library (qmf2 STATIC ${qmf2_SOURCES})
     target_link_libraries (qmf2 qpidmessaging qpidtypes qpidclient qpidcommon)
     set_target_properties (qmf2 PROPERTIES
                            VERSION ${qmf2_version} 
@@ -1539,7 +1538,7 @@
 endif (NOT WIN32)
 add_msvc_version (qmfengine library dll)
 
-add_library (qmfengine SHARED ${qmfengine_SOURCES})
+add_library (qmfengine STATIC ${qmfengine_SOURCES})
 target_link_libraries (qmfengine qpidclient)
 set_target_properties (qmfengine PROPERTIES
                        VERSION ${qmfengine_version} 
@@ -1578,7 +1577,7 @@
      ../include/qpid/console/Value.h
     )
 add_msvc_version (qmfconsole library dll)
-add_library (qmfconsole SHARED ${qmfconsole_SOURCES})
+add_library (qmfconsole STATIC ${qmfconsole_SOURCES})
 target_link_libraries (qmfconsole qpidclient)
 set_target_properties (qmfconsole PROPERTIES
                        VERSION ${qmfconsole_version}
@@ -1601,7 +1600,7 @@
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake
                ${CMAKE_CURRENT_BINARY_DIR}/config.h)
 add_subdirectory(qpid/store)
-add_subdirectory(tests)
+#add_subdirectory(tests)
 
 # Support for pkg-config
 

 
diff -aur qpidc-0.24/src/qmf/ConsoleEvent.cpp qpid/src/qmf/ConsoleEvent.cpp
--- qpidc-0.24/src/qmf/ConsoleEvent.cpp	2011-02-04 11:22:30.000000000 +0300
+++ qpid/src/qmf/ConsoleEvent.cpp	2013-10-14 16:23:49.682246719 +0400
@@ -51,7 +51,7 @@
 SchemaId ConsoleEventImpl::getSchemaId(uint32_t i) const
 {
     uint32_t count = 0;
-    for (list<SchemaId>::const_iterator iter = newSchemaIds.begin(); iter != newSchemaIds.end(); iter++) {
+    for (std::list<SchemaId>::const_iterator iter = newSchemaIds.begin(); iter != newSchemaIds.end(); iter++) {
         if (count++ == i)
             return *iter;
     }
@@ -62,7 +62,7 @@
 Data ConsoleEventImpl::getData(uint32_t i) const
 {
     uint32_t count = 0;
-    for (list<Data>::const_iterator iter = dataList.begin(); iter != dataList.end(); iter++) {
+    for (std::list<Data>::const_iterator iter = dataList.begin(); iter != dataList.end(); iter++) {
         if (count++ == i)
             return *iter;
     }
diff -aur qpidc-0.24/src/qmf/Expression.cpp qpid/src/qmf/Expression.cpp
--- qpidc-0.24/src/qmf/Expression.cpp	2010-09-22 01:48:41.000000000 +0400
+++ qpid/src/qmf/Expression.cpp	2013-10-14 16:24:36.599541763 +0400
@@ -130,7 +130,7 @@
 
 bool Expression::evaluate(const Variant::Map& data) const
 {
-    list<boost::shared_ptr<Expression> >::const_iterator iter;
+    std::list<boost::shared_ptr<Expression> >::const_iterator iter;
 
     switch (logicalOp) {
     case LOGICAL_ID:
diff -aur qpidc-0.24/src/qmf/Schema.cpp qpid/src/qmf/Schema.cpp
--- qpidc-0.24/src/qmf/Schema.cpp	2011-01-10 21:30:39.000000000 +0300
+++ qpid/src/qmf/Schema.cpp	2013-10-14 16:26:19.153608074 +0400
@@ -111,10 +111,10 @@
     if (schemaId.getType() == SCHEMA_TYPE_EVENT)
         map["_default_severity"] = uint32_t(defaultSeverity);
 
-    for (list<SchemaProperty>::const_iterator pIter = properties.begin(); pIter != properties.end(); pIter++)
+    for (std::list<SchemaProperty>::const_iterator pIter = properties.begin(); pIter != properties.end(); pIter++)
         propList.push_back(SchemaPropertyImplAccess::get(*pIter).asMap());
 
-    for (list<SchemaMethod>::const_iterator mIter = methods.begin(); mIter != methods.end(); mIter++)
+    for (std::list<SchemaMethod>::const_iterator mIter = methods.begin(); mIter != methods.end(); mIter++)
         methList.push_back(SchemaMethodImplAccess::get(*mIter).asMap());
 
     map["_properties"] = propList;
@@ -178,13 +178,13 @@
         buffer.putShort(properties.size());
         buffer.putShort(0);
         buffer.putShort(methods.size());
-        for (list<SchemaProperty>::const_iterator pIter = properties.begin(); pIter != properties.end(); pIter++)
+        for (std::list<SchemaProperty>::const_iterator pIter = properties.begin(); pIter != properties.end(); pIter++)
             SchemaPropertyImplAccess::get(*pIter).encodeV1(buffer, false, false);
-        for (list<SchemaMethod>::const_iterator mIter = methods.begin(); mIter != methods.end(); mIter++)
+        for (std::list<SchemaMethod>::const_iterator mIter = methods.begin(); mIter != methods.end(); mIter++)
             SchemaMethodImplAccess::get(*mIter).encodeV1(buffer);
     } else {
         buffer.putShort(properties.size());
-        for (list<SchemaProperty>::const_iterator pIter = properties.begin(); pIter != properties.end(); pIter++)
+        for (std::list<SchemaProperty>::const_iterator pIter = properties.begin(); pIter != properties.end(); pIter++)
             SchemaPropertyImplAccess::get(*pIter).encodeV1(buffer, true, false);
     }
 
@@ -194,7 +194,7 @@
 
 bool SchemaImpl::isValidProperty(const std::string& k, const Variant& v) const
 {
-    for (list<SchemaProperty>::const_iterator iter = properties.begin(); iter != properties.end(); iter++)
+    for (std::list<SchemaProperty>::const_iterator iter = properties.begin(); iter != properties.end(); iter++)
         if (iter->getName() == k)
             return (isCompatibleType(iter->getType(), v.getType()));
     return false;
@@ -203,7 +203,7 @@
 
 bool SchemaImpl::isValidMethodInArg(const std::string& m, const std::string& k, const Variant& v) const
 {
-    for (list<SchemaMethod>::const_iterator mIter = methods.begin(); mIter != methods.end(); mIter++) {
+    for (std::list<SchemaMethod>::const_iterator mIter = methods.begin(); mIter != methods.end(); mIter++) {
         if (mIter->getName() == m) {
             uint32_t count(mIter->getArgumentCount());
             for (uint32_t i = 0; i < count; i++) {
@@ -223,7 +223,7 @@
 
 bool SchemaImpl::isValidMethodOutArg(const std::string& m, const std::string& k, const Variant& v) const
 {
-    for (list<SchemaMethod>::const_iterator mIter = methods.begin(); mIter != methods.end(); mIter++) {
+    for (std::list<SchemaMethod>::const_iterator mIter = methods.begin(); mIter != methods.end(); mIter++) {
         if (mIter->getName() == m) {
             uint32_t count(mIter->getArgumentCount());
             for (uint32_t i = 0; i < count; i++) {
@@ -249,9 +249,9 @@
     hash.update(schemaId.getPackageName());
     hash.update(schemaId.getName());
 
-    for (list<SchemaProperty>::const_iterator pIter = properties.begin(); pIter != properties.end(); pIter++)
+    for (std::list<SchemaProperty>::const_iterator pIter = properties.begin(); pIter != properties.end(); pIter++)
         SchemaPropertyImplAccess::get(*pIter).updateHash(hash);
-    for (list<SchemaMethod>::const_iterator mIter = methods.begin(); mIter != methods.end(); mIter++)
+    for (std::list<SchemaMethod>::const_iterator mIter = methods.begin(); mIter != methods.end(); mIter++)
         SchemaMethodImplAccess::get(*mIter).updateHash(hash);
 
     schemaId.setHash(hash.asUuid());
@@ -265,7 +265,7 @@
 SchemaProperty SchemaImpl::getProperty(uint32_t i) const
 {
     uint32_t count = 0;
-    for (list<SchemaProperty>::const_iterator iter = properties.begin(); iter != properties.end(); iter++)
+    for (std::list<SchemaProperty>::const_iterator iter = properties.begin(); iter != properties.end(); iter++)
         if (count++ == i)
             return *iter;
     throw IndexOutOfRange();
@@ -275,7 +275,7 @@
 SchemaMethod SchemaImpl::getMethod(uint32_t i) const
 {
     uint32_t count = 0;
-    for (list<SchemaMethod>::const_iterator iter = methods.begin(); iter != methods.end(); iter++)
+    for (std::list<SchemaMethod>::const_iterator iter = methods.begin(); iter != methods.end(); iter++)
         if (count++ == i)
             return *iter;
     throw IndexOutOfRange();
diff -aur qpidc-0.24/src/qmf/SchemaMethod.cpp qpid/src/qmf/SchemaMethod.cpp
--- qpidc-0.24/src/qmf/SchemaMethod.cpp	2011-01-19 16:57:07.000000000 +0300
+++ qpid/src/qmf/SchemaMethod.cpp	2013-10-14 16:27:04.686964427 +0400
@@ -102,7 +102,7 @@
     if (!desc.empty())
         map["_desc"] = desc;
 
-    for (list<SchemaProperty>::const_iterator iter = arguments.begin(); iter != arguments.end(); iter++)
+    for (std::list<SchemaProperty>::const_iterator iter = arguments.begin(); iter != arguments.end(); iter++)
         argList.push_back(SchemaPropertyImplAccess::get(*iter).asMap());
     map["_arguments"] = argList;
 
@@ -141,7 +141,7 @@
 SchemaProperty SchemaMethodImpl::getArgument(uint32_t i) const
 {
     uint32_t count = 0;
-    for (list<SchemaProperty>::const_iterator iter = arguments.begin(); iter != arguments.end(); iter++)
+    for (std::list<SchemaProperty>::const_iterator iter = arguments.begin(); iter != arguments.end(); iter++)
         if (count++ == i)
             return *iter;
     
@@ -153,7 +153,7 @@
 {
     hash.update(name);
     hash.update(desc);
-    for (list<SchemaProperty>::const_iterator iter = arguments.begin(); iter != arguments.end(); iter++)
+    for (std::list<SchemaProperty>::const_iterator iter = arguments.begin(); iter != arguments.end(); iter++)
         SchemaPropertyImplAccess::get(*iter).updateHash(hash);
 }
 
@@ -169,7 +169,7 @@
 
     buffer.putMap(map);
 
-    for (list<SchemaProperty>::const_iterator iter = arguments.begin(); iter != arguments.end(); iter++)
+    for (std::list<SchemaProperty>::const_iterator iter = arguments.begin(); iter != arguments.end(); iter++)
         SchemaPropertyImplAccess::get(*iter).encodeV1(buffer, true, true);
 }
 
diff -aur qpidc-0.24/src/qpid/agent/ManagementAgentImpl.cpp qpid/src/qpid/agent/ManagementAgentImpl.cpp
--- qpidc-0.24/src/qpid/agent/ManagementAgentImpl.cpp	2012-12-01 22:24:48.000000000 +0400
+++ qpid/src/qpid/agent/ManagementAgentImpl.cpp	2013-10-14 16:22:25.203101706 +0400
@@ -746,7 +746,7 @@
                 if (s_iter != schemaIdMap.end() && s_iter->second.getType() == qpid::types::VAR_STRING)
                     packageName = s_iter->second.asString();
 
-                typedef list<boost::shared_ptr<ManagementObject> > StageList;
+                typedef std::list<boost::shared_ptr<ManagementObject> > StageList;
                 StageList staging;
 
                 {
@@ -1075,8 +1075,8 @@
 void ManagementAgentImpl::periodicProcessing()
 {
     string addr_key_base = "agent.ind.data.";
-    list<ObjectId> deleteList;
-    list<boost::shared_ptr<MessageItem> > message_list;
+    std::list<ObjectId> deleteList;
+    std::list<boost::shared_ptr<MessageItem> > message_list;
 
     sendHeartbeat();
 
@@ -1193,7 +1193,7 @@
         }
 
         // Delete flagged objects
-        for (list<ObjectId>::reverse_iterator iter = deleteList.rbegin();
+        for (std::list<ObjectId>::reverse_iterator iter = deleteList.rbegin();
              iter != deleteList.rend();
              iter++)
             managementObjects.erase(*iter);
diff -aur qpidc-0.24/src/qpid/sys/posix/Time.cpp qpid/src/qpid/sys/posix/Time.cpp
--- qpidc-0.24/src/qpid/sys/posix/Time.cpp	2013-04-23 23:55:50.000000000 +0400
+++ qpid/src/qpid/sys/posix/Time.cpp	2013-10-14 15:53:53.622012376 +0400
@@ -30,6 +30,7 @@
 #include <unistd.h>
 #include <iomanip>
 #include <cctype>
+#include <string>
 
 namespace {
 int64_t max_abstime() { return std::numeric_limits<int64_t>::max(); }
diff -aur qpidc-0.24/src/qpid/sys/unordered_map.h qpid/src/qpid/sys/unordered_map.h
--- qpidc-0.24/src/qpid/sys/unordered_map.h	2012-06-18 03:57:36.000000000 +0400
+++ qpid/src/qpid/sys/unordered_map.h	2013-10-14 16:04:06.638716423 +0400
@@ -21,7 +21,7 @@
 
 // unordered_map include path is platform specific
 
-#ifdef _MSC_VER
+#if defined(_MSC_VER) || defined(__EMBOX__)
 #  include <unordered_map>
 #elif defined(__SUNPRO_CC)
 #  include <boost/tr1/unordered_map.hpp>
diff -aur qpidc-0.24/src/qpid/store/CMakeLists.txt qpid/src/qpid/store/CMakeLists.txt
--- qpidc-0.24/src/qpid/store/CMakeLists.txt	2012-12-03 21:10:40.000000000 +0400
+++ qpid/src/qpid/store/CMakeLists.txt	2013-10-14 16:32:16.147036385 +0400
@@ -31,7 +31,7 @@
 set (store_SOURCES
      MessageStorePlugin.cpp
     )
-add_library (store MODULE ${store_SOURCES})
+add_library (store STATIC ${store_SOURCES})
 target_link_libraries (store qpidbroker ${Boost_PROGRAM_OPTIONS_LIBRARY})
 if (CMAKE_COMPILER_IS_GNUCXX)
   set (GCC_CATCH_UNDEFINED "-Wl,--no-undefined")
diff -aur qpidc-0.24/include/qpid/Msg.h qpid/include/qpid/Msg.h
--- qpidc-0.24/include/qpid/Msg.h	2011-08-30 20:21:00.000000000 +0400
+++ qpid/include/qpid/Msg.h	2013-10-16 12:05:19.145850088 +0400
@@ -24,6 +24,7 @@
 
 #include <sstream>
 #include <iostream>
+#include <string>
 #include "qpid/types/ImportExport.h"
 
 namespace qpid {
 
 
diff -aur qpidc-0.24/src/qpid/sys/posix/BSDSocket.cpp qpid/src/qpid/sys/posix/BSDSocket.cpp 
--- qpidc-0.24/src/qpid/sys/posix/BSDSocket.cpp	2013-01-14 23:08:37.000000000 +0400
+++ qpid/src/qpid/sys/posix/BSDSocket.cpp	2014-06-27 16:02:55.080199130 +0400
@@ -134,7 +134,7 @@
     if (socket != -1) {
         int flag = 1;
         int result = ::setsockopt(fd, IPPROTO_TCP, TCP_NODELAY, (char *)&flag, sizeof(flag));
-        QPID_POSIX_CHECK(result);
+        //QPID_POSIX_CHECK(result);
     }
 }
 
@@ -191,7 +191,7 @@
 
     const int& socket = fd;
     int yes=1;
-    QPID_POSIX_CHECK(::setsockopt(socket,SOL_SOCKET,SO_REUSEADDR,&yes,sizeof(yes)));
+    //QPID_POSIX_CHECK(::setsockopt(socket,SOL_SOCKET,SO_REUSEADDR,&yes,sizeof(yes)));
 
     if (::bind(socket, getAddrInfo(sa).ai_addr, getAddrInfo(sa).ai_addrlen) < 0)
         throw Exception(QPID_MSG("Can't bind to port " << sa.asString() << ": " << strError(errno)));
 
diff -aur qpidc-0.24/src/posix/QpiddBroker.cpp qpid/src/posix/QpiddBroker.cpp 
--- qpidc-0.24/src/posix/QpiddBroker.cpp	2013-06-19 01:09:19.000000000 +0400
+++ qpid/src/posix/QpiddBroker.cpp	2014-06-26 17:22:00.354364739 +0400
@@ -193,8 +193,9 @@
         d.fork();           // Broker is stared in QpiddDaemon::child()
     }
     else {                  // Non-daemon broker.
-        boost::intrusive_ptr<Broker> brokerPtr(new Broker(options->broker));
-        ScopedSetBroker ssb(brokerPtr);
+        //boost::intrusive_ptr<Broker> brokerPtr(new Broker(options->broker));
+        //ScopedSetBroker ssb(brokerPtr);
+    	Broker * brokerPtr(new Broker(options->broker));
         brokerPtr->accept();
         if (options->broker.port == 0) {
             uint16_t port = brokerPtr->getPort(myOptions->daemon.transport);
 
 diff -aur qpidc-0.24/src/qpid/sys/SocketTransport.cpp qpid/src/qpid/sys/SocketTransport.cpp 
--- qpidc-0.24/src/qpid/sys/SocketTransport.cpp	2013-06-19 19:30:50.000000000 +0400
+++ qpid/src/qpid/sys/SocketTransport.cpp	2014-06-27 16:35:35.749909256 +0400
@@ -166,6 +166,7 @@
             break;
         }
 
+#if 0
         // Try any other resolved addresses
         while (sa.nextAddress()) {
             QPID_LOG(info, "Listening to: " << sa.asString())
@@ -174,6 +175,7 @@
             QPID_LOG(debug, "Listened to: " << lport);
             addListener(s);
         }
+#endif
     }
     return listeningPort;
 }
 

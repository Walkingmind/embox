diff -Naur packetdrill.orig/gtests/net/packetdrill/config.c packetdrill/gtests/net/packetdrill/config.c
--- packetdrill.orig/gtests/net/packetdrill/config.c	2014-09-01 11:58:59.748545929 +0400
+++ packetdrill/gtests/net/packetdrill/config.c	2014-09-01 11:52:42.035223729 +0400
@@ -482,7 +482,7 @@
 		config->argv[i] = strdup(argv[i]);
 
 	/* Parse the arguments. */
-	optind = 0;
+	optind = 1;
 	while ((c = getopt_long(argc, argv, "v", options, NULL)) > 0)
 		process_option(c, optarg, config, "Command Line");
 	return argv + optind;
diff -Naur packetdrill.orig/gtests/net/packetdrill/ip_address.c packetdrill/gtests/net/packetdrill/ip_address.c
--- packetdrill.orig/gtests/net/packetdrill/ip_address.c	2014-09-01 11:58:59.741879264 +0400
+++ packetdrill/gtests/net/packetdrill/ip_address.c	2014-09-01 11:52:42.035223729 +0400
@@ -168,7 +168,7 @@
 {
 	struct sockaddr_in sa_v4;
 	memset(&sa_v4, 0, sizeof(sa_v4));
-#ifndef linux
+#if !defined(linux) && !defined(__EMBOX__)
 	sa_v4.sin_len = sizeof(sa_v4);
 #endif
 	sa_v4.sin_family = AF_INET;
@@ -186,7 +186,7 @@
 {
 	struct sockaddr_in6 sa_v6;
 	memset(&sa_v6, 0, sizeof(sa_v6));
-#ifndef linux
+#if !defined(linux) && !defined(__EMBOX__)
 	sa_v6.sin6_len = sizeof(sa_v6);
 #endif
 	sa_v6.sin6_family = AF_INET6;
diff -Naur packetdrill.orig/gtests/net/packetdrill/link_layer.c packetdrill/gtests/net/packetdrill/link_layer.c
--- packetdrill.orig/gtests/net/packetdrill/link_layer.c	2014-09-01 11:58:59.738545930 +0400
+++ packetdrill/gtests/net/packetdrill/link_layer.c	2014-09-01 11:52:42.035223729 +0400
@@ -64,6 +64,21 @@
 		die_perror("close");
 }
 
+#elif defined(__EMBOX__)
+
+#include <net/inetdevice.h>
+
+void get_hw_address(const char *name, struct ether_addr *hw_address)
+{
+	struct in_device *iface_dev = inetdev_get_by_name(name);
+	DEBUGP("get_hw_address for device %s\n", name);
+
+	if (!iface_dev)
+		die("unable to find hw address for %s\n", name);
+
+	memcpy(hw_address, iface_dev->dev->dev_addr, sizeof(*hw_address));
+}
+
 #else
 
 #if defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__)
@@ -97,6 +112,7 @@
 		}
 	}
 
+	freeifaddrs(ifaddrs_list);
 	die("unable to find hw address for %s\n", name);
 }
 
diff -Naur packetdrill.orig/gtests/net/packetdrill/logging.h packetdrill/gtests/net/packetdrill/logging.h
--- packetdrill.orig/gtests/net/packetdrill/logging.h	2014-09-01 11:58:59.741879264 +0400
+++ packetdrill/gtests/net/packetdrill/logging.h	2014-09-01 11:52:42.035223729 +0400
@@ -28,7 +28,7 @@
 #include "types.h"
 
 /* Enable this to get debug logging. */
-#define DEBUG_LOGGING 0
+#define DEBUG_LOGGING 1
 
 /* Use a gcc variadic macro to conditionally compile debug printing. */
 #define DEBUGP(...)				\
diff -Naur packetdrill.orig/gtests/net/packetdrill/Makefile.common packetdrill/gtests/net/packetdrill/Makefile.common
--- packetdrill.orig/gtests/net/packetdrill/Makefile.common	2014-09-01 11:58:59.741879264 +0400
+++ packetdrill/gtests/net/packetdrill/Makefile.common	2014-09-01 11:52:42.035223729 +0400
@@ -4,7 +4,7 @@
 
 parser.o: parser.y
 	bison --output=parser.c --defines=parser.h --report=state parser.y
-	$(CC) $(CFLAGS) -c parser.c
+	$(CC) $(CPPFLAGS) $(CFLAGS) -c parser.c
 
 lexer.o: lexer.l parser.o
 	flex -olexer.c lexer.l
@@ -19,6 +19,7 @@
          symbols_freebsd.o \
          symbols_openbsd.o \
          symbols_netbsd.o \
+         symbols_embox.o \
          gre_packet.o icmp_packet.o ip_packet.o tcp_packet.o udp_packet.o \
          mpls_packet.o \
          run.o run_command.o run_packet.o run_system_call.o \
diff -Naur packetdrill.orig/gtests/net/packetdrill/netdev.c packetdrill/gtests/net/packetdrill/netdev.c
--- packetdrill.orig/gtests/net/packetdrill/netdev.c	2014-09-01 11:58:59.741879264 +0400
+++ packetdrill/gtests/net/packetdrill/netdev.c	2014-09-01 11:52:42.035223729 +0400
@@ -141,6 +141,10 @@
 	netdev->name = strdup(TUN_DEV);
 #endif /* defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__) */
 
+#if defined(__EMBOX__)
+	netdev->name = strdup(TUN_DEV);
+#endif /* defined(__EMBOX__) */
+
 #if defined(__FreeBSD__) ||  defined(__NetBSD__)
 	/* On FreeBSD and NetBSD we need to explicitly ask to be able
 	 * to prepend the address family when injecting tun packets.
@@ -211,6 +215,7 @@
 /* Bring up the device */
 static void bring_up_device(struct local_netdev *netdev)
 {
+#if !defined(__EMBOX__)
 	struct ifreq ifr;
 	memset(&ifr, 0, sizeof(ifr));
 	strncpy(ifr.ifr_name, netdev->name, IFNAMSIZ);
@@ -219,6 +224,9 @@
 	ifr.ifr_flags |= IFF_UP | IFF_RUNNING;
 	if (ioctl(netdev->ipv4_control_fd, SIOCSIFFLAGS, &ifr) < 0)
 		die_perror("SIOCSIFFLAGS");
+#else
+	PD_STUB_USE();
+#endif /* !defined(__EMBOX__) */
 }
 
 /* Route traffic destined for our remote IP through this device */
@@ -258,6 +266,16 @@
 		assert(!"bad wire protocol");
 	}
 #endif /* defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__) */
+
+#if defined(__EMBOX__)
+	asprintf(&route_command,
+		 "route add %s netmask %s %s",
+		 config->live_remote_prefix_string,
+		 "255.255.255.0",
+		 netdev->name,
+		 config->live_gateway_ip_string);
+#endif
+
 	int result = system(route_command);
 	if ((result == -1) || (WEXITSTATUS(result) != 0)) {
 		die("error executing route command '%s'\n",
@@ -330,14 +348,14 @@
 }
 #endif /* defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__) */
 
-#ifdef linux
+#if defined(linux) || defined(__EMBOX__)
 static void linux_tun_write(struct local_netdev *netdev,
 			    struct packet *packet)
 {
 	if (write(netdev->tun_fd, packet_start(packet), packet->ip_bytes) < 0)
 		die_perror("Linux tun write()");
 }
-#endif  /* linux */
+#endif  /* defined(linux) || defined(__EMBOX__) */
 
 static int local_netdev_send(struct netdev *a_netdev,
 			     struct packet *packet)
@@ -360,6 +378,10 @@
 	linux_tun_write(netdev, packet);
 #endif  /* linux */
 
+#ifdef __EMBOX__
+	linux_tun_write(netdev, packet);
+#endif
+
 	return STATUS_OK;
 }
 
diff -Naur packetdrill.orig/gtests/net/packetdrill/net_utils.c packetdrill/gtests/net/packetdrill/net_utils.c
--- packetdrill.orig/gtests/net/packetdrill/net_utils.c	2014-09-01 11:58:59.745212596 +0400
+++ packetdrill/gtests/net/packetdrill/net_utils.c	2014-09-01 11:52:42.035223729 +0400
@@ -30,6 +30,8 @@
 
 #include "logging.h"
 
+#define CMD_STUB_OK "true"
+
 static void verbose_system(const char *command)
 {
 	int result;
@@ -59,6 +61,10 @@
 	asprintf(&command, "/sbin/ifconfig %s %s/%d alias",
 		 dev_name, ip_string, prefix_len);
 #endif /* defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__) */
+#ifdef __EMBOX__
+	DEBUGP("%s isn't implemented on Embox\n", __func__);
+	asprintf(&command, CMD_STUB_OK);
+#endif
 
 	verbose_system(command);
 	free(command);
@@ -84,6 +90,10 @@
 	asprintf(&command, "/sbin/ifconfig %s inet6 %s/%d",
 		 dev_name, ip_string, prefix_len);
 #endif /* defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__) */
+#ifdef __EMBOX__
+	DEBUGP("%s isn't implemented on Embox\n", __func__);
+	asprintf(&command, CMD_STUB_OK);
+#endif
 
 	verbose_system(command);
 	free(command);
@@ -138,6 +148,10 @@
 		 ip->address_family ==  AF_INET6 ? "inet6" : "",
 		 ip_string, prefix_len);
 #endif /* defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__) */
+#ifdef __EMBOX__
+	DEBUGP("%s isn't implemented on Embox\n", __func__);
+	asprintf(&command, CMD_STUB_OK);
+#endif
 
 	verbose_system(command);
 	free(command);
diff -Naur packetdrill.orig/gtests/net/packetdrill/packet_socket_linux.c packetdrill/gtests/net/packetdrill/packet_socket_linux.c
--- packetdrill.orig/gtests/net/packetdrill/packet_socket_linux.c	2014-09-01 11:58:59.741879264 +0400
+++ packetdrill/gtests/net/packetdrill/packet_socket_linux.c	2014-09-01 11:52:42.038557062 +0400
@@ -33,10 +33,11 @@
 #include <sys/uio.h>
 #include <unistd.h>
 
-#ifdef linux
+#if defined(linux) || defined(USE_LINUX_PACKET_SOCKET)
 
 #include <netpacket/packet.h>
-#include <linux/filter.h>
+/*#include <linux/filter.h>*/
+#include <linux/net_tstamp.h>
 
 #include "ethernet.h"
 #include "logging.h"
@@ -226,7 +227,7 @@
 	*in_bytes = recvfrom(psock->packet_fd,
 			     packet->buffer, packet->buffer_bytes, 0,
 			     (struct sockaddr *)&from, &from_len);
-	assert(*in_bytes <= packet->buffer_bytes);
+	assert(*in_bytes <= (int) packet->buffer_bytes);
 	if (*in_bytes < 0) {
 		if (errno == EINTR) {
 			DEBUGP("EINTR\n");
@@ -270,4 +271,4 @@
 	return STATUS_OK;
 }
 
-#endif  /* linux */
+#endif  /* defined(linux) || defined(USE_LINUX_PACKET_SOCKET) */
diff -Naur packetdrill.orig/gtests/net/packetdrill/packet_socket_pcap.c packetdrill/gtests/net/packetdrill/packet_socket_pcap.c
--- packetdrill.orig/gtests/net/packetdrill/packet_socket_pcap.c	2014-09-01 11:58:59.738545930 +0400
+++ packetdrill/gtests/net/packetdrill/packet_socket_pcap.c	2014-09-01 11:52:42.038557062 +0400
@@ -37,10 +37,14 @@
 
 #if defined(__FreeBSD__)
 #include <pcap/pcap.h>
-#elif defined(__OpenBSD__) || defined(__NetBSD__)
+#elif defined(__OpenBSD__) || defined(__NetBSD__) || defined(__EMBOX__)
 #include <pcap.h>
 #endif
 
+#if defined(__EMBOX__)
+#include <kernel/time/time.h>
+#endif
+
 #include "ethernet.h"
 #include "logging.h"
 
@@ -256,6 +260,8 @@
 	packet->time_usecs = timeval_to_usecs(&pkt_header->ts);
 #elif defined(__OpenBSD__)
 	packet->time_usecs = bpf_timeval_to_usecs(&pkt_header->ts);
+#elif defined(__EMBOX__)
+	packet->time_usecs = timeval_to_ns(&pkt_header->ts) / NSEC_PER_USEC;
 #else
 	packet->time_usecs = implement_me("implement me for your platform");
 #endif  /* defined(__OpenBSD__) */
diff -Naur packetdrill.orig/gtests/net/packetdrill/platforms.h packetdrill/gtests/net/packetdrill/platforms.h
--- packetdrill.orig/gtests/net/packetdrill/platforms.h	2014-09-01 11:58:59.741879264 +0400
+++ packetdrill/gtests/net/packetdrill/platforms.h	2014-09-01 11:52:42.038557062 +0400
@@ -92,5 +92,22 @@
 
 #endif  /* __NetBSD__ */
 
+/* ------------------------- Embox ---------------------- */
+
+#if defined(__EMBOX__)
+
+#define USE_LINUX_PACKET_SOCKET 1
+#define TUN_PATH                "/dev/tun0"
+#define TUN_DEV                 "tun0"
+
+#define HAVE_TCP_INFO           0
+
+#include "open_memstream.h"
+#include "fmemopen.h"
+
+#define __always_inline inline __attribute__((__always_inline__))
+
+#endif  /* __EMBOX__ */
+
 
 #endif /* __PLATFORMS_H__ */
diff -Naur packetdrill.orig/gtests/net/packetdrill/run.c packetdrill/gtests/net/packetdrill/run.c
--- packetdrill.orig/gtests/net/packetdrill/run.c	2014-09-01 11:58:59.741879264 +0400
+++ packetdrill/gtests/net/packetdrill/run.c	2014-09-01 11:52:42.038557062 +0400
@@ -325,6 +325,17 @@
 		}
 #endif
 
+#ifdef __EMBOX__
+		/* sheduler sees no reason to switch from here even
+ 		 * if syscall thread is active. Provide explicit 
+		 * yield call.
+		 */
+		if (wait_usecs > MAX_SPIN_USECS) {
+			run_unlock(state);
+			sleep(0);
+			run_lock(state);
+		}
+#endif
 		/* At this point we should only have a millisecond or
 		 * two to wait, so we spin.
 		 */
diff -Naur packetdrill.orig/gtests/net/packetdrill/run_system_call.c packetdrill/gtests/net/packetdrill/run_system_call.c
--- packetdrill.orig/gtests/net/packetdrill/run_system_call.c	2014-09-01 11:58:59.741879264 +0400
+++ packetdrill/gtests/net/packetdrill/run_system_call.c	2014-09-01 11:52:42.038557062 +0400
@@ -54,12 +54,16 @@
 #ifdef linux
 	return syscall(__NR_gettid);
 #endif
-#if defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__)
+#if defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__) 
 	/* TODO(ncardwell): Implement me. XXX */
 	return 0;
 #endif /* defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__)*/
+#ifdef __EMBOX__
+	return (int) pthread_self();
+#endif
 }
 
+#ifndef __EMBOX__
 /* Read a whole file into the given buffer of the given length. */
 static void read_whole_file(const char *path, char *buffer, int max_bytes)
 {
@@ -76,10 +80,15 @@
 	if (close(fd) < 0)
 		die_perror("close");
 }
+#endif
 
+#ifdef __EMBOX__
+#include <kernel/thread/types.h>
+#endif
 /* Return true iff the given thread is sleeping. */
 static bool is_thread_sleeping(pid_t process_id, pid_t thread_id)
 {
+#ifndef __EMBOX__
 	/* Read the entire thread state file, using the buffer size ps uses. */
 	char *proc_path = NULL;
 	asprintf(&proc_path, "/proc/%d/task/%d/stat", process_id, thread_id);
@@ -104,6 +113,10 @@
 	free(state);
 
 	return is_sleeping;
+#else 
+	struct schedee *scde = &((pthread_t) thread_id)->schedee;
+	return scde->waiting && !scde->ready && !scde->active;
+#endif
 }
 
 /* Returns number of expressions in the list. */
@@ -1795,7 +1808,7 @@
 #elif defined(__FreeBSD__) || defined(__OpenBSD__)
 	pthread_yield();
 	return 0;
-#elif defined(__NetBSD__)
+#elif defined(__NetBSD__) || defined(__EMBOX__)
 	return sched_yield();
 #endif  /* defined(__NetBSD__) */
 }
diff -Naur packetdrill.orig/gtests/net/packetdrill/symbols_embox.c packetdrill/gtests/net/packetdrill/symbols_embox.c
--- packetdrill.orig/gtests/net/packetdrill/symbols_embox.c	1970-01-01 03:00:00.000000000 +0300
+++ packetdrill/gtests/net/packetdrill/symbols_embox.c	2014-09-01 11:54:49.328553310 +0400
@@ -0,0 +1,37 @@
+
+#ifdef __EMBOX__
+
+#include <errno.h>
+#include <fcntl.h>
+#include <poll.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/ioctl.h>
+#include <sys/socket.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+
+#include "symbols.h"
+
+struct int_symbol platform_symbols_table[] = {
+
+	{ F_DUPFD,                          "F_DUPFD"                         },
+	{ F_GETFD,                          "F_GETFD"                         },
+	{ F_SETFD,                          "F_SETFD"                         },
+	{ F_GETFL,                          "F_GETFL"                         },
+	{ F_SETFL,                          "F_SETFL"                         },
+	{ F_GETLK,                          "F_GETLK"                         },
+	{ F_SETLK,                          "F_SETLK"                         },
+	{ F_SETLKW,                         "F_SETLKW"                        },
+	{ FD_CLOEXEC,                       "FD_CLOEXEC"                      },
+
+	{ O_NONBLOCK,                       "O_NONBLOCK"                      },
+
+};
+
+struct int_symbol *platform_symbols(void) {
+	return platform_symbols_table;
+}
+
+#endif /* __EMBOX__ */
diff -Naur packetdrill.orig/gtests/net/packetdrill/tcp_option_g.c packetdrill/gtests/net/packetdrill/tcp_option_g.c
--- packetdrill.orig/gtests/net/packetdrill/tcp_option_g.c	1970-01-01 03:00:00.000000000 +0300
+++ packetdrill/gtests/net/packetdrill/tcp_option_g.c	2014-09-01 11:52:42.038557062 +0400
@@ -0,0 +1,4 @@
+
+#include "tcp_option.h"
+
+struct tcp_option tcp_option;
diff -Naur packetdrill.orig/gtests/net/packetdrill/tcp_options.h packetdrill/gtests/net/packetdrill/tcp_options.h
--- packetdrill.orig/gtests/net/packetdrill/tcp_options.h	2014-09-01 11:58:59.741879264 +0400
+++ packetdrill/gtests/net/packetdrill/tcp_options.h	2014-09-01 11:52:42.038557062 +0400
@@ -93,7 +93,8 @@
 			u8 cookie[MAX_TCP_FAST_OPEN_COOKIE_BYTES];
 		} fast_open;
 	} data;
-} __packed tcp_option;
+} __packed;
+extern struct tcp_option tcp_option;
 
 /* Allocate a new options list. */
 extern struct tcp_options *tcp_options_new(void);
diff -Naur packetdrill.orig/gtests/net/packetdrill/wire_conn.c packetdrill/gtests/net/packetdrill/wire_conn.c
--- packetdrill.orig/gtests/net/packetdrill/wire_conn.c	2014-09-01 11:58:59.741879264 +0400
+++ packetdrill/gtests/net/packetdrill/wire_conn.c	2014-09-01 11:52:42.038557062 +0400
@@ -125,7 +125,7 @@
 	}
 
 	memset(&sa_v4, 0, sizeof(sa_v4));
-#ifndef linux
+#if !defined(linux) && !defined(__EMBOX__)
 	sa_v4.sin_len = sizeof(sa_v4);
 #endif
 	sa_v4.sin_family = AF_INET;


package('embox.arch.x86')

from string import Template

def embox_lds_gen(src, mod, ctx):
    sections = mod['sections'].value(ctx.model)
    ld = '''
#include <asm-generic/embox.lds.h>
#include <framework/mod/options.h>

#undef i386

OUTPUT_FORMAT("elf32-i386", "elf32-i386", "elf32-i386")
OUTPUT_ARCH(i386)
ENTRY(_start)

MEMORY {
        MEMORY_REGION(sdram)
        MEMORY_REGION(flash)
}

SECTIONS {
	.text : {
		. = ALIGN($align);
		*(.multiboot)
		_traps_text_start = .;
		*(.traps.*)
		_traps_text_end = .;
		*(.text)
		*(.text.*)
		. = ALIGN($align);
	} SECTION_REGION(text)
	SECTION_SYMBOLS(text)

	.rodata : {
		. = ALIGN($align);
		LDS_INPUT_RODATA
		. = ALIGN($align);
	} SECTION_REGION(rodata)
	SECTION_SYMBOLS(rodata)

	.data : {
		. = ALIGN($align);
		*(.data)
		. = ALIGN($align);
	} SECTION_REGION(data)
	SECTION_SYMBOLS(data)

	.bss : {
		. = ALIGN($align);
		*(.bss)
		. = ALIGN($align);
	} SECTION_REGION(bss)
	SECTION_SYMBOLS(bss)

	.reserve (NOLOAD): {
		. = ALIGN($align);
		LDS_INPUT_RESERVE
		. = ALIGN($align);
	/* TODO memory region for reserve output section. */
	} SECTION_REGION(bss)
	SECTION_SYMBOLS(reserve)

	/* Sections to be discarded */
	/DISCARD/ : {
		*(.eh_frame)
                *(.note.*)
	}

        $ADDITIONAL_SECTIONS

}

_mem_begin = LDS_REGION_BASE_sdram;
_mem_length = LDS_REGION_SIZE_sdram;
'''

    print sections
    return Template(ld).substitute(
            ADDITIONAL_SECTIONS='\n'.join([sect[1] for sect in sorted(sections)]),
            align = mod['align'].value(ctx.model))

module (
        "lds", 
        #implements = 'embox.arch.lds',

        sources = [LDScript(Generated('embox.gen.lds.S', embox_lds_gen))],

        options = [
            List('sections'),
            Integer('align', default = 0x1000)
        ],
)

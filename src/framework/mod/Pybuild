
package('embox.framework')

def depsinject_gen(src, mod, ctx):
    pkglist = set()
    modlist = set()
    moddeps = []

    for modname in ctx.modlist:
        modlist.add(ctx.root[modname])
    for mod in modlist:
        pkglist.add(mod.pkg)

    for mod in modlist:
        if not hasattr(mod, 'depends'):
            continue
        moddeps += [(mod, mod.find_fn(dep[0])) for dep in mod.depends]

    def bname(obj):
        return obj.qualified_name().replace(".", "__")

    tmpl = '''

#include <framework/mod/embuild.h>

{PKG_DEFS}

{MOD_DEFS}

{DEP_DEF}

'''


    return tmpl.format(
        PKG_DEFS='\n'.join(['MOD_PACKAGE_DEF({pkgname}, "{pkgstr}");'.
            format(pkgname = bname(pkg),
                pkgstr = pkg.qualified_name())
            for pkg in pkglist]),

        MOD_DEFS='\n'.join(['MOD_DEF({modfullname}, {pkgname}, "{modname}", "", "");'.
            format(modfullname = bname(mod),
                pkgname = bname(mod.pkg),
                modname = mod.name) 
            for mod in modlist]),
        DEP_DEF = '\n'.join(['MOD_DEP_DEF({mod}, {dep});'.
            format(mod = bname(mod),
                dep = bname(dep))
            for mod, dep in moddeps]))

module (
        'mod',

        sources = [
            DefMacro(["__FRAMEWORK__"],
                'core.c'), 
            DefMacro(["__EMBUILD__"],
                Generated(
                    'depsinject.c',
                    depsinject_gen))]
)

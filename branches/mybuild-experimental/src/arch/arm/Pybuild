
package('embox.arch.arm')

from string import Template

def embox_lds_gen(src, mod, ctx):
    sections = mod['sections'].value(ctx.model)
    ld = '''
#include <asm-generic/embox.lds.h>
#include <framework/mod/options.h>

OUTPUT_FORMAT("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")
OUTPUT_ARCH(arm)
ENTRY(start)

MEMORY {
        MEMORY_REGION(sdram)
        MEMORY_REGION(flash)
}

SECTIONS {
        .text : {
                *(.trap_table)
                *(.text)
                *(.text.*)
                *(.glue_7t) *(.glue_7)
                ALIGNMENT();
        } SECTION_REGION(text)
        SECTION_SYMBOLS(text)

        .rodata : {
                LDS_INPUT_RODATA
        } SECTION_REGION(rodata)
        SECTION_SYMBOLS(rodata)

        .data : {
                ALIGNMENT();
                *(.data)
        } SECTION_REGION(data)
        SECTION_SYMBOLS(data)

        .bss : {
                ALIGNMENT();
                *(.bss)
                ALIGNMENT();
        } SECTION_REGION(bss)
        SECTION_SYMBOLS(bss)

        .reserve (NOLOAD): {
                LDS_INPUT_RESERVE
        /* TODO memory region for reserve output section. */
        } SECTION_REGION(bss)
        SECTION_SYMBOLS(reserve)

        $ADDITIONAL_SECTIONS

}

_mem_begin = LDS_REGION_BASE_sdram;
_mem_length = LDS_REGION_SIZE_sdram;
'''
    return Template(ld).substitute(ADDITIONAL_SECTIONS='\n'.join(sections))

module (
        "lds", 
        #implements = 'embox.arch.lds',

        sources = [LDScript(Generated('embox.gen.lds.S', embox_lds_gen))],

        options = [
            List('sections'),
        ],
)

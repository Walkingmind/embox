
package('embox.fs.driver')

def incl_trigger(scope, find_fn):
    from string import Template
    from pybuild.ops import *

    sects = find_fn('embox.arch.x86.lds.sections')

    tmpl = '''
	.rodata () : {
		ALIGNMENT();
		_ramfs_start = .;
		*(.ramfs)
		_ramfs_end = .;
		ALIGNMENT();
	} SECTION_REGION(rodata)
	SECTION_SYMBOLS(rodata)
'''
    new_dom = scope[sects] + [(80, tmpl)]
    return cut(scope, sects, new_dom)

def cpio_s_gen(src, mod, ctx):
    initfs_root = 'initfs_root'
    initfs_cpio = 'initfs.cpio'
    for opt in ctx.model.keys():
        if getattr(opt, 'isbuilding', lambda scope: False)(ctx.model):
            for src in getattr(opt, 'sources', ()):
                if 'InitFSAnnotation' in [a.get_name() for a in src.annotations()]:
                    ctx.bld (
                            rule = 'cp ${SRC} ${TGT}',
                            source = src.fullpath(),
                            target = '%s/%s' % (initfs_root, src.filename)
                    )

    ctx.bld(
            rule = 'find %s -depth -print | cpio -L --quiet -H newc -o -O ${TGT}' % initfs_root,
            #rule = 'echo test > ${TGT}',
            #source = ctx.bld.path.get_bld().find_or_declare(initfs_root),
            target = initfs_cpio,
    )

    ctx.bld.add_manual_dependency(ctx.bld.path.get_bld().find_or_declare(src.fullpath()),
            ctx.bld.path.get_bld().find_or_declare(initfs_cpio))

    return '''
.section .ramfs
.incbin "{IMG_CPIO}"
    '''.format(IMG_CPIO= 'build/' + initfs_cpio)

module(
	'initfs',

        include_trigger = incl_trigger,

  	options = [
		Integer('fdesc_quantity', default=32),
	],

 	sources = [
		'cpio.c',
 		'initfs_drv.c',
 		Generated(
                    'initfs_cpio.S',
                    cpio_s_gen),
 		LDScript('initfs_lds.lds.S'),
	],

 	depends = [
		'embox.fs.core',
 		'embox.mem.pool',
	],

) 

package embox.kernel.sched

module sched {
	source "sched.c"
	depends embox.kernel.addr_space

	source "sched_signal.c"

	source "sched_wait.c"

	depends embox.arch.context /* context_switch */
	depends strategy.api

	@NoRuntime depends embox.kernel.thread.signal.lock_api
	@NoRuntime depends embox.kernel.thread.signal_api
	@NoRuntime depends embox.compat.posix.util.time
	@NoRuntime depends embox.kernel.critical
	@NoRuntime depends embox.profiler.trace

	@NoRuntime depends sched_ticker
	@NoRuntime depends wait_queue

	//XXX kernel/thread.h included
	depends embox.kernel.thread.thread_wait
	
	depends embox.kernel.lthread.lthread_api
	@NoRuntime depends embox.kernel.sched.current.api
	
}

module sched_ticker {
	source "sched_ticker.c"
	option number tick_interval = 100
	depends embox.kernel.timer.sys_timer /* for timeslices support */
}

module wait_queue {
	source "waitq.c"

	depends embox.util.DList
	depends waitq_protect_link
}

@DefaultImpl(waitq_protect_link_stub)
abstract module waitq_protect_link { }

module waitq_protect_link_stub extends waitq_protect_link {
	source "waitq_protect_link_stub.c"
}

module waitq_protect_link_store extends waitq_protect_link {
	source "waitq_protect_link.c"
	
	depends waitq_protect_link_thread_plugin
}

module waitq_protect_link_thread_plugin extends embox.kernel.thread.thread_wait {
	source "waitq_protect_link_thread_plugin.c"
	source "waitq_protect_link_thread_plugin.h"
}

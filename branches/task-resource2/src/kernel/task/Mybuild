package embox.kernel.task

@DefaultImpl(single)
abstract module api {
}

@DefaultImpl(task_no_table)
abstract module task_table_api {
}

module kernel_task {
	source "kernel_task.c"

	@NoRuntime depends embox.kernel.task.api
	depends embox.kernel.task.task_resource // FIXME
	depends embox.kernel.task.task_table_api
	depends embox.kernel.thread.thread_mode
}

module multi extends api {
	source "multi.c", "multi.h"

	depends embox.kernel.task.kernel_task
	depends embox.kernel.task.task_resource
	depends embox.kernel.task.task_table
	@NoRuntime depends embox.kernel.task.resource.errno
	depends embox.kernel.thread.core /* uses task_self() to initialize
										resources, which implies to thread be
										already loaded, as task_self uses
										thread_self to determine current thread */
	@NoRuntime depends embox.lib.LibCAssert
	@NoRuntime depends embox.lib.LibCString
}

module single extends api {
	source "single.h"

	depends embox.kernel.cpu.common
	depends embox.kernel.task.kernel_task
	depends embox.kernel.task.task_resource
	@NoRuntime depends embox.lib.LibCAssert
	@NoRuntime depends embox.lib.LibCString
}

module task_no_table extends task_table_api {
	source "task_no_table.h"

	@NoRuntime depends embox.kernel.task.kernel_task
	@NoRuntime depends embox.lib.LibCAssert
}

module task_resource {
	source "task_resource.c", "task_resource.lds.S"

	@NoRuntime depends embox.lib.LibCAssert
	@NoRuntime depends embox.util.Array
}

module task_table extends task_table_api {
	option number task_table_size=20
	source "task_table.c"

	@NoRuntime depends embox.lib.LibCAssert
	@NoRuntime depends embox.util.idx_table
}


package embox.fs

module node {
	source "node.c"
	option number fnode_quantity=64
}

module filesystem {
	source "file_system.c"
	source "mount_table.c"	
	option number fs_quantity=32

	depends embox.fs.driver.repo
}

module file_desc {
	source "file_desc.c"
	source "file_xattr.c"
	depends xattr
	depends idesc
	option number fdesc_quantity=32

	depends embox.kernel.task.resource.idesc_table
}

module idesc {
	source "idesc.c"
	source "idesc_event.c"
}

@DefaultImpl(NoFileSystem)
abstract module fs_api {

}

module NoFileSystem extends fs_api{
	depends SysLibFsNone
	depends SysLibFileSystemNone
}

module xattr {
	source "xattr.c"
}

module xattr_list {
	source "xattr_list.c"
}

module core extends fs_api {
	source "vfs.c", "path.c"

	depends file_desc, node
	depends embox.fs.driver.repo

	depends embox.fs.SysLibFsFull
	depends embox.kernel.task.api //vfs_get_leaf: environment should be initialized
	depends filesystem
}

module index_operation {
	source "index_operation.c"
	depends fs_api
	depends embox.kernel.task.idesc
}

module rootfs {
	source "rootfs.c"
	option string fstype = "initfs"
	option string src = ""
	option string dst = "/"
	depends node, driver.repo
	depends embox.fs.filesystem
	depends embox.kernel.task.api
	depends SysLibFileSystem
	depends embox.lib.LibC
}

module journal {
	source "journal.c"
	
	depends embox.lib.LibC
	depends buffer_cache
	depends embox.mem.slab
}

module buffer_cache {
	source "bcache.c"
	option number bcache_size=128
	
	depends embox.lib.LibC
	depends embox.mem.pool
	depends embox.kernel.thread.mutex

	depends embox.mem.heap_api
	
	@NoRuntime depends embox.util.hashtable
}

@DefaultImpl(buffer_no_crypt)
abstract module buffer_crypt_api {
}

module buffer_no_crypt extends buffer_crypt_api {
	source "buffer_no_crypt.c"
}

package embox.fs

module node {
	option number fnode_quantity=64

	source "node.c"

	depends embox.util.tree
}

module filesystem {
	option number fs_quantity=32
	option number mount_desc_quantity=16

	source "file_system.c"
	source "mount_table.c"	

	depends embox.fs.driver.repo
}

module file_desc {
	option number fdesc_quantity=32

	source "file_desc.c"
	source "file_xattr.c"
	
	depends idesc
	depends index_operation
	depends xattr
	
	depends embox.kernel.task.resource.idesc_table
}

module idesc {
	source "idesc.c"
}

module idesc_event {
	source "idesc_event.c"
}

@DefaultImpl(NoFileSystem)
abstract module fs_api {

}

module NoFileSystem extends fs_api{
	depends SysLibFsNone
	depends SysLibFileSystemNone
}

module xattr {
	source "xattr.c"
}

module xattr_list {
	source "xattr_list.c"
}

module core extends fs_api {
	source "vfs.c"
	source "hlpr_path.c"

	depends filesystem
	depends node

	depends embox.compat.libc.str
	depends embox.compat.posix.util.environ
	depends embox.util.tree

	depends embox.kernel.task.api //vfs_get_leaf: environment should be initialized
}

module index_operation {
	source "index_operation.c"
	
	depends embox.fs.SysLibFsFull
	depends fs_api
}

module rootfs {
	source "rootfs.c"
	option string fstype = "initfs"
	option string bdev = ""
	depends node, driver.repo
	depends embox.fs.filesystem
	depends embox.kernel.task.api
	depends SysLibFileSystem
	depends embox.compat.libc.all
}

module journal {
	source "journal.c"
	
	depends embox.compat.libc.all
	depends buffer_cache
	depends embox.mem.slab
}

module buffer_cache {
	source "bcache.c"
	option number bcache_size=128
	
	depends embox.compat.libc.all
	depends embox.mem.pool
	depends embox.kernel.thread.mutex

	depends embox.mem.sysmalloc_api
	
	@NoRuntime depends embox.util.hashtable
}

@DefaultImpl(buffer_no_crypt)
abstract module buffer_crypt_api {
}

module buffer_no_crypt extends buffer_crypt_api {
	source "buffer_no_crypt.c"
}

package embox.util

/*
   Modules here are true libraries without init functions.
   So it's safe and natural to have it static
*/

static module priolist {
	source "priolist.c"
}

static module Array {
	source "array_impl.h"
	source "array_spread.lds.S"
}

static module Bit {
	source "bit_impl.h"
}

static module Bitmap {
	source "bitmap.c"
	depends Bit
}

@DefaultImpl(SListDebug)
abstract module SList {
}
static module SListDebug extends SList {
//	source "slist_debug.c"
//	source "slist_impl.h"
}
static module SListNDebug extends SList {
//	source "slist_ndebug.h"
//	source "slist_impl.h"
}

@DefaultImpl(DListDebug)
abstract module DList {}

static module DListDebug extends DList {
	source "dlist_debug.h"
	source "dlist_debug.c"
}
static module DListNDebug extends DList {
	source "dlist_ndebug.h"
}

static module sys_log {
	source "sys_log.c"

	option number msg_n = 1000
	option number msg_max_len = 256
	option number modname_max_len = 50
	option number funcname_max_len = 50

}

static module ring {
	source "ring.c"
	source "ring_buff.c"
}

static module LibUtil {
//	source "slist_debug.c"

	depends sys_log
	depends ring
	depends tree

	depends Array
	depends DList
	depends SList
	depends Bit
}

static module tree {
	source "tree.c"
}

static module hashtable {
	option number hashtables_quantity=16
	option number item_quntity=64

	source "hashtable.c"

	depends embox.mem.sysmalloc_api
	depends embox.mem.objalloc
}

static module indexator {
	source "indexator.c"

	depends embox.compat.libc.LibCAssert
	depends embox.compat.libc.stdlib.core
	depends embox.compat.libc.LibCString
}

//TODO this is too abstract in my mind
@DefaultImpl(num_alloc_array)
abstract module num_alloc { }

static module num_alloc_array extends num_alloc {
	source "num_alloc_array.c", "num_alloc_array.h"
}

static module idx_table {
	depends num_alloc
}



package embox.compat.posix

module LibPosix {

	depends embox.compat.posix.util.All
	depends embox.compat.posix.proc.All
	depends embox.compat.posix.idx.All
	depends File
	depends FS 
}

static module FS {
	@IncludePath("$(SRC_DIR)/compat/posix/include")
	source "fs.c"

	depends embox.kernel.task.errno
}

/* -----------------------Idx and File---------------------------- */

@DefaultImpl(IdxDiag)
abstract module IdxApi { }

static module IdxDiag extends IdxApi {
	source "file_diag.c"
}

static module IdxFullSupport extends IdxApi {
	@IncludePath("$(SRC_DIR)/compat/posix/include")
	source "file_tasks.c",
		"isatty.c"

	depends embox.kernel.task.api
	depends embox.kernel.task.idx_table
	depends embox.kernel.task.errno
	depends posix_env
	depends io_sync_api
}

module File {
	depends IdxApi
	depends FileSpecificOperations
}

@DefaultImpl(FileNoOpen)
abstract module FileSpecificOperations { }

static module FileTasksOpen extends FileSpecificOperations {
	source "open.c"
	depends embox.fs.posix_compat
	depends embox.kernel.task.errno
}

static module FileNoOpen extends FileSpecificOperations {
	source "no_open.c"
}

/* ------------------------------------------------------------------*/


@DefaultImpl(bootstrap_posix_env)
abstract module posix_env { }

module bootstrap_posix_env extends posix_env {
	@IncludePath("$(SRC_DIR)/compat/posix/include")
	source "env/bs_posix_env.c"

	depends embox.kernel.task.api
	depends embox.compat.posix.idx.dup
}

@DefaultImpl(io_sync_simple)
abstract module io_sync_api {
	depends embox.kernel.irq_lock
}

module io_sync_simple extends io_sync_api {
	source "io_sync_simple.c"
}

module io_sync extends io_sync_api {
	source "io_sync.c"
	depends embox.kernel.thread.event
}

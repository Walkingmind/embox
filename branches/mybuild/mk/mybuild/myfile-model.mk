# Generated by Xpand using M2Make template.

# Model of 'myFile' package.

ifndef __mybuild_myfile_model_mk
__mybuild_myfile_model_mk := $(lastword $(MAKEFILE_LIST))

include $(dir $(__mybuild_myfile_model_mk))myfile-model_impl.mk


#
# Model object 'Model'.
#
# The following features are available:
#   - reference 'package'
#   - reference 'imports'
#   - reference 'entities'
#
# To instantiate this class use 'MyFileFactory.createModel'.
define class-Model
	$(super Node)

	# Returns the value of the 'package' containment reference.
	$(method getPackage)
	# Sets the value of the 'package' containment reference.
	#   1. New value.
	$(method setPackage)

	# Returns the value of the 'imports' containment reference.
	$(method getImports)
	# Sets the value of the 'imports' containment reference.
	#   1. New value.
	$(method setImports)
	# Adds new elements to the 'imports' containment reference.
	#   1. Elements to add.
	$(method addImports)
	# Removes elements from the 'imports' containment reference.
	#   1. Elements to remove.
	$(method removeImports)
	# Removes all elements from the 'imports' containment reference.
	$(method clearImports)

	# Returns the value of the 'entities' containment reference.
	#   1. Optional subtype of Entity to filter on:
	#       'Interface'
	#       'Module'
	$(method getEntities)
	# Sets the value of the 'entities' containment reference.
	#   1. New value.
	$(method setEntities)
	# Adds new elements to the 'entities' containment reference.
	#   1. Elements to add.
	$(method addEntities)
	# Removes elements from the 'entities' containment reference.
	#   1. Elements to remove.
	$(method removeEntities)
	# Removes all elements from the 'entities' containment reference.
	$(method clearEntities)
endef

#
# Model object 'Package'.
#
# The following features are available:
#   - attribute 'name'
#
# To instantiate this class use 'MyFileFactory.createPackage'.
define class-Package
	$(super Node)

	# Returns the value of the 'name' attribute.
	$(method getName)
	# Sets the value of the 'name' attribute.
	#   1. New value.
	$(method setName)
endef

#
# Model object 'Import'.
#
# The following features are available:
#   - attribute 'importedNamespace'
#
# To instantiate this class use 'MyFileFactory.createImport'.
define class-Import
	$(super Node)

	# Returns the value of the 'importedNamespace' attribute.
	$(method getImportedNamespace)
	# Sets the value of the 'importedNamespace' attribute.
	#   1. New value.
	$(method setImportedNamespace)
endef

#
# Model object 'Entity'.
#
# The following features are available:
#   - attribute 'name'
#
# To instantiate this class use 'MyFileFactory.createEntity'.
define class-Entity
	$(super Node)

	# Returns the value of the 'name' attribute.
	$(method getName)
	# Sets the value of the 'name' attribute.
	#   1. New value.
	$(method setName)
endef

#
# Model object 'Interface'.
#
# The following features are available:
#   - reference 'superType'
#   - reference 'attributes'
#
# To instantiate this class use 'MyFileFactory.createInterface'.
define class-Interface
	$(super Node)
	$(super Entity)

	# Returns the value of the 'superType' reference.
	$(method getSuperType)
	# Sets the value of the 'superType' reference.
	#   1. New value.
	$(method setSuperType)

	# Returns the value of the 'attributes' containment reference.
	#   1. Optional subtype of InterfaceProperty to filter on:
	#       'Feature'
	$(method getAttributes)
	# Sets the value of the 'attributes' containment reference.
	#   1. New value.
	$(method setAttributes)
	# Adds new elements to the 'attributes' containment reference.
	#   1. Elements to add.
	$(method addAttributes)
	# Removes elements from the 'attributes' containment reference.
	#   1. Elements to remove.
	$(method removeAttributes)
	# Removes all elements from the 'attributes' containment reference.
	$(method clearAttributes)
endef

#
# Model object 'InterfaceProperty'.
#
# To instantiate this class use 'MyFileFactory.createInterfaceProperty'.
define class-InterfaceProperty
	$(super Node)
endef

#
# Model object 'Feature'.
#
# The following features are available:
#   - attribute 'name'
#   - reference 'superType'
#
# To instantiate this class use 'MyFileFactory.createFeature'.
define class-Feature
	$(super Node)
	$(super InterfaceProperty)

	# Returns the value of the 'name' attribute.
	$(method getName)
	# Sets the value of the 'name' attribute.
	#   1. New value.
	$(method setName)

	# Returns the value of the 'superType' reference.
	$(method getSuperType)
	# Sets the value of the 'superType' reference.
	#   1. New value.
	$(method setSuperType)
endef

#
# Model object 'Module'.
#
# The following features are available:
#   - attribute 'static'
#   - attribute 'abstract'
#   - reference 'superType'
#   - reference 'subTypes'
#   - reference 'attributes'
#   - reference 'depends'
#   - reference 'dependent'
#
# To instantiate this class use 'MyFileFactory.createModule'.
define class-Module
	$(super Node)
	$(super Entity)

	# Returns the value of the 'static' attribute.
	$(method getStatic)
	# Sets the value of the 'static' attribute.
	#   1. New value.
	$(method setStatic)

	# Returns the value of the 'abstract' attribute.
	$(method getAbstract)
	# Sets the value of the 'abstract' attribute.
	#   1. New value.
	$(method setAbstract)

	# Returns the value of the 'superType' reference.
	$(method getSuperType)
	# Sets the value of the 'superType' reference.
	#   1. New value.
	$(method setSuperType)

	# Returns the value of the 'subTypes' reference.
	$(method getSubTypes)
	# Sets the value of the 'subTypes' reference.
	#   1. New value.
	$(method setSubTypes)
	# Adds new elements to the 'subTypes' reference.
	#   1. Elements to add.
	$(method addSubTypes)
	# Removes elements from the 'subTypes' reference.
	#   1. Elements to remove.
	$(method removeSubTypes)
	# Removes all elements from the 'subTypes' reference.
	$(method clearSubTypes)

	# Returns the value of the 'attributes' containment reference.
	#   1. Optional subtype of ModuleProperty to filter on:
	#       'Depends'
	#       'FeatureModuleProperty'
	#       'FilenameModuleProperty'
	#       'Requires'
	#       'Provides'
	#       'Sources'
	#       'Objects'
	$(method getAttributes)
	# Sets the value of the 'attributes' containment reference.
	#   1. New value.
	$(method setAttributes)
	# Adds new elements to the 'attributes' containment reference.
	#   1. Elements to add.
	$(method addAttributes)
	# Removes elements from the 'attributes' containment reference.
	#   1. Elements to remove.
	$(method removeAttributes)
	# Removes all elements from the 'attributes' containment reference.
	$(method clearAttributes)

	# Returns the value of the 'depends' reference.
	$(method getDepends)
	# Sets the value of the 'depends' reference.
	#   1. New value.
	$(method setDepends)
	# Adds new elements to the 'depends' reference.
	#   1. Elements to add.
	$(method addDepends)
	# Removes elements from the 'depends' reference.
	#   1. Elements to remove.
	$(method removeDepends)
	# Removes all elements from the 'depends' reference.
	$(method clearDepends)

	# Returns the value of the 'dependent' reference.
	$(method getDependent)
	# Sets the value of the 'dependent' reference.
	#   1. New value.
	$(method setDependent)
	# Adds new elements to the 'dependent' reference.
	#   1. Elements to add.
	$(method addDependent)
	# Removes elements from the 'dependent' reference.
	#   1. Elements to remove.
	$(method removeDependent)
	# Removes all elements from the 'dependent' reference.
	$(method clearDependent)
endef

#
# Model object 'ModuleProperty'.
#
# To instantiate this class use 'MyFileFactory.createModuleProperty'.
define class-ModuleProperty
	$(super Node)
endef

#
# Model object 'Depends'.
#
# The following features are available:
#   - reference 'modules'
#
# To instantiate this class use 'MyFileFactory.createDepends'.
define class-Depends
	$(super Node)
	$(super ModuleProperty)

	# Returns the value of the 'modules' reference.
	$(method getModules)
	# Sets the value of the 'modules' reference.
	#   1. New value.
	$(method setModules)
	# Adds new elements to the 'modules' reference.
	#   1. Elements to add.
	$(method addModules)
	# Removes elements from the 'modules' reference.
	#   1. Elements to remove.
	$(method removeModules)
	# Removes all elements from the 'modules' reference.
	$(method clearModules)
endef

#
# Model object 'FeatureModuleProperty'.
#
# The following features are available:
#   - reference 'features'
#
# To instantiate this class use 'MyFileFactory.createFeatureModuleProperty'.
define class-FeatureModuleProperty
	$(super Node)
	$(super ModuleProperty)

	# Returns the value of the 'features' reference.
	$(method getFeatures)
	# Sets the value of the 'features' reference.
	#   1. New value.
	$(method setFeatures)
	# Adds new elements to the 'features' reference.
	#   1. Elements to add.
	$(method addFeatures)
	# Removes elements from the 'features' reference.
	#   1. Elements to remove.
	$(method removeFeatures)
	# Removes all elements from the 'features' reference.
	$(method clearFeatures)
endef

#
# Model object 'FilenameModuleProperty'.
#
# The following features are available:
#   - reference 'files'
#
# To instantiate this class use 'MyFileFactory.createFilenameModuleProperty'.
define class-FilenameModuleProperty
	$(super Node)
	$(super ModuleProperty)

	# Returns the value of the 'files' containment reference.
	$(method getFiles)
	# Sets the value of the 'files' containment reference.
	#   1. New value.
	$(method setFiles)
	# Adds new elements to the 'files' containment reference.
	#   1. Elements to add.
	$(method addFiles)
	# Removes elements from the 'files' containment reference.
	#   1. Elements to remove.
	$(method removeFiles)
	# Removes all elements from the 'files' containment reference.
	$(method clearFiles)
endef

#
# Model object 'Filename'.
#
# The following features are available:
#   - attribute 'name'
#
# To instantiate this class use 'MyFileFactory.createFilename'.
define class-Filename
	$(super Node)

	# Returns the value of the 'name' attribute.
	$(method getName)
	# Sets the value of the 'name' attribute.
	#   1. New value.
	$(method setName)
endef

#
# Model object 'Requires'.
#
# To instantiate this class use 'MyFileFactory.createRequires'.
define class-Requires
	$(super Node)
	$(super FeatureModuleProperty)
endef

#
# Model object 'Provides'.
#
# To instantiate this class use 'MyFileFactory.createProvides'.
define class-Provides
	$(super Node)
	$(super FeatureModuleProperty)
endef

#
# Model object 'Sources'.
#
# To instantiate this class use 'MyFileFactory.createSources'.
define class-Sources
	$(super Node)
	$(super FilenameModuleProperty)
endef

#
# Model object 'Objects'.
#
# To instantiate this class use 'MyFileFactory.createObjects'.
define class-Objects
	$(super Node)
	$(super FilenameModuleProperty)
endef

$(def_all)

endif # __mybuild_myfile_model_mk


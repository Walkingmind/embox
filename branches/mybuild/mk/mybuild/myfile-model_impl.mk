# Generated by Xpand using M2Make template.

# Model implementation of 'myFile' package.

ifndef __mybuild_myfile_model_impl_mk
__mybuild_myfile_model_impl_mk := $(lastword $(MAKEFILE_LIST))

# Base class for all modelled objects of this package.
define class-MyFileNodeImpl
	$(super ENodeImpl)

	# Returns a reference to 'myFile' meta model.
	$(getter  metaModel,
		$(myFileMetaModel))

endef

# Implementation of 'Package' model object .
define class-MyPackageImpl
	$(super MyPackage)

	$(super MyFileNodeImpl)
	$(super MyNamedImpl)

	$(getter  metaClass,$(get myFileMetaModel->Package))

	# Reference 'imports' [0..*]: containment.
	$(property-field imports... : Import)
	$(setter  imports,
		$(invoke doSetReference,$(get myFileMetaModel->Package_imports),$1))
	$(setter+ imports,
		$(invoke doAddReference,$(get myFileMetaModel->Package_imports),$1))
	$(setter- imports,
		$(invoke doRemoveReference,$(get myFileMetaModel->Package_imports),$1))

	# Reference 'entities' [0..*]: bidirectional, containment.
	$(property-field entities... : Entity)
	$(setter  entities,
		$(invoke doSetReference,$(get myFileMetaModel->Package_entities),$1))
	$(setter+ entities,
		$(invoke doAddReference,$(get myFileMetaModel->Package_entities),$1))
	$(setter- entities,
		$(invoke doRemoveReference,$(get myFileMetaModel->Package_entities),$1))

endef

# Implementation of 'Import' model object .
define class-MyImportImpl
	$(super MyImport)

	$(super MyFileNodeImpl)

	$(getter  metaClass,$(get myFileMetaModel->Import))

	# Attribute 'importName'.
	$(property-field importName)

endef

# Implementation of 'Entity' model object .
define class-MyEntityImpl
	$(super MyEntity)

	$(super MyFileNodeImpl)
	$(super MyNamedImpl)

	$(getter  metaClass,$(get myFileMetaModel->Entity))

	# Reference 'package' [0..1]: bidirectional, container.
	$(property package : Package)
	$(getter  package,
		$(invoke doGetContainerReference,$(get myFileMetaModel->Entity_package)))
	$(setter  package,
		$(invoke doSetContainerReference,$(get myFileMetaModel->Entity_package),$1))

endef

# Implementation of 'Interface' model object .
define class-MyInterfaceImpl
	$(super MyInterface)

	$(super MyFileNodeImpl)
	$(super MyEntityImpl)
	$(super MyExtendableImpl)

	$(getter  metaClass,$(get myFileMetaModel->Interface))

	# Reference 'features' [0..*]: bidirectional, containment.
	$(property-field features... : Feature)
	$(setter  features,
		$(invoke doSetReference,$(get myFileMetaModel->Interface_features),$1))
	$(setter+ features,
		$(invoke doAddReference,$(get myFileMetaModel->Interface_features),$1))
	$(setter- features,
		$(invoke doRemoveReference,$(get myFileMetaModel->Interface_features),$1))

endef

# Implementation of 'Feature' model object .
define class-MyFeatureImpl
	$(super MyFeature)

	$(super MyFileNodeImpl)
	$(super MyNamedImpl)
	$(super MyExtendableImpl)

	$(getter  metaClass,$(get myFileMetaModel->Feature))

	# Reference 'interface' [0..1]: bidirectional, container.
	$(property interface : Interface)
	$(getter  interface,
		$(invoke doGetContainerReference,$(get myFileMetaModel->Feature_interface)))
	$(setter  interface,
		$(invoke doSetContainerReference,$(get myFileMetaModel->Feature_interface),$1))

	# Reference 'providedBy' [0..*]: bidirectional.
	$(property-field providedBy... : Module)
	$(setter  providedBy,
		$(invoke doSetReference,$(get myFileMetaModel->Feature_providedBy),$1))
	$(setter+ providedBy,
		$(invoke doAddReference,$(get myFileMetaModel->Feature_providedBy),$1))
	$(setter- providedBy,
		$(invoke doRemoveReference,$(get myFileMetaModel->Feature_providedBy),$1))

	# Reference 'requiredBy' [0..*]: bidirectional.
	$(property-field requiredBy... : Module)
	$(setter  requiredBy,
		$(invoke doSetReference,$(get myFileMetaModel->Feature_requiredBy),$1))
	$(setter+ requiredBy,
		$(invoke doAddReference,$(get myFileMetaModel->Feature_requiredBy),$1))
	$(setter- requiredBy,
		$(invoke doRemoveReference,$(get myFileMetaModel->Feature_requiredBy),$1))

endef

define class-ReferenceToMyFeatureImpl
	$(super ReferenceImpl,$(value 1))

	$(getter  referenceMetaClass,$(get myFileMetaModel->Feature))

endef

# Implementation of 'Module' model object .
define class-MyModuleImpl
	$(super MyModule)

	$(super MyFileNodeImpl)
	$(super MyEntityImpl)
	$(super MyExtendableImpl)

	$(getter  metaClass,$(get myFileMetaModel->Module))

	# Attribute 'static'.
	$(property-field static)

	# Attribute 'abstract'.
	$(property-field abstract)

	# Reference 'depends' [0..*]: bidirectional.
	$(property-field depends... : Module)
	$(setter  depends,
		$(invoke doSetReference,$(get myFileMetaModel->Module_depends),$1))
	$(setter+ depends,
		$(invoke doAddReference,$(get myFileMetaModel->Module_depends),$1))
	$(setter- depends,
		$(invoke doRemoveReference,$(get myFileMetaModel->Module_depends),$1))

	# Reference 'dependent' [0..*]: bidirectional.
	$(property-field dependent... : Module)
	$(setter  dependent,
		$(invoke doSetReference,$(get myFileMetaModel->Module_dependent),$1))
	$(setter+ dependent,
		$(invoke doAddReference,$(get myFileMetaModel->Module_dependent),$1))
	$(setter- dependent,
		$(invoke doRemoveReference,$(get myFileMetaModel->Module_dependent),$1))

	# Reference 'provides' [0..*]: bidirectional.
	$(property-field provides... : Feature)
	$(setter  provides,
		$(invoke doSetReference,$(get myFileMetaModel->Module_provides),$1))
	$(setter+ provides,
		$(invoke doAddReference,$(get myFileMetaModel->Module_provides),$1))
	$(setter- provides,
		$(invoke doRemoveReference,$(get myFileMetaModel->Module_provides),$1))

	# Reference 'requires' [0..*]: bidirectional.
	$(property-field requires... : Feature)
	$(setter  requires,
		$(invoke doSetReference,$(get myFileMetaModel->Module_requires),$1))
	$(setter+ requires,
		$(invoke doAddReference,$(get myFileMetaModel->Module_requires),$1))
	$(setter- requires,
		$(invoke doRemoveReference,$(get myFileMetaModel->Module_requires),$1))

endef

define class-ReferenceToMyModuleImpl
	$(super ReferenceImpl,$(value 1))

	$(getter  referenceMetaClass,$(get myFileMetaModel->Module))

endef

# Implementation of 'Named' model object .
define class-MyNamedImpl
	$(super MyNamed)

	$(super MyFileNodeImpl)

	$(getter  metaClass,$(get myFileMetaModel->Named))

	# Attribute 'name'.
	$(property-field name)

endef

# Implementation of 'Extendable' model object .
define class-MyExtendableImpl
	$(super MyExtendable)

	$(super MyFileNodeImpl)

	$(getter  metaClass,$(get myFileMetaModel->Extendable))

	# Reference 'subTypes' [0..*]: bidirectional.
	$(property-field subTypes... : Extendable)
	$(setter  subTypes,
		$(invoke doSetReference,$(get myFileMetaModel->Extendable_subTypes),$1))
	$(setter+ subTypes,
		$(invoke doAddReference,$(get myFileMetaModel->Extendable_subTypes),$1))
	$(setter- subTypes,
		$(invoke doRemoveReference,$(get myFileMetaModel->Extendable_subTypes),$1))

	# Reference 'superType' [0..1]: bidirectional.
	$(property-field superType : Extendable)
	$(setter  superType,
		$(invoke doSetReference,$(get myFileMetaModel->Extendable_superType),$1))

	# Reference 'allSubTypes' [0..*]: bidirectional, volatile, read-only.
	# PROTECTED REGION ID(Extendable_allSubTypes) ENABLED START
	# TODO Uncomment and implement me.
#	$(getter  allSubTypes,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'allSuperTypes' [0..*]: bidirectional, volatile, read-only.
	# PROTECTED REGION ID(Extendable_allSuperTypes) ENABLED START
	# TODO Uncomment and implement me.
#	$(getter  allSuperTypes,
#		$(error $0: NIY))
	# PROTECTED REGION END

endef

define class-ReferenceToMyExtendableImpl
	$(super ReferenceImpl,$(value 1))

	$(getter  referenceMetaClass,$(get myFileMetaModel->Extendable))

endef

# Implementation of 'Filename' model object .
define class-MyFilenameImpl
	$(super MyFilename)

	$(super MyFileNodeImpl)

	$(getter  metaClass,$(get myFileMetaModel->Filename))

endef

$(def_all)

endif # __mybuild_myfile_model_impl_mk


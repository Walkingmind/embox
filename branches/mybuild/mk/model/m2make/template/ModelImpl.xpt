«IMPORT ecore»

«EXTENSION template::GeneratorExtensions»
«EXTENSION org::eclipse::xtend::util::stdlib::counter»

«DEFINE main FOR EPackage»«FILE fileName("model_impl") -»
«fileHeader()»

# Model implementation of '«name»' package.

«implInclusionCheck("model")»

«EXPAND classifier FOREACH eClassifiers.typeSelect(EClass) -»

$(def_all)

«ENDFILE»«ENDDEFINE»

«DEFINE classifier FOR EClass»
«LET mkGet(ePackage.metaModelInstanceName() + "->" + id()) AS metaClass -»
# Implementation of '«name»' model object.
define class-«classImplName()»
	«mkSuper(className())»

	«mkSuper("ENodeImpl")»
«FOREACH eSuperTypes AS superType -»
	«mkSuper(superType.classImplName())»
«ENDFOREACH -»

	«mkGetter("eMetaClass", metaClass)»
«EXPAND feature FOREACH eStructuralFeatures -»
«EXPAND operation FOREACH eOperations»
«PROTECT CSTART '\t# ' CEND '' ID id()»
#	# TODO Add custom implementation here and remove this comment.
«ENDPROTECT»
endef
«ENDLET -»
«ENDDEFINE»

«DEFINE feature FOR EStructuralFeature»
	# «featureInfo() -»
«IF volatile -»
«EXPAND volatileFeature -»
«ELSE -»
«EXPAND nonVolatileFeature -»
«ENDIF -»
«ENDDEFINE»

«DEFINE volatileFeature FOR EStructuralFeature»
	«mkProperty(propertyName() + memberCardinality() + memberType())»
«PROTECT CSTART '\t# ' CEND '' ID id()»
«EXPAND memberStub FOR mkGetterWrap(propertyName(), "$(error $0: NIY)") -»
«IF changeable -»
«EXPAND memberStub FOR mkSetterWrap(propertyName(), "$(error $0($1): NIY)") -»
«IF many -»
«EXPAND memberStub FOR mkSetterPlusWrap(propertyName(), "$(error $0($1): NIY)") -»
«EXPAND memberStub FOR mkSetterMinusWrap(propertyName(), "$(error $0($1): NIY)") -»
«ENDIF -»
«ENDIF -»
«EXPAND volatileCrossReference -»
«ENDPROTECT»
«ENDDEFINE»

«DEFINE volatileCrossReference FOR EStructuralFeature»«ENDDEFINE»
«DEFINE volatileCrossReference FOR EReference -»
«IF resolveProxies && !containment && !container -»
«EXPAND memberStub FOR mkGetterWrap(propertyLinkName(), "$(error $0: NIY)") -»
«IF changeable -»
«EXPAND memberStub FOR mkSetterWrap(propertyLinkName(), "$(error $0($1): NIY)") -»
«IF many -»
«EXPAND memberStub FOR mkSetterPlusWrap(propertyLinkName(), "$(error $0($1): NIY)") -»
«EXPAND memberStub FOR mkSetterMinusWrap(propertyLinkName(), "$(error $0($1): NIY)") -»
«ENDIF -»
«ENDIF -»
«ENDIF -»
«ENDDEFINE»

«DEFINE memberStub FOR String -»
#	# TODO Uncomment and implement me.
#	«comment()»
«ENDDEFINE»

«DEFINE nonVolatileFeature FOR EStructuralFeature»
	«ERROR "Unexpected EStructuralFeature: " + this»
«ENDDEFINE»

«DEFINE nonVolatileFeature FOR EAttribute»
«IF changeable -»
	«mkPropertyField(propertyName() + memberCardinality() + memberType())»
«ELSE -»
	«mkProperty(propertyName() + memberCardinality() + memberType())»
	«mkField(propertyName() + memberCardinality() + memberType())»
	«mkGetter(propertyName(), mkGetField(propertyName()))»
«ENDIF -»
«ENDDEFINE»

«DEFINE nonVolatileFeature FOR EReference»
«LET mkGet(eReferenceType.ePackage.metaModelInstanceName() + "->" + id())
	AS metaReference -»
	«mkProperty(propertyName() + memberCardinality() + memberType())»
«IF container -»
«EXPAND containerReference(metaReference) -»
«ELSE -»
«EXPAND nonContainerReference(metaReference) -»
«ENDIF -»
«ENDLET -»
«ENDDEFINE»

«DEFINE containerReference(String metaReference) FOR EReference -»
	«mkGetterWrap(propertyName(), mkInvoke("doGetContainerReference", metaReference))»
«IF changeable -»
	«mkSetterWrap(propertyName(), mkInvoke("doSetContainerReference", metaReference + ",$1"))»
«ENDIF -»
«ENDDEFINE»

«DEFINE nonContainerReference(String metaReference) FOR EReference -»
	«mkField(propertyName() + memberCardinality() + memberType())»
	«mkGetterWrap(propertyName(), mkGetField(propertyName()))»
«IF changeable -»
	«mkSetterWrap(propertyName(), mkInvoke("doSetReference", metaReference + ",$1"))»
«IF many -»
	«mkSetterPlusWrap(propertyName(), mkInvoke("doAddReference", metaReference + ",$1"))»
	«mkSetterMinusWrap(propertyName(), mkInvoke("doRemoveReference", metaReference + ",$1"))»
«ENDIF -»
«ENDIF -»
«IF resolveProxies && !containment && !container -»
	# Link operations.
	«mkGetterWrap(propertyLinkName(), mkInvoke("doGetLink", metaReference))»
«IF changeable -»
	«mkSetterWrap(propertyLinkName(), mkInvoke("doSetLink", metaReference + ",$1"))»
«IF many -»
	«mkSetterPlusWrap(propertyLinkName(), mkInvoke("doAddLink", metaReference + ",$1"))»
	«mkSetterMinusWrap(propertyLinkName(), mkInvoke("doRemoveLink", metaReference + ",$1"))»
«ENDIF -»
«ENDIF -»
«ENDIF -»
«ENDDEFINE»

«DEFINE operation FOR EOperation»
	# '«name + memberCardinality() + memberType()»' operation.
«FOREACH eParameters AS param ITERATOR i -»
	#   «i.counter1». «param.name + param.memberCardinality() + param.memberType()»
«ENDFOREACH -»
«PROTECT CSTART '\t# ' CEND '' ID id()»
«EXPAND memberStub FOR (mkMethod(methodName(),
	"$(error $0(" + eParameters.collect(p | "$" + counterInc()).toString(",") +
			"): NIY)")) -»
«ENDPROTECT»
«ENDDEFINE»


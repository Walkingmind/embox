«IMPORT ecore»

«EXTENSION template::GeneratorExtensions»

«DEFINE main FOR EPackage»«FILE fileName("model_impl") -»
«fileHeader()»

# Model implementation of '«name»' package.

«inclusionGuardBegin("model_impl")»

# Base class for all modelled objects of this package.
define class-«nodeImplName()»
	«mkSuper("ENodeImpl")»

	# Returns a reference to '«name»' meta model.
	«mkGetterWrap("eMetaModel",
		"$(" + metaModelInstanceName() + ")")»

endef
«EXPAND classifier FOREACH eClassifiers.typeSelect(EClass) -»

$(def_all)

«inclusionGuardEnd("model_impl")»

«ENDFILE»«ENDDEFINE»

«DEFINE classifier FOR EClass»
«LET mkGet(ePackage.metaModelInstanceName() + "->" + id()) AS metaClass -»
# Implementation of '«name»' model object .
define class-«classImplName()»
	«mkSuper(className())»

	«mkSuper(ePackage.nodeImplName())»
«FOREACH eSuperTypes AS superType -»
	«mkSuper(superType.classImplName())»
«ENDFOREACH -»

	«mkGetter("eMetaClass", metaClass)»
«EXPAND feature FOREACH eStructuralFeatures»
«PROTECT CSTART '\t# ' CEND '' ID id()»
#	# TODO Add custom implementation here and remove this comment.
«ENDPROTECT»
endef
«ENDLET -»
«ENDDEFINE»

«DEFINE feature FOR EStructuralFeature»
	# «featureInfo() -»
«IF volatile -»
«EXPAND volatileFeature -»
«ELSE -»
«EXPAND nonVolatileFeature -»
«ENDIF -»
«ENDDEFINE»

«DEFINE volatileFeature FOR EStructuralFeature»
	«mkProperty(propertyName() + memberCardinality() + memberType())»
«PROTECT CSTART '\t# ' CEND '' ID id()»
«EXPAND volatileFeatureStub(mkGetterWrap(propertyName(), "$(error $0: NIY)")) -»
«IF changeable -»
«EXPAND volatileFeatureStub(mkSetterWrap(propertyName(), "$(error $0($1): NIY)")) -»
«IF upperBound != 1 -»
«EXPAND volatileFeatureStub(mkSetterPlusWrap(propertyName(), "$(error $0($1): NIY)")) -»
«EXPAND volatileFeatureStub(mkSetterMinusWrap(propertyName(), "$(error $0($1): NIY)")) -»
«ENDIF -»
«ENDIF -»
«ENDPROTECT»
«ENDDEFINE»

«DEFINE volatileFeatureStub(String mk) FOR EStructuralFeature -»
#	# TODO Uncomment and implement me.
#	«mk.comment()»
«ENDDEFINE»

«DEFINE nonVolatileFeature FOR EStructuralFeature»
	«ERROR "Unexpected EStructuralFeature: " + this»
«ENDDEFINE»

«DEFINE nonVolatileFeature FOR EAttribute»
«IF changeable -»
	«mkPropertyField(propertyName() + memberCardinality() + memberType())»
«ELSE -»
	«mkProperty(propertyName() + memberCardinality() + memberType())»
	«mkField(propertyName() + memberCardinality() + memberType())»
	«mkGetter(propertyName(), mkGetField(propertyName()))»
«ENDIF -»
«ENDDEFINE»

«DEFINE nonVolatileFeature FOR EReference»
«LET mkGet(eReferenceType.ePackage.metaModelInstanceName() + "->" + id())
	AS metaReference -»
	«mkProperty(propertyName() + memberCardinality() + memberType())»
«IF container -»
«EXPAND containerReference(metaReference) -»
«ELSE -»
«EXPAND nonContainerReference(metaReference) -»
«ENDIF -»
«ENDLET -»
«ENDDEFINE»

«DEFINE containerReference(String metaReference) FOR EReference -»
	«mkGetterWrap(propertyName(), mkInvoke("doGetContainerReference", metaReference))»
«IF changeable -»
	«mkSetterWrap(propertyName(), mkInvoke("doSetContainerReference", metaReference + ",$1"))»
«ENDIF -»
«ENDDEFINE»

«DEFINE nonContainerReference(String metaReference) FOR EReference -»
	«mkField(propertyName() + memberCardinality() + memberType())»
	«mkGetterWrap(propertyName(), mkGetField(propertyName()))»
«IF changeable -»
	«mkSetterWrap(propertyName(), mkInvoke("doSetReference", metaReference + ",$1"))»
«IF upperBound != 1 -»
	«mkSetterPlusWrap(propertyName(), mkInvoke("doAddReference", metaReference + ",$1"))»
	«mkSetterMinusWrap(propertyName(), mkInvoke("doRemoveReference", metaReference + ",$1"))»
«ENDIF -»
«ENDIF -»
«ENDDEFINE»

# Generated by Xpand using M2Make template.

# Model implementation of 'EModel' package.

ifndef __model_model_impl_mk
__model_model_impl_mk := $(lastword $(MAKEFILE_LIST))

# Base class for all modelled objects of this package.
define class-EModelNodeImpl
	$(super ENodeImpl)

	# Returns a reference to 'EModel' meta model.
	$(getter eMetaModel,
		$(eModelMetaModel))

endef

# Implementation of 'ENode' model object .
define class-ENodeImpl
	$(super ENode)

	$(super EModelNodeImpl)

	$(getter eMetaClass,$(get eModelMetaModel->ENode))

	# Reference 'eMetaClass' [0..1]: volatile, read-only.
	$(property eMetaClass : EMetaClass)
	# PROTECTED REGION ID(ENode_eMetaClass) ENABLED START
	#
	# Subclasses must override 'eMetaClass' getter, see above.
	#
	# PROTECTED REGION END

	# Attribute 'eResource': volatile, read-only.
	$(property eResource : EResource)
	# PROTECTED REGION ID(ENode_eResource) ENABLED START
	$(getter  eResource,
		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eContainer' [0..1]: volatile, read-only.
	$(property eContainer : ENode)
	# PROTECTED REGION ID(ENode_eContainer) ENABLED START
	$(field eContainer)
	$(getter  eContainer,
		$(get-field eContainer))
	# PROTECTED REGION END

	# Reference 'eRootContainer' [0..1]: volatile, read-only.
	$(property eRootContainer : ENode)
	# PROTECTED REGION ID(ENode_eRootContainer) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eRootContainer,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eContents' [0..*]: bidirectional, volatile, read-only.
	$(property eContents... : ENode)
	# PROTECTED REGION ID(ENode_eContents) ENABLED START
	$(getter  eContents,
		$(foreach metaReference,$(get $(get eMetaClass).eAllContainments),
			$(get $(get metaReference->instanceProperty))))
	# PROTECTED REGION END

	# Reference 'eAllContents' [0..*]: bidirectional, volatile, read-only.
	$(property eAllContents... : ENode)
	# PROTECTED REGION ID(ENode_eAllContents) ENABLED START
	$(getter  eAllContents,
		$(foreach child,$(get eContents),$(child) \
			$(get child->eAllContents)))
	# PROTECTED REGION END

	# PROTECTED REGION ID(ENode) ENABLED START

	# Params:
	#   1. Meta reference.
	#   2. What to add.
	$(method doAddReference,
		$(assert $(invoke $(get 1->eContainingClass).isSuperTypeOf,
				$(get eMetaClass)),
			Bad cast '$(get $(get eMetaClass).name)' \
			to '$(get $(get 1->eContainingClass).name)')

		$(assert $(not $(get 1->isContainer)),
			Container reference '$(get $(get 1->eContainingClass).name)
				.$(get 1->name)' must be set using 'doSetContainerReference')

		$(for \
			eLinkClass <- $(get eModelMetaModel->ELink),
			e          <- $2,
			$(invoke \
				$(if $(invoke eLinkClass->isSuperTypeOf,$(get e->eMetaClass)),
					doAddLinkReference,
					doAddNodeReference),
				$1,$e)
		)

		$(with $1,
			$(invoke __prefix_links,$1,
				$(filter-out $(get $(get 1->a_field)) $(suffix $(get links)),
					$(suffix $2))),
			$(get meta_model_instance->node_links),


			$(set+ links,$(foreach l,$(filter $1%,$2),$l
				$(invoke l->inverse_add_references,$3,$(this))
			))

		)
	)

	# Params:
	#   1. Meta reference.
	#   2. A single node to add.
	$(method doAddNodeReference,
		$(set-field+ $(get 1->instanceProperty),
			$(invoke 2->doInverseAdd,$1,$(this))
		))
	)

	# PROTECTED REGION END
endef

# Implementation of 'ELink' model object .
define class-ELinkImpl
	$(super ELink)

	$(super EModelNodeImpl)
	$(super ENamedImpl)

	$(getter eMetaClass,$(get eModelMetaModel->ELink))

	# Reference 'eMetaReference' [0..1].
	$(property eMetaReference : EMetaReference)
	$(field eMetaReference : EMetaReference)
	$(getter eMetaReference,
		$(get-field eMetaReference))
	$(setter eMetaReference,
		$(invoke doSetReference,$(get eModelMetaModel->ELink_eMetaReference),$1))

	# PROTECTED REGION ID(ELink) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaType' model object .
define class-EMetaTypeImpl
	$(super EMetaType)

	$(super EModelNodeImpl)
	$(super ENamedImpl)

	$(getter eMetaClass,$(get eModelMetaModel->EMetaType))

	# Attribute 'instanceClass'.
	$(property-field instanceClass : EString)

	# Reference 'eMetaModel' [0..1]: bidirectional, container, read-only.
	$(property eMetaModel : EMetaModel)
	$(getter eMetaModel,
		$(invoke doGetContainerReference,$(get eModelMetaModel->EMetaType_eMetaModel)))

	# 'isInstance : EBoolean' operation.
	#   1. object : ENode
	# PROTECTED REGION ID(EMetaType_isInstance) ENABLED START
#	# TODO Uncomment and implement me.
#	$(method isInstance,
#		$(error $0($1): NIY))
	# PROTECTED REGION END

	# PROTECTED REGION ID(EMetaType) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaClass' model object .
define class-EMetaClassImpl
	$(super EMetaClass)

	$(super EModelNodeImpl)
	$(super EMetaTypeImpl)

	$(getter eMetaClass,$(get eModelMetaModel->EMetaClass))

	# Attribute 'abstract'.
	$(property-field isAbstract : EBoolean)

	# Attribute 'interface'.
	$(property-field isInterface : EBoolean)

	# Reference 'eSuperTypes' [0..*].
	$(property eSuperTypes... : EMetaClass)
	$(field eSuperTypes... : EMetaClass)
	$(getter eSuperTypes,
		$(get-field eSuperTypes))
	$(setter eSuperTypes,
		$(invoke doSetReference,$(get eModelMetaModel->EMetaClass_eSuperTypes),$1))
	$(setter+ eSuperTypes,
		$(invoke doAddReference,$(get eModelMetaModel->EMetaClass_eSuperTypes),$1))
	$(setter- eSuperTypes,
		$(invoke doRemoveReference,$(get eModelMetaModel->EMetaClass_eSuperTypes),$1))

	# Reference 'eAllSuperTypes' [0..*]: volatile, read-only.
	$(property eAllSuperTypes... : EMetaClass)
	# PROTECTED REGION ID(EMetaClass_eAllSuperTypes) ENABLED START
	$(getter  eAllSuperTypes,
		# TODO inefficient.
		$(sort \
			$(foreach superType,$(get eSuperTypes),$(superType) \
				$(get superType->eAllSuperTypes))))
	# PROTECTED REGION END

	# Reference 'eFeatures' [0..*]: bidirectional, containment.
	$(property eFeatures... : EMetaFeature)
	$(field eFeatures... : EMetaFeature)
	$(getter eFeatures,
		$(get-field eFeatures))
	$(setter eFeatures,
		$(invoke doSetReference,$(get eModelMetaModel->EMetaClass_eFeatures),$1))
	$(setter+ eFeatures,
		$(invoke doAddReference,$(get eModelMetaModel->EMetaClass_eFeatures),$1))
	$(setter- eFeatures,
		$(invoke doRemoveReference,$(get eModelMetaModel->EMetaClass_eFeatures),$1))

	# Reference 'eAllFeatures' [0..*]: volatile, read-only.
	$(property eAllFeatures... : EMetaFeature)
	# PROTECTED REGION ID(EMetaClass_eAllFeatures) ENABLED START
	$(getter  eAllFeatures,
		$(sort $(get eFeatures) \
			$(foreach superType,$(get eSuperTypes),
				$(get superType->eAllFeatures))))
	# PROTECTED REGION END

	# Reference 'eAttributes' [0..*]: volatile, read-only.
	$(property eAttributes... : EMetaAttribute)
	# PROTECTED REGION ID(EMetaClass_eAttributes) ENABLED START
	$(getter  eAttributes,
		$(invoke filterFeaturesByClass,$(get eFeatures),
			$(get eModelMetaModel->EMetaAttribute)))
	# PROTECTED REGION END

	# Reference 'eAllAttributes' [0..*]: volatile, read-only.
	$(property eAllAttributes... : EMetaAttribute)
	# PROTECTED REGION ID(EMetaClass_eAllAttributes) ENABLED START
	$(getter  eAllAttributes,
		$(invoke filterFeaturesByClass,$(get eAllFeatures),
			$(get eModelMetaModel->EMetaAttribute)))
	# PROTECTED REGION END

	# Reference 'eReferences' [0..*]: volatile, read-only.
	$(property eReferences... : EMetaReference)
	# PROTECTED REGION ID(EMetaClass_eReferences) ENABLED START
	# TODO Uncomment and implement me.
	$(getter  eReferences,
		$(invoke filterFeaturesByClass,$(get eFeatures),
			$(get eModelMetaModel->EMetaReference)))
	# PROTECTED REGION END

	# Reference 'eAllReferences' [0..*]: volatile, read-only.
	$(property eAllReferences... : EMetaReference)
	# PROTECTED REGION ID(EMetaClass_eAllReferences) ENABLED START
	$(getter  eAllReferences,
		$(invoke filterFeaturesByClass,$(get eAllFeatures),
			$(get eModelMetaModel->EMetaReference)))
	# PROTECTED REGION END

	# Reference 'eAllContainments' [0..*]: volatile, read-only.
	$(property eAllContainments... : EMetaReference)
	# PROTECTED REGION ID(EMetaClass_eAllContainments) ENABLED START
	# TODO Uncomment and implement me.
	$(getter  eAllContainments,
		$(foreach reference,$(get eAllReferences),
			$(if $(get reference->isContainment),$(reference))))
	# PROTECTED REGION END

	# 'isSuperTypeOf : EBoolean' operation.
	#   1. someClass : EMetaClass
	# PROTECTED REGION ID(EMetaClass_isSuperTypeOf) ENABLED START
#	# TODO Uncomment and implement me.
#	$(method isSuperTypeOf,
#		$(error $0($1): NIY))
	# PROTECTED REGION END

	# PROTECTED REGION ID(EMetaClass) ENABLED START

	# Params:
	#   1. List of features.
	#   2. Meta class.
	$(method filterFeaturesByClass,
		$(foreach feature,$1,
			$(if $(invoke 2->isSuperTypeOf,$(get feature->eContainingClass)),
				$(feature)))
	)

	# PROTECTED REGION END
endef

# Implementation of 'EMetaPrimitive' model object .
define class-EMetaPrimitiveImpl
	$(super EMetaPrimitive)

	$(super EModelNodeImpl)
	$(super EMetaTypeImpl)

	$(getter eMetaClass,$(get eModelMetaModel->EMetaPrimitive))

	# PROTECTED REGION ID(EMetaPrimitive) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaFeature' model object .
define class-EMetaFeatureImpl
	$(super EMetaFeature)

	$(super EModelNodeImpl)
	$(super ETypedImpl)

	$(getter eMetaClass,$(get eModelMetaModel->EMetaFeature))

	# Attribute 'changeable'.
	$(property-field isChangeable : EBoolean)

	# Attribute 'volatile'.
	$(property-field isVolatile : EBoolean)

	# Attribute 'transient'.
	$(property-field isTransient : EBoolean)

	# Attribute 'derived'.
	$(property-field isDerived : EBoolean)

	# Attribute 'instanceProperty'.
	$(property-field instanceProperty : EString)

	# Reference 'eContainingClass' [0..1]: bidirectional, container, read-only.
	$(property eContainingClass : EMetaClass)
	$(getter eContainingClass,
		$(invoke doGetContainerReference,$(get eModelMetaModel->EMetaFeature_eContainingClass)))

	# PROTECTED REGION ID(EMetaFeature) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaReference' model object .
define class-EMetaReferenceImpl
	$(super EMetaReference)

	$(super EModelNodeImpl)
	$(super EMetaFeatureImpl)

	$(getter eMetaClass,$(get eModelMetaModel->EMetaReference))

	# Attribute 'containment'.
	$(property-field isContainment : EBoolean)

	# Attribute 'container': volatile, read-only.
	$(property isContainer : EBoolean)
	# PROTECTED REGION ID(EMetaReference_container) ENABLED START
	$(getter  isContainer,
		$(foreach opposite,$(get eOpposite),$(get opposite->isContainment)))
	# PROTECTED REGION END

	# Reference 'eOpposite' [0..1].
	$(property eOpposite : EMetaReference)
	$(field eOpposite : EMetaReference)
	$(getter eOpposite,
		$(get-field eOpposite))
	$(setter eOpposite,
		$(invoke doSetReference,$(get eModelMetaModel->EMetaReference_eOpposite),$1))

	# Reference 'eReferenceType' [1..1]: volatile, read-only.
	$(property eReferenceType : EMetaClass)
	# PROTECTED REGION ID(EMetaReference_eReferenceType) ENABLED START
	$(getter  eReferenceType,
		$(instance-of $(get eType),EMetaClass))
	# PROTECTED REGION END

	# PROTECTED REGION ID(EMetaReference) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaAttribute' model object .
define class-EMetaAttributeImpl
	$(super EMetaAttribute)

	$(super EModelNodeImpl)
	$(super EMetaFeatureImpl)

	$(getter eMetaClass,$(get eModelMetaModel->EMetaAttribute))

	# Reference 'eAttributeType' [1..1]: volatile, read-only.
	$(property eAttributeType : EMetaPrimitive)
	# PROTECTED REGION ID(EMetaAttribute_eAttributeType) ENABLED START
	$(getter  eReferenceType,
		$(instance-of $(get eType),EMetaPrimitive))
	# PROTECTED REGION END

	# PROTECTED REGION ID(EMetaAttribute) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaModel' model object .
define class-EMetaModelImpl
	$(super EMetaModel)

	$(super EModelNodeImpl)
	$(super ENamedImpl)

	$(getter eMetaClass,$(get eModelMetaModel->EMetaModel))

	# Reference 'eFactory' [1..1]: bidirectional.
	$(property eFactory : EModelFactory)
	$(field eFactory : EModelFactory)
	$(getter eFactory,
		$(get-field eFactory))
	$(setter eFactory,
		$(invoke doSetReference,$(get eModelMetaModel->EMetaModel_eFactory),$1))

	# Reference 'eTypes' [0..*]: bidirectional, containment.
	$(property eTypes... : EMetaType)
	$(field eTypes... : EMetaType)
	$(getter eTypes,
		$(get-field eTypes))
	$(setter eTypes,
		$(invoke doSetReference,$(get eModelMetaModel->EMetaModel_eTypes),$1))
	$(setter+ eTypes,
		$(invoke doAddReference,$(get eModelMetaModel->EMetaModel_eTypes),$1))
	$(setter- eTypes,
		$(invoke doRemoveReference,$(get eModelMetaModel->EMetaModel_eTypes),$1))

	# PROTECTED REGION ID(EMetaModel) ENABLED START

	#
	# Meta object instantiation.
	#

	# Params:
	#   1. Meta class ID (unused).
	$(method createMetaClass,
		$(invoke eModelFactory->createEMetaClass))

	# Params:
	#   1. Meta class.
	#   2. Meta feature ID (unused).
	$(method createMetaAttribute,
		$(invoke addMetaFeatureToClass,$1,
			$(invoke eModelFactory->createEMetaAttribute)))

	# Params:
	#   1. Meta class.
	#   2. Meta feature ID (unused).
	$(method createMetaReference,
		$(invoke addMetaFeatureToClass,$1,
			$(invoke eModelFactory->createEMetaReference)))

	# Params:
	#   1. Meta class.
	#   2. New meta feature.
	# Return:
	#   The second argument.
	$(method addMetaFeatureToClass,
		$(set+ 1->eFeatures,$2)
		$2)

	#
	# Objects initialization.
	#

	# Params:
	#   1. Meta class.
	#   2. Name.
	#   3. Super types...
	#   4. Flags...
	$(method initMetaClass,
		$(set 1->name,$2)
		$(set 1->eSuperTypes,$3)
		$(set 1->isAbstract,$(filter abstract,$4))
		$(set 1->isInterface,$(filter interface,$4))
	)

	# Params:
	#   1. Meta attribute.
	#   2. Name.
	#   3. Lower bound.
	#   4. Upper bound.
	#   5. Flags...
	$(method initMetaAttribute,
		$(invoke commonInitMetaFeature,$1,$2,$3,$4,$5))

	# Params:
	#   1. Meta reference.
	#   2. Name.
	#   3. Lower bound.
	#   4. Upper bound.
	#   5. Referenced class.
	#   6. Opposite reference (if any).
	#   7. Flags...
	$(method initMetaReference,
		$(invoke commonInitMetaFeature,$1,$2,$3,$4,$7)
		$(set 1->eType,$5)
		$(set 1->eOpposite,$6)
		$(set 1->isContainment,$(filter containment,$7))
		$(set 1->isContainer,$(filter container,$7))
	)

	# Params:
	#   1. Meta feature.
	#   2. Name.
	#   3. Lower bound.
	#   4. Upper bound.
	#   5. Flags...
	$(method commonInitMetaFeature,
		$(set 1->name,$2)
		$(set 1->lowerBound,$3)
		$(set 1->upperBound,$4)
		$(set 1->isChangeable,$(filter changeable,$4))
		$(set 1->isDerived,$(filter derived,$4))
		$(set 1->isVolatile,$(filter volatile,$4))
		$(set 1->isTransient,$(filter transient,$4))
	)

	#
	# Binding to native class/properties.
	#

	# Params:
	#   1. Meta class.
	#   2. Instance class name.
	$(method bindMetaClass,
		$(assert $(class-exists $2),
			Can't bind meta type '$(get 1->name)' to undefined class '$2')
		$(set 1->instanceClass,$2)
	)

	# Params:
	#   1. Meta feature.
	#   2. Instance property name.
	$(method bindMetaFeature,
		$(assert $(class-has-property $(get 1->instanceClass),$2),
			Can't bind meta feature '$(get 1->name)' to undefined property '$2'
			of class '$(get 1->instanceClass)')
		$(set 1->instanceProperty,$2)
	)

	# PROTECTED REGION END
endef

# Implementation of 'EModelFactory' model object .
define class-EModelFactoryImpl
	$(super EModelFactory)

	$(super EModelNodeImpl)

	$(getter eMetaClass,$(get eModelMetaModel->EModelFactory))

	# Reference 'eMetaModel' [1..1]: bidirectional.
	$(property eMetaModel : EMetaModel)
	$(field eMetaModel : EMetaModel)
	$(getter eMetaModel,
		$(get-field eMetaModel))
	$(setter eMetaModel,
		$(invoke doSetReference,$(get eModelMetaModel->EModelFactory_eMetaModel),$1))

	# PROTECTED REGION ID(EModelFactory) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'ENamed' model object .
define class-ENamedImpl
	$(super ENamed)

	$(super EModelNodeImpl)

	$(getter eMetaClass,$(get eModelMetaModel->ENamed))

	# Attribute 'name'.
	$(property-field name : EString)

	# PROTECTED REGION ID(ENamed) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'ETyped' model object .
define class-ETypedImpl
	$(super ETyped)

	$(super EModelNodeImpl)
	$(super ENamedImpl)

	$(getter eMetaClass,$(get eModelMetaModel->ETyped))

	# Attribute 'lowerBound'.
	$(property-field lowerBound : EInt)

	# Attribute 'upperBound'.
	$(property-field upperBound : EInt)

	# Reference 'eType' [0..1].
	$(property eType : EMetaType)
	$(field eType : EMetaType)
	$(getter eType,
		$(get-field eType))
	$(setter eType,
		$(invoke doSetReference,$(get eModelMetaModel->ETyped_eType),$1))

	# PROTECTED REGION ID(ETyped) ENABLED START
	# PROTECTED REGION END
endef

$(def_all)

endif # __model_model_impl_mk


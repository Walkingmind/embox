# Generated by Xpand using M2Make template.

# Model implementation of 'EModel' package.

ifndef __model_model_mk
$(error \
	Do not include this file directly, include 'model.mk' instead!)
endif # __model_model_mk


# Implementation of 'ENode' model object.
define class-ENodeImpl
#	$(super ENode)
#
#	$(super ENodeImpl)
#
#	$(getter eMetaClass,$(EModel_ENode))

	# Reference 'eMetaClass' [0..1]: volatile, read-only.
	$(property eMetaClass : EMetaClass)
	# PROTECTED REGION ID(ENode_eMetaClass) ENABLED START
	#
	# Subclasses must override 'eMetaClass' getter, see above.
	#
	# PROTECTED REGION END

	# Attribute 'eResource': volatile, read-only.
	$(property eResource)
	# PROTECTED REGION ID(ENode_eResource) ENABLED START
	$(getter eResource,
		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eContainer' [0..1]: bidirectional, volatile, read-only.
	$(property eContainer : ENode)
	# PROTECTED REGION ID(ENode_eContainer) ENABLED START
	$(field __eContainer : ENode)
	$(getter eContainer,
		$(get-field __eContainer))
	# PROTECTED REGION END

	# Reference 'eRootContainer' [0..1]: volatile, read-only.
	$(property eRootContainer : ENode)
	# PROTECTED REGION ID(ENode_eRootContainer) ENABLED START
	$(getter eRootContainer,
		$(or \
			$(for container <- $(get eContainer),
				$(get container->eRootContainer)),
			$(this)))
	# PROTECTED REGION END

	# Reference 'eContents' [0..*]: bidirectional, volatile, read-only.
	$(property eContents... : ENode)
	# PROTECTED REGION ID(ENode_eContents) ENABLED START
	$(getter eContents,
		$(for metaReference <- $(get $(get eMetaClass).eAllContainments),
			$(get $(get metaReference->instanceProperty))))
	# PROTECTED REGION END

	# Reference 'eAllContents' [0..*]: volatile, read-only.
	$(property eAllContents... : ENode)
	# PROTECTED REGION ID(ENode_eAllContents) ENABLED START
	$(getter eAllContents,
		$(for child <- $(get eContents),
			$(child) $(get child->eAllContents)))
	# PROTECTED REGION END

	# Reference 'eLinks' [0..*]: bidirectional, containment, volatile, read-only.
	$(property eLinks... : ELink)
	# PROTECTED REGION ID(ENode_eLinks) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eLinks,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eResolvedLinks' [0..*]: volatile, read-only.
	$(property eResolvedLinks... : ELink)
	# PROTECTED REGION ID(ENode_eResolvedLinks) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eResolvedLinks,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eInverseResolvedLinks' [0..*]: bidirectional, volatile, read-only.
	$(property eInverseResolvedLinks... : ELink)
	# PROTECTED REGION ID(ENode_eInverseResolvedLinks) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eInverseResolvedLinks,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eUnresolvedLinks' [0..*]: volatile, read-only.
	$(property eUnresolvedLinks... : ELink)
	# PROTECTED REGION ID(ENode_eUnresolvedLinks) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eUnresolvedLinks,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eRefs' [0..*]: bidirectional, volatile, read-only.
	$(property eRefs... : ENode)
	# PROTECTED REGION ID(ENode_eRefs) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eRefs,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eInverseRefs' [0..*]: bidirectional, volatile, read-only.
	$(property eInverseRefs... : ENode)
	# PROTECTED REGION ID(ENode_eInverseRefs) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eInverseRefs,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eLinkedRefs' [0..*]: bidirectional, volatile, read-only.
	$(property eLinkedRefs... : ENode)
	# PROTECTED REGION ID(ENode_eLinkedRefs) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eLinkedRefs,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eInverseLinkedRefs' [0..*]: bidirectional, volatile, read-only.
	$(property eInverseLinkedRefs... : ENode)
	# PROTECTED REGION ID(ENode_eInverseLinkedRefs) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eInverseLinkedRefs,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eImmediateRefs' [0..*]: bidirectional, volatile, read-only.
	$(property eImmediateRefs... : ENode)
	# PROTECTED REGION ID(ENode_eImmediateRefs) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eImmediateRefs,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eInverseImmediateRefs' [0..*]: bidirectional, volatile, read-only.
	$(property eInverseImmediateRefs... : ENode)
	# PROTECTED REGION ID(ENode_eInverseImmediateRefs) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eInverseImmediateRefs,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# PROTECTED REGION ID(ENode) ENABLED START

	# '[.link].metaRef.node'
	$(field __eOppositeRefs : ENode)

	$(field unresolvedLinks : ELink)

	# Params:
	#   1. Property name.
	$(method __eGetContainer,
		$(filter $1/%,$(get-field __eContainer))
	)

	# Params:
	#   1. Property name.
	#   2. New container.
	#   3. Containment property in the container.
	$(method __eSetContainer,
		$(assert $(not $(multiword $2)))

		$(for oldContainer <- $(get-field __eContainer),
			$(set-field- oldContainer->$(notdir $(basename $(oldContainer))),
				$(this))
		)

		$(set-field __eContainer,$1/$3$2)

		$(for newContainer <- $2,
			$(set-field+ newContainer->$3,$(this))
		)
	)

	# Params:
	#   1. Property name.
	#   2. What to add.
	$(method __eAdd,
		$(set-field+ $1,$(suffix $2))
		$(silent-for e <- $2,
			$(set-field+ e->__eOppositeRefs,$1$(this)))
	)

	# Params:
	#   1. Property name.
	#   2. What to add.
	#   3. Opposite property.
	$(method __eAddContainment,
		$(silent-for e <- $2,
			$(invoke e->__eSetContainer,$3,$(this),$1))
	)

	# Params:
	#   1. Property name.
	#   2. What to add.
	#   3. Opposite property.
	$(method __eAddBidirectional,
		$(set-field+ $1,$(suffix $2))
		$(silent-for e <- $2,
			$(set-field+ e->$3,$(this)))
	)

	# Params:
	#   1. Property name.
	#   2. What to remove.
	$(method __eRemove,
		$(foreach ,$2,$(error $0: NIY))
	)

	# Params:
	#   1. Property name.
	#   2. What to remove.
	#   3. Opposite property.
	$(method __eRemoveBidirectional,
		$(foreach ,$2,$(error $0: NIY))
	)

	# Params:
	#   1. Property name.
	#   2. What to remove.
	#   3. Opposite property.
	$(method __eRemoveContainment,
		$(foreach ,$2,$(error $0: NIY))
	)

	# Params:
	#   1. Property name.
	#   2. New value.
	$(method __eSet,
		$(invoke __eRemove,$1,$(get-field $1))
		$(invoke __eAdd,$1,$2)
	)

	# Params:
	#   1. Property name.
	#   2. New value.
	#   3. Opposite property.
	$(method __eSetBidirectional,
		$(invoke __eRemoveBidirectional,$1,$(get-field $1),$3)
		$(invoke __eAddBidirectional,$1,$2,$3)
	)

	# Params:
	#   1. Property name.
	#   2. New value.
	#   3. Opposite property.
	$(method __eSetContainment,
		$(invoke __eRemoveContainment,$1,$(get-field $1),$3)
		$(invoke __eAddContainment,$1,$2,$3)
	)

	# Params:
	#   1. Meta reference.
	#   2. Link to add.
	$(method doAddLink,
#		$(assert $(not $(or $(get 1->isContainer),$(get 1->isContainment))),
#			Non cross-reference '$(get $(get 1->eContainingClass).name)
#				.$(get 1->name)' cannot be added using links)

		$(silent-for \
			f <- $(get 1->instanceProperty),

			link <- $2,

			$(or $(for dst <- $(get link->eDestination),
					$(set-field+ $f,$(link)$(dst))
					$(invoke dst->doInverseAddReference,$1,$(dst),$(link))
					$(dst)),

				$(set-field+ unresolvedLinks,$(link)))

#			$(set link->eSource,$(this))
			$(set-field link->eContainer,$(this))
		)

	)

	# Params:
	#   1. Meta reference.
	#   2. New value.
	$(method doSetLink,
		$(silent-for \
			f <- $(get 1->instanceProperty),

			$(set-field $f,
				$(for e <- $(get-field $f),
					$(if $(basename $e),
						# 'e' is '.link.node'
						$(invoke e->doInverseRemoveReference,$1,$(this)),
						$e
					)
				)
			)

		)

		$(invoke doAddLink,$1,$2)
	)

	# PROTECTED REGION END
endef

# Implementation of 'ELink' model object.
define class-ELinkImpl
	$(super ELink)

	$(super ENodeImpl)
	$(super ENamedImpl)

	$(getter eMetaClass,$(EModel_ELink))

	# Reference 'eMetaReference' [0..1].
	$(property eMetaReference : EMetaReference)
	$(field eMetaReference : EMetaReference)
	$(getter eMetaReference,
		$(get-field eMetaReference))
	$(setter eMetaReference,
		$(invoke __eSet,eMetaReference,$(suffix $1),))

	# Reference 'eSource' [0..1]: bidirectional, container.
	$(property eSource : ENode)
	$(getter eSource,
		$(invoke __eGetContainer,eSource))
	$(setter eSource,
		$(invoke __eSetBidirectional,eSource,$(suffix $1),eLinks))

	# Reference 'eDestination' [0..1]: bidirectional.
	$(property eDestination : ENode)
	$(field eDestination : ENode)
	$(getter eDestination,
		$(get-field eDestination))
	$(setter eDestination,
		$(invoke __eSetBidirectional,eDestination,$(suffix $1),eInverseResolvedLinks))

	# PROTECTED REGION ID(ELink) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaType' model object.
define class-EMetaTypeImpl
	$(super EMetaType)

	$(super ENodeImpl)
	$(super ENamedImpl)

	$(getter eMetaClass,$(EModel_EMetaType))

	# Attribute 'instanceClass'.
	$(property-field instanceClass)

	# Reference 'eMetaModel' [0..1]: bidirectional, container, read-only.
	$(property eMetaModel : EMetaModel)
	$(getter eMetaModel,
		$(invoke __eGetContainer,eMetaModel))

	# PROTECTED REGION ID(EMetaType) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaClass' model object.
define class-EMetaClassImpl
	$(super EMetaClass)

	$(super ENodeImpl)
	$(super EMetaTypeImpl)

	$(getter eMetaClass,$(EModel_EMetaClass))

	# Attribute 'abstract'.
	$(property-field isAbstract)

	# Attribute 'interface'.
	$(property-field isInterface)

	# Reference 'eSuperTypes' [0..*].
	$(property eSuperTypes... : EMetaClass)
	$(field eSuperTypes... : EMetaClass)
	$(getter eSuperTypes,
		$(get-field eSuperTypes))
	$(setter eSuperTypes,
		$(invoke __eSet,eSuperTypes,$(suffix $1),))
	$(setter+ eSuperTypes,
		$(invoke __eAdd,eSuperTypes,$(suffix $1),))
	$(setter- eSuperTypes,
		$(invoke __eRemove,eSuperTypes,$(suffix $1),))

	# Reference 'eAllSuperTypes' [0..*]: volatile, read-only.
	$(property eAllSuperTypes... : EMetaClass)
	# PROTECTED REGION ID(EMetaClass_eAllSuperTypes) ENABLED START
	$(getter eAllSuperTypes,
		# TODO inefficient.
		$(sort \
			$(foreach superType,$(get eSuperTypes),$(superType) \
				$(get superType->eAllSuperTypes))))
	# PROTECTED REGION END

	# Reference 'eFeatures' [0..*]: bidirectional, containment.
	$(property eFeatures... : EMetaFeature)
	$(field eFeatures... : EMetaFeature)
	$(getter eFeatures,
		$(get-field eFeatures))
	$(setter eFeatures,
		$(invoke __eSetContainment,eFeatures,$(suffix $1),eContainingClass))
	$(setter+ eFeatures,
		$(invoke __eAddContainment,eFeatures,$(suffix $1),eContainingClass))
	$(setter- eFeatures,
		$(invoke __eRemoveContainment,eFeatures,$(suffix $1),eContainingClass))

	# Reference 'eAllFeatures' [0..*]: volatile, read-only.
	$(property eAllFeatures... : EMetaFeature)
	# PROTECTED REGION ID(EMetaClass_eAllFeatures) ENABLED START
	$(getter eAllFeatures,
		$(sort $(get eFeatures) \
			$(foreach superType,$(get eSuperTypes),
				$(get superType->eAllFeatures))))
	# PROTECTED REGION END

	# Reference 'eAttributes' [0..*]: volatile, read-only.
	$(property eAttributes... : EMetaAttribute)
	# PROTECTED REGION ID(EMetaClass_eAttributes) ENABLED START
	$(getter eAttributes,
		$(invoke filterFeaturesByClass,$(get eFeatures),
			$(get eModelMetaModel->EMetaAttribute)))
	# PROTECTED REGION END

	# Reference 'eAllAttributes' [0..*]: volatile, read-only.
	$(property eAllAttributes... : EMetaAttribute)
	# PROTECTED REGION ID(EMetaClass_eAllAttributes) ENABLED START
	$(getter eAllAttributes,
		$(invoke filterFeaturesByClass,$(get eAllFeatures),
			$(get eModelMetaModel->EMetaAttribute)))
	# PROTECTED REGION END

	# Reference 'eReferences' [0..*]: volatile, read-only.
	$(property eReferences... : EMetaReference)
	# PROTECTED REGION ID(EMetaClass_eReferences) ENABLED START
	$(getter eReferences,
		$(invoke filterFeaturesByClass,$(get eFeatures),
			$(get eModelMetaModel->EMetaReference)))
	# PROTECTED REGION END

	# Reference 'eAllReferences' [0..*]: volatile, read-only.
	$(property eAllReferences... : EMetaReference)
	# PROTECTED REGION ID(EMetaClass_eAllReferences) ENABLED START
	$(getter eAllReferences,
		$(invoke filterFeaturesByClass,$(get eAllFeatures),
			$(get eModelMetaModel->EMetaReference)))
	# PROTECTED REGION END

	# Reference 'eAllContainments' [0..*]: volatile, read-only.
	$(property eAllContainments... : EMetaReference)
	# PROTECTED REGION ID(EMetaClass_eAllContainments) ENABLED START
	$(getter eAllContainments,
		$(foreach reference,$(get eAllReferences),
			$(if $(get reference->isContainment),$(reference))))
	# PROTECTED REGION END

	# 'isSuperTypeOf' operation.
	#   1. someClass : EMetaClass
	# PROTECTED REGION ID(EMetaClass_isSuperTypeOf) ENABLED START
	$(method isSuperTypeOf,
		$(filter $1 $(get 1->eAllSuperTypes),$(this)))
	# PROTECTED REGION END

	# 'isInstance' operation.
	#   1. object : ENode
	# PROTECTED REGION ID(EMetaClass_isInstance) ENABLED START
	$(method isInstance,
		$(invoke isSuperTypeOf,$(class $1)))
	# PROTECTED REGION END

	# PROTECTED REGION ID(EMetaClass) ENABLED START

	# Params:
	#   1. List of features.
	#   2. Meta class.
	$(method filterFeaturesByClass,
		$(foreach feature,$1,
			$(if $(invoke 2->isSuperTypeOf,$(get feature->eContainingClass)),
				$(feature)))
	)

	# PROTECTED REGION END
endef

# Implementation of 'EMetaPrimitive' model object.
define class-EMetaPrimitiveImpl
	$(super EMetaPrimitive)

	$(super ENodeImpl)
	$(super EMetaTypeImpl)

	$(getter eMetaClass,$(EModel_EMetaPrimitive))

	# PROTECTED REGION ID(EMetaPrimitive) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaFeature' model object.
define class-EMetaFeatureImpl
	$(super EMetaFeature)

	$(super ENodeImpl)
	$(super ETypedImpl)

	$(getter eMetaClass,$(EModel_EMetaFeature))

	# Attribute 'changeable'.
	$(property-field isChangeable)

	# Attribute 'volatile'.
	$(property-field isVolatile)

	# Attribute 'transient'.
	$(property-field isTransient)

	# Attribute 'derived'.
	$(property-field isDerived)

	# Attribute 'instanceProperty'.
	$(property-field instanceProperty)

	# Reference 'eContainingClass' [0..1]: bidirectional, container, read-only.
	$(property eContainingClass : EMetaClass)
	$(getter eContainingClass,
		$(invoke __eGetContainer,eContainingClass))

	# PROTECTED REGION ID(EMetaFeature) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaReference' model object.
define class-EMetaReferenceImpl
	$(super EMetaReference)

	$(super ENodeImpl)
	$(super EMetaFeatureImpl)

	$(getter eMetaClass,$(EModel_EMetaReference))

	# Attribute 'containment'.
	$(property-field isContainment)

	# Attribute 'container': volatile, read-only.
	$(property isContainer)
	# PROTECTED REGION ID(EMetaReference_isContainer) ENABLED START
	$(getter isContainer,
		$(foreach opposite,$(get eOpposite),$(get opposite->isContainment)))
	# PROTECTED REGION END

	# Reference 'eOpposite' [0..1].
	$(property eOpposite : EMetaReference)
	$(field eOpposite : EMetaReference)
	$(getter eOpposite,
		$(get-field eOpposite))
	$(setter eOpposite,
		$(invoke __eSet,eOpposite,$(suffix $1),))

	# Reference 'eReferenceType' [1..1]: volatile, read-only.
	$(property eReferenceType : EMetaClass)
	# PROTECTED REGION ID(EMetaReference_eReferenceType) ENABLED START
	$(getter eReferenceType,
		$(instance-of $(get eType),EMetaClass))
	# PROTECTED REGION END

	# PROTECTED REGION ID(EMetaReference) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaAttribute' model object.
define class-EMetaAttributeImpl
	$(super EMetaAttribute)

	$(super ENodeImpl)
	$(super EMetaFeatureImpl)

	$(getter eMetaClass,$(EModel_EMetaAttribute))

	# Reference 'eAttributeType' [1..1]: volatile, read-only.
	$(property eAttributeType : EMetaPrimitive)
	# PROTECTED REGION ID(EMetaAttribute_eAttributeType) ENABLED START
	$(getter eAttributeType,
		$(instance-of $(get eType),EMetaPrimitive))
	# PROTECTED REGION END

	# PROTECTED REGION ID(EMetaAttribute) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaModel' model object.
define class-EMetaModelImpl
	$(super EMetaModel)

	$(super ENodeImpl)
	$(super ENamedImpl)

	$(getter eMetaClass,$(EModel_EMetaModel))

	# Reference 'eFactory' [1..1]: bidirectional.
	$(property eFactory : EFactory)
	$(field eFactory : EFactory)
	$(getter eFactory,
		$(get-field eFactory))
	$(setter eFactory,
		$(invoke __eSetBidirectional,eFactory,$(suffix $1),eMetaModel))

	# Reference 'eTypes' [0..*]: bidirectional, containment.
	$(property eTypes... : EMetaType)
	$(field eTypes... : EMetaType)
	$(getter eTypes,
		$(get-field eTypes))
	$(setter eTypes,
		$(invoke __eSetContainment,eTypes,$(suffix $1),eMetaModel))
	$(setter+ eTypes,
		$(invoke __eAddContainment,eTypes,$(suffix $1),eMetaModel))
	$(setter- eTypes,
		$(invoke __eRemoveContainment,eTypes,$(suffix $1),eMetaModel))

	# PROTECTED REGION ID(EMetaModel) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EFactory' model object.
define class-EFactoryImpl
	$(super EFactory)

	$(super ENodeImpl)

	$(getter eMetaClass,$(EModel_EFactory))

	# Reference 'eMetaModel' [1..1]: bidirectional.
	$(property eMetaModel : EMetaModel)
	$(field eMetaModel : EMetaModel)
	$(getter eMetaModel,
		$(get-field eMetaModel))
	$(setter eMetaModel,
		$(invoke __eSetBidirectional,eMetaModel,$(suffix $1),eFactory))

	# PROTECTED REGION ID(EFactory) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'ENamed' model object.
define class-ENamedImpl
	$(super ENamed)

	$(super ENodeImpl)

	$(getter eMetaClass,$(EModel_ENamed))

	# Attribute 'name'.
	$(property-field name)

	# PROTECTED REGION ID(ENamed) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'ETyped' model object.
define class-ETypedImpl
	$(super ETyped)

	$(super ENodeImpl)
	$(super ENamedImpl)

	$(getter eMetaClass,$(EModel_ETyped))

	# Attribute 'lowerBound'.
	$(property-field lowerBound)

	# Attribute 'upperBound'.
	$(property-field upperBound)

	# Attribute 'many': volatile, read-only.
	$(property isMany)
	# PROTECTED REGION ID(ETyped_isMany) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter isMany,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eType' [0..1].
	$(property eType : EMetaType)
	$(field eType : EMetaType)
	$(getter eType,
		$(get-field eType))
	$(setter eType,
		$(invoke __eSet,eType,$(suffix $1),))

	# PROTECTED REGION ID(ETyped) ENABLED START
	# PROTECTED REGION END
endef

$(def_all)


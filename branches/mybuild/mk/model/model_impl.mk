# Generated by Xpand using M2Make template.

# Model implementation of 'EModel' package.

ifndef __model_model_mk
$(error \
	Do not include this file directly, include 'model.mk' instead!)
endif # __model_model_mk

# Implementation of 'ENode' model object.
define class-ENodeImpl
#	$(super ENode)
#
#	$(super ENodeImpl)
#
#	$(getter eMetaClass,$(get eModelMetaModel->ENode))

	# Reference 'eMetaClass' [0..1]: volatile, read-only.
	$(property eMetaClass : EMetaClass)
	# PROTECTED REGION ID(ENode_eMetaClass) ENABLED START
	#
	# Subclasses must override 'eMetaClass' getter, see above.
	#
	# PROTECTED REGION END

	# Attribute 'eResource': volatile, read-only.
	$(property eResource)
	# PROTECTED REGION ID(ENode_eResource) ENABLED START
	$(getter eResource,
		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eContainer' [0..1]: bidirectional, volatile, read-only.
	$(property eContainer : ENode)
	# PROTECTED REGION ID(ENode_eContainer) ENABLED START
	$(field eContainer)
	$(getter eContainer,
		$(get-field eContainer))
	# PROTECTED REGION END

	# Reference 'eRootContainer' [0..1]: volatile, read-only.
	$(property eRootContainer : ENode)
	# PROTECTED REGION ID(ENode_eRootContainer) ENABLED START
	$(getter eRootContainer,
		$(or \
			$(for container <- $(get eContainer),
				$(get container->eRootContainer)),
			$(this)))
	# PROTECTED REGION END

	# Reference 'eContents' [0..*]: bidirectional, volatile, read-only.
	$(property eContents... : ENode)
	# PROTECTED REGION ID(ENode_eContents) ENABLED START
	$(getter eContents,
		$(for metaReference <- $(get $(get eMetaClass).eAllContainments),
			$(get $(get metaReference->instanceProperty))))
	# PROTECTED REGION END

	# Reference 'eAllContents' [0..*]: volatile, read-only.
	$(property eAllContents... : ENode)
	# PROTECTED REGION ID(ENode_eAllContents) ENABLED START
	$(getter eAllContents,
		$(for child <- $(get eContents),
			$(child) $(get child->eAllContents)))
	# PROTECTED REGION END

	# Reference 'eLinks' [0..*]: bidirectional, containment, volatile, read-only.
	$(property eLinks... : ELink)
	# PROTECTED REGION ID(ENode_eLinks) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eLinks,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eResolvedLinks' [0..*]: volatile, read-only.
	$(property eResolvedLinks... : ELink)
	# PROTECTED REGION ID(ENode_eResolvedLinks) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eResolvedLinks,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eInverseResolvedLinks' [0..*]: bidirectional, volatile, read-only.
	$(property eInverseResolvedLinks... : ELink)
	# PROTECTED REGION ID(ENode_eInverseResolvedLinks) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eInverseResolvedLinks,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eUnresolvedLinks' [0..*]: volatile, read-only.
	$(property eUnresolvedLinks... : ELink)
	# PROTECTED REGION ID(ENode_eUnresolvedLinks) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eUnresolvedLinks,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eRefs' [0..*]: bidirectional, volatile, read-only.
	$(property eRefs... : ENode)
	# PROTECTED REGION ID(ENode_eRefs) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eRefs,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eInverseRefs' [0..*]: bidirectional, volatile, read-only.
	$(property eInverseRefs... : ENode)
	# PROTECTED REGION ID(ENode_eInverseRefs) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eInverseRefs,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eLinkedRefs' [0..*]: bidirectional, volatile, read-only.
	$(property eLinkedRefs... : ENode)
	# PROTECTED REGION ID(ENode_eLinkedRefs) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eLinkedRefs,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eInverseLinkedRefs' [0..*]: bidirectional, volatile, read-only.
	$(property eInverseLinkedRefs... : ENode)
	# PROTECTED REGION ID(ENode_eInverseLinkedRefs) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eInverseLinkedRefs,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eImmediateRefs' [0..*]: bidirectional, volatile, read-only.
	$(property eImmediateRefs... : ENode)
	# PROTECTED REGION ID(ENode_eImmediateRefs) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eImmediateRefs,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eInverseImmediateRefs' [0..*]: bidirectional, volatile, read-only.
	$(property eInverseImmediateRefs... : ENode)
	# PROTECTED REGION ID(ENode_eInverseImmediateRefs) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eInverseImmediateRefs,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# PROTECTED REGION ID(ENode) ENABLED START

	$(field oppositeReferences : ENode)

	# Params:
	#   1. Meta reference.
	$(method doGetContainerReference,
		$(get-field eContainer)
	)

	# Params:
	#   1. Meta reference.
	#   2. What to add.
	$(method doAddReference,
#		$(assert $(invoke $(get 1->eContainingClass).isSuperTypeOf,
#				$(get eMetaClass)),
#			Bad cast '$(get $(get eMetaClass).name)' \
#			to '$(get $(get 1->eContainingClass).name)')

		$(assert $(not $(get 1->isContainer)),
			Container reference '$(get $(get 1->eContainingClass).name)
				.$(get 1->name)' must be set using 'doSetContainerReference')

		$(silent-for \
			f <- $(get 1->instanceProperty),

			e <- $2
				$(set-field+ $f,$2),

			$(invoke e->doInverseAddReference,$1,$(this))
		)

	)

	# Params:
	#   1. Meta reference.
	#   2. New value.
	$(method doSetReference,
		$(silent-for \
			f <- $(get 1->instanceProperty),

			e <- $(get-field $f)
				 $(set-field $f,),

			$(invoke e->doInverseRemoveReference,$1,$(this))
		)

		$(invoke doAddReference,$1,$2)
	)

	# Params:
	#   1. Meta reference.
	#   2. A single node being added.
	$(method doInverseAddReference,
		$(set-field+ \
			$(or $(for r <- $(get 1->eOpposite),$(get r->instanceProperty)),
				oppositeReferences),
			$2)
	)

	# PROTECTED REGION END
endef

# Implementation of 'ELink' model object.
define class-ELinkImpl
	$(super ELink)

	$(super ENodeImpl)
	$(super ENamedImpl)

	$(getter eMetaClass,$(get eModelMetaModel->ELink))

	# Reference 'eMetaReference' [0..1].
	$(property eMetaReference : EMetaReference)
	$(field eMetaReference : EMetaReference)
	$(getter eMetaReference,
		$(get-field eMetaReference))
	$(setter eMetaReference,
		$(invoke doSetReference,$(get eModelMetaModel->ELink_eMetaReference),$1))

	# Reference 'eSource' [0..1]: bidirectional, container, volatile, read-only.
	$(property eSource : ENode)
	# PROTECTED REGION ID(ELink_eSource) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eSource,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eDestination' [0..1]: bidirectional, volatile, read-only.
	$(property eDestination : ENode)
	# PROTECTED REGION ID(ELink_eDestination) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter eDestination,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# PROTECTED REGION ID(ELink) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaType' model object.
define class-EMetaTypeImpl
	$(super EMetaType)

	$(super ENodeImpl)
	$(super ENamedImpl)

	$(getter eMetaClass,$(get eModelMetaModel->EMetaType))

	# Attribute 'instanceClass'.
	$(property-field instanceClass)

	# Reference 'eMetaModel' [0..1]: bidirectional, container, read-only.
	$(property eMetaModel : EMetaModel)
	$(getter eMetaModel,
		$(invoke doGetContainerReference,$(get eModelMetaModel->EMetaType_eMetaModel)))

	# PROTECTED REGION ID(EMetaType) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaClass' model object.
define class-EMetaClassImpl
	$(super EMetaClass)

	$(super ENodeImpl)
	$(super EMetaTypeImpl)

	$(getter eMetaClass,$(get eModelMetaModel->EMetaClass))

	# Attribute 'abstract'.
	$(property-field isAbstract)

	# Attribute 'interface'.
	$(property-field isInterface)

	# Reference 'eSuperTypes' [0..*].
	$(property eSuperTypes... : EMetaClass)
	$(field eSuperTypes... : EMetaClass)
	$(getter eSuperTypes,
		$(get-field eSuperTypes))
	$(setter eSuperTypes,
		$(invoke doSetReference,$(get eModelMetaModel->EMetaClass_eSuperTypes),$1))
	$(setter+ eSuperTypes,
		$(invoke doAddReference,$(get eModelMetaModel->EMetaClass_eSuperTypes),$1))
	$(setter- eSuperTypes,
		$(invoke doRemoveReference,$(get eModelMetaModel->EMetaClass_eSuperTypes),$1))

	# Reference 'eAllSuperTypes' [0..*]: volatile, read-only.
	$(property eAllSuperTypes... : EMetaClass)
	# PROTECTED REGION ID(EMetaClass_eAllSuperTypes) ENABLED START
	$(getter eAllSuperTypes,
		# TODO inefficient.
		$(sort \
			$(foreach superType,$(get eSuperTypes),$(superType) \
				$(get superType->eAllSuperTypes))))
	# PROTECTED REGION END

	# Reference 'eFeatures' [0..*]: bidirectional, containment.
	$(property eFeatures... : EMetaFeature)
	$(field eFeatures... : EMetaFeature)
	$(getter eFeatures,
		$(get-field eFeatures))
	$(setter eFeatures,
		$(invoke doSetReference,$(get eModelMetaModel->EMetaClass_eFeatures),$1))
	$(setter+ eFeatures,
		$(set-field+ eFeatures,$1)
		$(silent-for e <- $1,$(set-field e->eContainer,$(this)))
#		$(invoke doAddReference,$(get eModelMetaModel->EMetaClass_eFeatures),$1)
	)
	$(setter- eFeatures,
		$(invoke doRemoveReference,$(get eModelMetaModel->EMetaClass_eFeatures),$1))

	# Reference 'eAllFeatures' [0..*]: volatile, read-only.
	$(property eAllFeatures... : EMetaFeature)
	# PROTECTED REGION ID(EMetaClass_eAllFeatures) ENABLED START
	$(getter eAllFeatures,
		$(sort $(get eFeatures) \
			$(foreach superType,$(get eSuperTypes),
				$(get superType->eAllFeatures))))
	# PROTECTED REGION END

	# Reference 'eAttributes' [0..*]: volatile, read-only.
	$(property eAttributes... : EMetaAttribute)
	# PROTECTED REGION ID(EMetaClass_eAttributes) ENABLED START
	$(getter eAttributes,
		$(invoke filterFeaturesByClass,$(get eFeatures),
			$(get eModelMetaModel->EMetaAttribute)))
	# PROTECTED REGION END

	# Reference 'eAllAttributes' [0..*]: volatile, read-only.
	$(property eAllAttributes... : EMetaAttribute)
	# PROTECTED REGION ID(EMetaClass_eAllAttributes) ENABLED START
	$(getter eAllAttributes,
		$(invoke filterFeaturesByClass,$(get eAllFeatures),
			$(get eModelMetaModel->EMetaAttribute)))
	# PROTECTED REGION END

	# Reference 'eReferences' [0..*]: volatile, read-only.
	$(property eReferences... : EMetaReference)
	# PROTECTED REGION ID(EMetaClass_eReferences) ENABLED START
	$(getter eReferences,
		$(invoke filterFeaturesByClass,$(get eFeatures),
			$(get eModelMetaModel->EMetaReference)))
	# PROTECTED REGION END

	# Reference 'eAllReferences' [0..*]: volatile, read-only.
	$(property eAllReferences... : EMetaReference)
	# PROTECTED REGION ID(EMetaClass_eAllReferences) ENABLED START
	$(getter eAllReferences,
		$(invoke filterFeaturesByClass,$(get eAllFeatures),
			$(get eModelMetaModel->EMetaReference)))
	# PROTECTED REGION END

	# Reference 'eAllContainments' [0..*]: volatile, read-only.
	$(property eAllContainments... : EMetaReference)
	# PROTECTED REGION ID(EMetaClass_eAllContainments) ENABLED START
	$(getter eAllContainments,
		$(foreach reference,$(get eAllReferences),
			$(if $(get reference->isContainment),$(reference))))
	# PROTECTED REGION END

	# 'isSuperTypeOf' operation.
	#   1. someClass : EMetaClass
	# PROTECTED REGION ID(EMetaClass_isSuperTypeOf) ENABLED START
	$(method isSuperTypeOf,
		$(filter $1 $(get 1->eAllSuperTypes),$(this)))
	# PROTECTED REGION END

	# 'isInstance' operation.
	#   1. object : ENode
	# PROTECTED REGION ID(EMetaClass_isInstance) ENABLED START
	$(method isInstance,
		$(invoke isSuperTypeOf,$(class $1)))
	# PROTECTED REGION END

	# PROTECTED REGION ID(EMetaClass) ENABLED START

	# Params:
	#   1. List of features.
	#   2. Meta class.
	$(method filterFeaturesByClass,
		$(foreach feature,$1,
			$(if $(invoke 2->isSuperTypeOf,$(get feature->eContainingClass)),
				$(feature)))
	)

	# PROTECTED REGION END
endef

# Implementation of 'EMetaPrimitive' model object.
define class-EMetaPrimitiveImpl
	$(super EMetaPrimitive)

	$(super ENodeImpl)
	$(super EMetaTypeImpl)

	$(getter eMetaClass,$(get eModelMetaModel->EMetaPrimitive))

	# PROTECTED REGION ID(EMetaPrimitive) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaFeature' model object.
define class-EMetaFeatureImpl
	$(super EMetaFeature)

	$(super ENodeImpl)
	$(super ETypedImpl)

	$(getter eMetaClass,$(get eModelMetaModel->EMetaFeature))

	# Attribute 'changeable'.
	$(property-field isChangeable)

	# Attribute 'volatile'.
	$(property-field isVolatile)

	# Attribute 'transient'.
	$(property-field isTransient)

	# Attribute 'derived'.
	$(property-field isDerived)

	# Attribute 'instanceProperty'.
	$(property-field instanceProperty)

	# Reference 'eContainingClass' [0..1]: bidirectional, container, read-only.
	$(property eContainingClass : EMetaClass)
	$(getter eContainingClass,
		$(invoke doGetContainerReference,$(get eModelMetaModel->EMetaFeature_eContainingClass)))

	# PROTECTED REGION ID(EMetaFeature) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaReference' model object.
define class-EMetaReferenceImpl
	$(super EMetaReference)

	$(super ENodeImpl)
	$(super EMetaFeatureImpl)

	$(getter eMetaClass,$(get eModelMetaModel->EMetaReference))

	# Attribute 'containment'.
	$(property-field isContainment)

	# Attribute 'container': volatile, read-only.
	$(property isContainer)
	# PROTECTED REGION ID(EMetaReference_container) ENABLED START
	$(getter isContainer,
		$(foreach opposite,$(get eOpposite),$(get opposite->isContainment)))
	# PROTECTED REGION END

	# Reference 'eOpposite' [0..1].
	$(property eOpposite : EMetaReference)
	$(field eOpposite : EMetaReference)
	$(getter eOpposite,
		$(get-field eOpposite))
	$(setter eOpposite,
		$(invoke doSetReference,$(get eModelMetaModel->EMetaReference_eOpposite),$1))

	# Reference 'eReferenceType' [1..1]: volatile, read-only.
	$(property eReferenceType : EMetaClass)
	# PROTECTED REGION ID(EMetaReference_eReferenceType) ENABLED START
	$(getter eReferenceType,
		$(instance-of $(get eType),EMetaClass))
	# PROTECTED REGION END

	# PROTECTED REGION ID(EMetaReference) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaAttribute' model object.
define class-EMetaAttributeImpl
	$(super EMetaAttribute)

	$(super ENodeImpl)
	$(super EMetaFeatureImpl)

	$(getter eMetaClass,$(get eModelMetaModel->EMetaAttribute))

	# Reference 'eAttributeType' [1..1]: volatile, read-only.
	$(property eAttributeType : EMetaPrimitive)
	# PROTECTED REGION ID(EMetaAttribute_eAttributeType) ENABLED START
	$(getter eAttributeType,
		$(instance-of $(get eType),EMetaPrimitive))
	# PROTECTED REGION END

	# PROTECTED REGION ID(EMetaAttribute) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'EMetaModel' model object.
define class-EMetaModelImpl
	$(super EMetaModel)

	$(super ENodeImpl)
	$(super ENamedImpl)

	$(getter eMetaClass,$(get eModelMetaModel->EMetaModel))

	# Reference 'eFactory' [1..1]: bidirectional.
	$(property eFactory : EFactory)
	$(field eFactory : EFactory)
	$(getter eFactory,
		$(get-field eFactory))
	$(setter eFactory,
		$(invoke doSetReference,$(get eModelMetaModel->EMetaModel_eFactory),$1))

	# Reference 'eTypes' [0..*]: bidirectional, containment.
	$(property eTypes... : EMetaType)
	$(field eTypes... : EMetaType)
	$(getter eTypes,
		$(get-field eTypes))
	$(setter eTypes,
		$(invoke doSetReference,$(get eModelMetaModel->EMetaModel_eTypes),$1))
	$(setter+ eTypes,
		$(invoke doAddReference,$(get eModelMetaModel->EMetaModel_eTypes),$1))
	$(setter- eTypes,
		$(invoke doRemoveReference,$(get eModelMetaModel->EMetaModel_eTypes),$1))

	# PROTECTED REGION ID(EMetaModel) ENABLED START

	#
	# Meta object instantiation.
	#

	# Params:
	#   1. Meta class ID (unused).
	$(method createMetaClass,
		$(invoke eModelFactory->createEMetaClass))

	# Params:
	#   1. Meta class.
	#   2. Meta feature ID (unused).
	$(method createMetaAttribute,
		$(invoke addMetaFeatureToClass,$1,
			$(invoke eModelFactory->createEMetaAttribute)))

	# Params:
	#   1. Meta class.
	#   2. Meta feature ID (unused).
	$(method createMetaReference,
		$(invoke addMetaFeatureToClass,$1,
			$(invoke eModelFactory->createEMetaReference)))

	# Params:
	#   1. Meta class.
	#   2. New meta feature.
	# Return:
	#   The second argument.
	$(method addMetaFeatureToClass,
		$(set+ 1->eFeatures,$2)
		$2)

	#
	# Objects initialization.
	#

	# Params:
	#   1. Meta class.
	#   2. Name.
	#   3. Super types...
	#   4. Flags...
	$(method initMetaClass,
#		$(set 1->name,$2)
		$(set 1->eSuperTypes,$3)
		$(set 1->isAbstract,$(filter abstract,$4))
		$(set 1->isInterface,$(filter interface,$4))
	)

	# Params:
	#   1. Meta attribute.
	#   2. Name.
	#   3. Lower bound.
	#   4. Upper bound.
	#   5. Flags...
	$(method initMetaAttribute,
		$(invoke commonInitMetaFeature,$1,$2,$3,$4,$5))

	# Params:
	#   1. Meta reference.
	#   2. Name.
	#   3. Lower bound.
	#   4. Upper bound.
	#   5. Referenced class.
	#   6. Opposite reference (if any).
	#   7. Flags...
	$(method initMetaReference,
		$(invoke commonInitMetaFeature,$1,$2,$3,$4,$7)
		$(set 1->eType,$5)
		$(set 1->eOpposite,$6)
		$(set 1->isContainment,$(filter containment,$7))
#		$(set 1->isContainer,$(filter container,$7))
	)

	# Params:
	#   1. Meta feature.
	#   2. Name.
	#   3. Lower bound.
	#   4. Upper bound.
	#   5. Flags...
	$(method commonInitMetaFeature,
#		$(set 1->name,$2)
		$(set 1->lowerBound,$3)
		$(set 1->upperBound,$4)
		$(set 1->isChangeable,$(filter changeable,$4))
		$(set 1->isDerived,$(filter derived,$4))
		$(set 1->isVolatile,$(filter volatile,$4))
		$(set 1->isTransient,$(filter transient,$4))
	)

	#
	# Binding to native class/properties.
	#

	# Params:
	#   1. Meta class.
	#   2. Instance class name.
	$(method bindMetaClass,
		$(assert $(class-exists $2),
			Can't bind meta type '$(get 1->name)' to undefined class '$2')
		$(set 1->instanceClass,$2)
	)

	# Params:
	#   1. Meta feature.
	#   2. Instance property name.
	$(method bindMetaFeature,
		$(assert $(class-has-property $(get 1->instanceClass),$2),
			Can't bind meta feature '$(get 1->name)' to undefined property '$2'
			of class '$(get 1->instanceClass)')
		$(set 1->instanceProperty,$2)
	)

	# PROTECTED REGION END
endef

# Implementation of 'EFactory' model object.
define class-EFactoryImpl
	$(super EFactory)

	$(super ENodeImpl)

	$(getter eMetaClass,$(get eModelMetaModel->EFactory))

	# Reference 'eMetaModel' [1..1]: bidirectional.
	$(property eMetaModel : EMetaModel)
	$(field eMetaModel : EMetaModel)
	$(getter eMetaModel,
		$(get-field eMetaModel))
	$(setter eMetaModel,
		$(invoke doSetReference,$(get eModelMetaModel->EFactory_eMetaModel),$1))

	# PROTECTED REGION ID(EFactory) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'ENamed' model object.
define class-ENamedImpl
	$(super ENamed)

	$(super ENodeImpl)

	$(getter eMetaClass,$(get eModelMetaModel->ENamed))

	# Attribute 'name'.
	$(property-field name)

	# PROTECTED REGION ID(ENamed) ENABLED START
	# PROTECTED REGION END
endef

# Implementation of 'ETyped' model object.
define class-ETypedImpl
	$(super ETyped)

	$(super ENodeImpl)
	$(super ENamedImpl)

	$(getter eMetaClass,$(get eModelMetaModel->ETyped))

	# Attribute 'lowerBound'.
	$(property-field lowerBound)

	# Attribute 'upperBound'.
	$(property-field upperBound)

	# Attribute 'many': volatile, read-only.
	$(property isMany)
	# PROTECTED REGION ID(ETyped_many) ENABLED START
#	# TODO Uncomment and implement me.
#	$(getter isMany,
#		$(error $0: NIY))
	# PROTECTED REGION END

	# Reference 'eType' [0..1].
	$(property eType : EMetaType)
	$(field eType : EMetaType)
	$(getter eType,
		$(get-field eType))
	$(setter eType,
		$(invoke doSetReference,$(get eModelMetaModel->ETyped_eType),$1))

	# PROTECTED REGION ID(ETyped) ENABLED START
	# PROTECTED REGION END
endef

$(def_all)


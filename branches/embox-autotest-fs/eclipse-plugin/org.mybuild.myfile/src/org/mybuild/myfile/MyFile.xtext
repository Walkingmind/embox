/**
 * MyBuild file grammar.
 * Version: 0.4
 * 
 * Author: Eldar Abusalimov
 */
grammar org.mybuild.myfile.MyFile with org.eclipse.xtext.common.Terminals

import "http://www.mybuild.org/MyFile"

Model:
	package=Package? imports+=Import* types+=Type*;

Package:
	'package' name=QualifiedName;

Import:
	'import' importedNamespace=QualifiedNameWithWildcard;

Type:
	(AnnotationType | Module | Interface);

AnnotationType:
	annotations+=Annotation*
	'annotation' name=ID
	'{' elements+=Property* '}';

Annotation:
	'@' type=[AnnotationType|QualifiedName]
	('(' (singleValue=Value |
	elements+=PropertyValueBinding (','
	elements+=PropertyValueBinding)*) ')')?;

PropertyValueBinding:
	property=[Property] '=' value=Value;

Interface:
	annotations+=Annotation*
	'interface' name=ID ('extends' superType=[Interface|QualifiedName])?
	'{' features+=Feature* '}';

Feature:
	annotations+=Annotation*
	'feature' name=ID ('extends' superType=[Feature|QualifiedNameWithWildcard])?;

Module:
	annotations+=Annotation*
	(static?='static'? & abstract?='abstract'?)
	'module' name=ID ('extends' superType=[Module|QualifiedName])?
	'{' members+=Member* '}';

Member:
	({DependsMember} annotations+=Annotation* 'depends'
	modules+=[Module|QualifiedName] (','
	modules+=[Module|QualifiedName])*
	|
	({RequiresMember} annotations+=Annotation* 'requires'
	| {ProvidesMember} annotations+=Annotation* 'provides')
	features+=[Feature|QualifiedNameWithWildcard] (','
	features+=[Feature|QualifiedNameWithWildcard])*
	|
	({SourceMember} annotations+=Annotation* 'source'
	| {ObjectMember} annotations+=Annotation* 'object')
	files+=FileName (','
	files+=FileName)*
	|
	{OptionMember} annotations+=Annotation* 'option'
	property=Property);

FileName:
	value=STRING;

Property:
	({StringProperty} 'string'
	| {NumberProperty} 'number'
	| {BooleanProperty} 'boolean')
	name=ID
	('=' defaultValue=Value)?;

Value:
	StringLiteral | NumberLiteral | BooleanLiteral | TypeLiteral;

StringLiteral:
	value=STRING;

NumberLiteral:
	value=INT;

BooleanLiteral:
	{BooleanLiteral} ('false' | isTrue?='true');

TypeLiteral:
	value=[Type];

QualifiedName:
	ID ('.' ID)*;

QualifiedNameWithWildcard:
	QualifiedName '.*'?;

terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'''" ( ( "'" ? "'" )? (!('\\'|"'") | '\\' ('\\'|"'")) )* "'''"
		; 

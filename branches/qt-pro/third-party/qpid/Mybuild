package third_party.qpid

@BuildArtifactPath(cppflags="-I$(abspath $(ROOT_DIR))/build/qpid/include/qpid -I$(abspath $(ROOT_DIR))/build/qpid/include", 
		ldflags="-L$(abspath $(ROOT_DIR))/build/qpid/lib")
@Build(script="$(MAKE) -C $(THIRDPARTY_DIR)/qpid MAKEFLAGS= EMBOX_ARCH='$(ARCH)' EMBOX_CROSS_COMPILE='$(CROSS_COMPILE)' EMBOX_MAKEFLAGS='$(MAKEFLAGS)' ROOT_DIR=$(abspath $(ROOT_DIR)) EMBOX_CFLAGS='$(CFLAGS)' EMBOX_CXXFLAGS='$(CXXFLAGS)' EMBOX_CPPFLAGS='$(EMBOX_EXPORT_CPPFLAGS)'")
@BuildDepends(third_party.boost.core)
@BuildDepends(third_party.e2fsprogs.core)
static module core {
	@AddPrefix("../../../../qpid/lib")
	source "libqmf.a", "libqmf2.a", "libqmfconsole.a",
		"libqmfengine.a", "libqpidclient.a", "libqpidcommon.a",
		"libqpidmessaging.a", "libqpidtypes.a"
	source "order.mk" // FIXME

	@NoRuntime depends embox.lib.LibC
	@NoRuntime depends third_party.boost.core
	@NoRuntime depends third_party.e2fsprogs.core
	@NoRuntime depends embox.compat.posix.idx.poll
	@NoRuntime depends embox.compat.posix.idx.select
	@NoRuntime depends embox.compat.posix.proc.fork
	@NoRuntime depends embox.compat.posix.idx.pipe
	@NoRuntime depends embox.compat.posix.util.utsname
	@NoRuntime depends embox.compat.posix.util.sleep
	@NoRuntime depends embox.compat.posix.util.gethostname
	@NoRuntime depends embox.compat.posix.fs.fsop
	@NoRuntime depends embox.net.lib.getifaddrs
	@NoRuntime depends embox.compat.posix.net.socket
	@NoRuntime depends embox.compat.posix.net.gai_strerror
	@NoRuntime depends embox.compat.posix.net.getaddrinfo
	@NoRuntime depends embox.compat.posix.net.getnameinfo
}

module hello extends embox.lib.cxx.app {
	@NoRuntime depends core
	
	@IncludePathBefore("$(ROOT_DIR)/build/stlport/include/stlport")
	@IncludePath("$(ROOT_DIR)/third-party/STLport/include")
	@IncludePath("$(ROOT_DIR)/build/qpid/include")
	source "../../../../qpid/src/qpid/examples/messaging/hello_world.cpp"
	
	source "order.mk"
}

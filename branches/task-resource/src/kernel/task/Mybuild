package embox.kernel.task

@DefaultImpl(single)
abstract module api {
}

module task_resource {
	source "task_resource.c", "task_resource.lds.S"

	@NoRuntime depends embox.lib.LibCAssert
	@NoRuntime depends embox.util.Array
}

module task_init {
	source "task_init.c"

	depends task_resource
}

module single extends api {
	source "single.c"
	depends kernel_task


	depends task_resource
	depends embox.kernel.thread.current.api
	depends embox.kernel.sched.strategy.api
	depends task_thread_api
}

module multi extends api {
	source "multi.c"
	depends kernel_task

	option number tasks_quantity = 20

	depends task_init
	depends task_resource
	depends embox.util.idx_table

	/* uses task_self() to initialize resources, which implies
	   to thread be already loaded, as task_self uses thread_self
	   to determine current thread
	*/
	depends embox.kernel.thread.core
	depends task_thread_api
	depends task_key_table
}

@DefaultImpl(NoThread)
abstract module task_thread_api {
}

module NoThread extends task_thread_api {
	depends task_no_thread_key
}

module MultiThread extends task_thread_api {
	source "multi_thread.c"
	@NoRuntime depends task_key_table
}

module kernel_task {
	source "kernel_task.c"
	source "task_alloc_onstack.c"

	depends task_init
	depends task_resource
	depends task_thread_api
	depends embox.util.DList

}

@DefaultImpl(task_thread_key)
abstract module task_key_table {

}

module task_no_thread_key extends task_key_table {
	source "task_no_thread_key.h"
}

module task_thread_key extends task_key_table {
	option number keys_quantity = 0x40

	source "task_thread_key.h"
	source "task_thread_key.c"

	@NoRuntime depends embox.util.indexator
}

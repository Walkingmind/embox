package embox.kernel.thread

@DefaultImpl(NoThreads)
abstract module thread_mode {

}

module NoThreads extends thread_mode {

}

module core extends thread_mode {
	option number thread_stack_size=8192
	option number thread_pool_size=16

	source "core.c"
	source "thread_allocator.c"
	source "thread_register.c"

	depends starter

	@NoRuntime depends embox.kernel.sched.sched
	@NoRuntime depends embox.arch.context


	@NoRuntime depends stack_api
	@NoRuntime depends thread_local
	@NoRuntime depends thread_cancel	
	@NoRuntime depends signal_api
	
	@NoRuntime depends embox.lib.LibCAssert

	depends embox.kernel.cpu.common
}

module starter {
	source "starter.c"
	depends embox.kernel.task.kernel_task 
	@NoRuntime depends boot_thread
	depends idle_thread
	depends embox.kernel.time.jiffies
}

module boot_thread {
	source "boot_thread.c"
	@NoRuntime depends embox.kernel.task.kernel_task
}

module idle_thread {
	source "idle_thread.c"
	@NoRuntime depends core
	//depends thread_local // FIXME
	depends embox.kernel.cpu.common
	@NoRuntime depends embox.kernel.task.kernel_task
}

@DefaultImpl(signal)
abstract module signal_api { }

module signal_stub extends signal_api {
	source "signal_stub.c"
	@NoRuntime depends embox.kernel.thread.signal.sigstate_stub
	@NoRuntime depends embox.kernel.thread.signal.siginfoq_stub
	@NoRuntime depends embox.kernel.thread.signal.lock_stub
}

module signal extends signal_api {
	source "signal.c"
	@NoRuntime depends embox.kernel.thread.signal.sigstate
	@NoRuntime depends embox.kernel.thread.signal.siginfoq
	@NoRuntime depends embox.kernel.thread.signal.lock
	depends embox.kernel.task.resource.sig_table
}

@DefaultImpl(fixed_stack)
abstract module stack_api {
}

module stack_none extends stack_api {
	source "stack_none.h"
}

module fixed_stack extends stack_api {
	source "fixed_stack.c"
	source "fixed_stack.h"
}

@DefaultImpl(thread_local_none)
abstract module thread_local {
	option number thread_key_quantity=0x40
}

module thread_local_none extends thread_local {
	source "thread_local_none.h"
}

module thread_local_heap extends thread_local {
	source "thread_local_heap.c"
	source "thread_local_heap.h"

	depends embox.mem.heap_api

	depends embox.kernel.task.resource.thread_key_table
	depends embox.kernel.task.syslib.thread_key_table
}
@DefaultImpl(thread_cancel_disable)
abstract module thread_cancel {}

module thread_cancel_enable extends thread_cancel {
	source "thread_cancel_enable.h"
	source "thread_cancel_enable.c"
	option number cleanups_quantity=100
}

module thread_cancel_disable extends thread_cancel {
	source "thread_cancel_disable.h"
}

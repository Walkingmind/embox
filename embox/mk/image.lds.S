/* $Id$ */

#include <asm-generic/embox.lds.h>

PHDRS {
	text     PT_LOAD  FLAGS(5);  /* R_E */
	rodata   PT_LOAD  FLAGS(5);  /* R_E */
	data     PT_LOAD  FLAGS(6);  /* RW_ */
	bss      PT_LOAD  FLAGS(6);  /* RW_ */
}

SECTION_SYMBOLS(text)
SECTION_SYMBOLS(rodata)
SECTION_SYMBOLS(data)
SECTION_SYMBOLS(bss)

SECTIONS {
	.text : {
		REGION_ALIGN();

		*(.text)
		*(.text.*)

	} SECTION_REGION(text) :text

	.rodata : {
		REGION_ALIGN();

		*(.rodata)
		*(.rodata.*)
		*(.const)

		_ctors_start = .;
		KEEP(*(.init_array))
		KEEP(*(.ctors))
		KEEP(*(.ctors.*))
		_ctors_end   = .;

		/*_eh_frame_start = .;*/
		__EH_FRAME_BEGIN__ = .;
		KEEP(*(.eh_frame))
		/*KEEP(*(.eh_frame.*))*/
		/*KEEP(*(.gcc_except_table))*/

		ALIGNMENT();
		*(.checksum)

	} SECTION_REGION(rodata) :rodata

	.data : {
		REGION_ALIGN();

		*(.data)
		*(.sdata)
		*(.data.*)
		*(.got)
		*(.got.*)

	} SECTION_REGION(data) :data

	.bss : {
		REGION_ALIGN();

		*(.bss)
		*(.sbss)
//		*(.bss.*)

		ALIGNMENT();
		_bss_end = .;
		/* Reserve (no need to zero on startup) */

		*(.bss.reserve)
		*(.bss.reserve.*)

		ALIGNMENT();
		_reserve_end = .;
	} SECTION_REGION(bss) :bss

	_bss_len = _bss_end - _bss_vma;
	_bss_len_with_reserve = SIZEOF(.bss);

	/DISCARD/ : {
		*(.comment)
		*(.note.*)
	}
}

# Generated by GOLD Parser Builder using Mybuild program template.

# Symbol constructors for 'MyFile' grammar.

include mk/mybuild/common-symbols.mk

#
# Optimized contructors for constant terminals (i.e. keywords and punctuation).
#

$(gold_grammar)_create-LParan           := ( 
$(gold_grammar)_create-RParan           := ) 
$(gold_grammar)_create-Comma            := ,
$(gold_grammar)_create-Dot              := .
$(gold_grammar)_create-DotTimes         := .*
$(gold_grammar)_create-Colon            := :
$(gold_grammar)_create-LBrace           := {
$(gold_grammar)_create-RBrace           := }
$(gold_grammar)_create-Eq               := =
$(gold_grammar)_create-At               := @
$(gold_grammar)_create-abstract         := abstract
$(gold_grammar)_create-annotation       := annotation
$(gold_grammar)_create-boolean          := boolean
$(gold_grammar)_create-depends          := depends
$(gold_grammar)_create-extends          := extends
$(gold_grammar)_create-feature          := feature
$(gold_grammar)_create-import           := import
$(gold_grammar)_create-interface        := interface
$(gold_grammar)_create-module           := module
$(gold_grammar)_create-number           := number
$(gold_grammar)_create-object           := object
$(gold_grammar)_create-option           := option
$(gold_grammar)_create-package          := package
$(gold_grammar)_create-provides         := provides
$(gold_grammar)_create-requires         := requires
$(gold_grammar)_create-source           := source
$(gold_grammar)_create-static           := static
$(gold_grammar)_create-string           := string

#
# For each regular terminal we also define a constant with a human-readable
# description used for error reporting.
#

$(gold_grammar)_name_of-Comma           := ','
$(gold_grammar)_name_of-Dot             := '.'
$(gold_grammar)_name_of-DotTimes        := '.*'
$(gold_grammar)_name_of-Colon           := ':'
$(gold_grammar)_name_of-LParan          := '('
$(gold_grammar)_name_of-RParan          := ')'
$(gold_grammar)_name_of-LBrace          := '{'
$(gold_grammar)_name_of-RBrace          := '}'
$(gold_grammar)_name_of-Eq              := '='
$(gold_grammar)_name_of-At              := '@'
$(gold_grammar)_name_of-BooleanLiteral  := Boolean Literal
$(gold_grammar)_name_of-NumberLiteral   := Number Literal
$(gold_grammar)_name_of-StringLiteral   := String Literal


"Name"     = 'MyFile'
"Author"   = 'Eldar Abusalimov'
"Version"  = '0.2'
"About"    = 'MyBuild file'

"Case Sensitive" = True

"Start Symbol" = <Model>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

!{Whitespace}   = {&09 .. &0D} + {Space}

!{Printable}    = {&20 .. &7F}

{ID Head}      = {Letter} + [_]
{ID Tail}      = {Alphanumeric} + [_]

{Hex Digit}    = {Digit} + [abcdef] + [ABCDEF]     

{String Chars} = {Printable} + {HT} - ["\]
{String Esc}   = [rnt''"\]
{Non Quote}    = {Printable} + {Whitespace} - [''\]
{Quote Esc}    = [''\]

{Non Slash}    = {Printable} + {Whitespace} - [/]
{Non Asterisk} = {Printable} + {Whitespace} - [*]

{Not New Line} = {Printable} + {Whitespace} - {CR} - {LF}

! -------------------------------------------------
! Terminals
! -------------------------------------------------

Whitespace     = {Whitespace}+
               | '/*' ( {Non Asterisk} | '*' {Non Slash} )*  '*/'
               | '//' {Not New Line}* ( {CR}? {LF} )?

Identifier     = '^'? {ID Head}{ID Tail}*

StringLiteral  = '"' ( {String Chars} | '\' {String Esc} )* '"'
               | '''''' ( ( ''? '' )? ( {Non Quote} | '\' {Quote Esc} ) )* ''''''

NumberLiteral  = {Digit}+ ( '.' {Digit}+ )?
               | '0x' {Hex Digit}+ ( '.' {Hex Digit}+ )?

BooleanLiteral = 'true' | 'false'

! -------------------------------------------------
! Rules
! -------------------------------------------------

<Model>
        ::= <Package> <Imports> <Entities>

! Package?
<Package>
        ::= 'package' <QualifiedName>
         |  

! Import*
<Imports>
        ::= <Import> <Imports>
         |  
<Import>
        ::= 'import' <ImportFeature> <QualifiedNameWithWildcard>
! feature?
<ImportFeature>
        ::= 'feature'
         |

! Entity*
<Entities>
        ::= <Entity> <Entities>
         |  
<Entity>
        ::= <Module>
         |  <Interface>

! -------------------------------------------------
! Interfaces and features.

! interface Name (extends ...)? { ... }
<Interface>
        ::= 'interface' Identifier <SuperInterfaces> '{' <InterfaceAttributes> '}'

! (extends ...)?
<SuperInterfaces>
        ::= 'extends' <InterfaceRefList>
         |  

! InterfaceAttribute*
<InterfaceAttributes>
        ::= <InterfaceAttribute> <InterfaceAttributes>
         |  
<InterfaceAttribute>
        ::= <Feature>

! feature Name (extends ...)?
<Feature>
        ::= 'feature' Identifier <SuperFeatures>

! (extends ...)?
<SuperFeatures>
        ::= 'extends' <FeatureRefList>
         |  

! -------------------------------------------------
! Modules.

! (abstract)? module Name (extends ...)? { ... }
<Module>
        ::= <ModuleModifiers> 'module' Identifier <SuperModule> '{' <ModuleAttributes> '}'

! ModuleModifier*
<ModuleModifiers>
        ::= <ModuleModifier> <ModuleModifiers>
         |  
<ModuleModifier>
        ::= 'static'
         |  'abstract'

! (extends ...)?
<SuperModule>
        ::= 'extends' <ModuleRef>
         |  

! ModuleAttribute*
<ModuleAttributes>
        ::= <ModuleAttribute> <ModuleAttributes>
         |  
<ModuleAttribute>
        ::= <Sources>
         |  <Objects>
         |  <Depends>
         |  <Provides>
         |  <Requires>
         |  <Flags>
         |  <Rule>
         |  <Option>

<Depends>
        ::= 'depends' <ModuleRefList>
<Provides>
        ::= 'provides' <FeatureRefList>
<Requires>
        ::= 'requires' <FeatureRefList>
<Sources>
        ::= 'source' <FilenameList>
<Objects>
        ::= 'object' <FilenameList>

! option Name : ( string | number | boolean ) ( = ...)?
<Option>
        ::= 'option' Identifier ':' <OptionTypeWithAssignment>
<OptionTypeWithAssignment>
        ::= 'string'  <StringOptionAssignment>
         |  'number'  <NumberOptionAssignment>
         |  'boolean' <BooleanOptionAssignment>

<StringOptionAssignment>
        ::= '=' StringLiteral
         |  
<NumberOptionAssignment>
        ::= '=' NumberLiteral
         |  
<BooleanOptionAssignment>
        ::= '=' BooleanLiteral
         |  

<Flags>
        ::= 'make' 'flags' <StringList>

! make "target" ( : "prerequisite"...)? ( "recipe"...)?
<Rule>
        ::= 'make' <Filename> <Prerequisites> <Recipes>
<Prerequisites>
        ::= ':' <FilenameList>
         |  
<Recipes>
        ::= '{' <StringList> '}'
         |  

! -------------------------------------------------
! Datatypes.

<Filename>
        ::= StringLiteral
<InterfaceRef>
        ::= <QualifiedName>
<FeatureRef>
        ::= <QualifiedNameWithWildcard>
<ModuleRef>
        ::= <QualifiedName>

! -------------------------------------------------
! Comma separated lists.

! Item ( , Item )*
<InterfaceRefList>
        ::= <InterfaceRef> ',' <InterfaceRefList>
         |  <InterfaceRef>
<FeatureRefList>
        ::= <FeatureRef> ',' <FeatureRefList>
         |  <FeatureRef>
<ModuleRefList>
        ::= <ModuleRef> ',' <ModuleRefList>
         |  <ModuleRef>
<FilenameList>
        ::= <Filename> ',' <FilenameList>
         |  <Filename>
<StringList>
        ::= StringLiteral ',' <StringList>
         |  StringLiteral

! -------------------------------------------------
! Extended identifiers.

<QualifiedName>
        ::= Identifier '.' <QualifiedName>
         |  Identifier

<QualifiedNameWithWildcard>
        ::= <QualifiedName> '.*'
         |  <QualifiedName>


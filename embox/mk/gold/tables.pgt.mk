##TEMPLATE-NAME 'Make MyBuild'
##LANGUAGE 'GNU Make'
##ENGINE-NAME 'MyBuild'
##AUTHOR 'Eldar Abusalimov' 
##FILE-EXTENSION 'mk'
##NOTES
This template outputs the tables using extended syntax of Make functional language.
##END-NOTES
##DELIMITER ','
##ID-SEPARATOR '_'
##ID-SYMBOL-PREFIX 'Symbol'
##ID-RULE-PREFIX 'Rule'
##PARAMETERS
# $Id: $
#
# This file is auto-generated by GOLD Parser Builder using MyBuild program
# template. Do not edit!
#
#   Date: Oct 26, 2011
# Author: Eldar Abusalimov
#

ifndef gold_prefix
$(error 'gold_prefix' is not defined. \
	Do not include $(notdir $(lastword $(MAKEFILE_LIST))) directly!)
endif # gold_prefix

ifdef __gold_$(gold_prefix)_parse
$(error Multiple inclusion of tables file for '$(gold_prefix)' parser. \
	Do not include $(notdir $(lastword $(MAKEFILE_LIST))) directly!)
endif # __gold_$(gold_prefix)_parse

#
# Params:
#   1. Stream of decimal char codes representing an input.
# Return:
#   Result of interpreting parse tree with user-defined handlers.
#   TODO error handling.
#
# Note:
#   This function is auto-generated by GOLD Parser Builder using MyBuild
#   program template. Do not edit!
define __gold_$(gold_prefix)_parse
	# Grammar info:
	#   Name            : %Name%
	#   Version         : %Version%
	#   Author          : %Author%
	#   About           : %About%
	#   Case Sensitive  : %CaseSensitive%
	#   Start Symbol    : %StartSymbol%
##END-PARAMETERS
	$(gold-parser \

##SYMBOL-TABLE
		$(gold-symbol-table \
			# Args: Id,Type,Name
##SYMBOLS
			$(gold-symbol %Value.Padded%,%Kind%,# %Description%
				%ID%)%Delimiter%
##END-SYMBOLS
		),# Total %Count% symbol(s).
##END-SYMBOL-TABLE

##RULE-TABLE
		$(gold-rule-table \
			# Args: Id,Nonterminal,SymbolsNr,Name
##RULES
			$(gold-rule %Value.Padded%,%NonterminalIndex%,%SymbolCount%,# %Description%
				%ID%)%Delimiter%
##END-RULES
		),# Total %Count% rule(s).
##END-RULE-TABLE

##CHAR-SET-TABLE
		$(gold-charset-table \
			# Args: Id,Chars...
##CHAR-SETS
##RANGE-CHARS '.'
			$(gold-charset %Index%,# %Chars.XML% #
				%Chars.List%)%Delimiter%
##END-CHAR-SETS
		),# Total %Count% charset(s).
##END-CHAR-SET-TABLE

##DFA-TABLE
		$(gold-dfa-table %InitialState%,# <- Initial state
##DFA-STATES
			$(gold-dfa-state %Index%,%AcceptIndex%,
##DFA-EDGES
				$(gold-dfa-edge %CharSetIndex%,%Target%)%Delimiter%
##END-DFA-EDGES
			)%Delimiter%# Total %EdgeCount% edge(s).
##END-DFA-STATES 
		),# Total %Count% state(s).
##END-DFA-TABLE

##LALR-TABLE
		$(gold-lalr-table %InitialState%,# <- Initial state
##LALR-STATES
			$(gold-lalr-state %Index%,
##LALR-ACTIONS
				$(gold-lalr-action %SymbolIndex%,%Action%,%Value%)%Delimiter%# %Action.Name% %Value%
##END-LALR-ACTIONS
			)%Delimiter%# Total %ActionCount% action(s).
##END-LALR-STATES  
		)# Total %Count% state(s).
##END-LALR-TABLE

	)
endef # __gold_$(gold_prefix)_parse

$(def_all)


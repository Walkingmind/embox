diff -uar ../../../../../download/STM32F4xx_Ethernet_Example/Utilities/STM32F4-Discovery/stm32f4_discovery_audio_codec.c STM32F4xx_Ethernet_Example/Utilities/STM32F4-Discovery/stm32f4_discovery_audio_codec.c
--- ../../../../../download/STM32F4xx_Ethernet_Example/Utilities/STM32F4-Discovery/stm32f4_discovery_audio_codec.c	2013-03-07 05:51:14.000000000 +0400
+++ STM32F4xx_Ethernet_Example/Utilities/STM32F4-Discovery/stm32f4_discovery_audio_codec.c	2015-01-05 22:35:01.081638162 +0300
@@ -309,8 +309,14 @@
   * @param  AudioFreq: Audio frequency used to play the audio stream.
   * @retval 0 if correct communication, else wrong communication
   */
+#define PLLI2SN   258
+#define PLLI2SR   3
 uint32_t EVAL_AUDIO_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
 {    
+  RCC_PLLI2SCmd(DISABLE);
+  RCC_PLLI2SConfig(PLLI2SN, PLLI2SR);
+  RCC_PLLI2SCmd(ENABLE);
+
   /* Perform low layer Codec initialization */
   if (Codec_Init(OutputDevice, VOLUME_CONVERT(Volume), AudioFreq) != 0)
   {
@@ -359,7 +365,7 @@
   Codec_Play();
   
   /* Update the Media layer and enable it for play */  
-  Audio_MAL_Play((uint32_t)pBuffer, (uint32_t)(DMA_MAX(Size/4)));
+  Audio_MAL_Play((uint32_t)pBuffer, (uint32_t)(DMA_MAX(Size)));
   
   /* Update the remaining number of data to be played */
   AudioRemSize = (Size/2) - DMA_MAX(AudioTotalSize);
@@ -514,7 +520,7 @@
  #elif defined(AUDIO_MAL_MODE_CIRCULAR)
     /* Manage the remaining file size and new address offset: This function 
        should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
-    EVAL_AUDIO_TransferComplete_CallBack(pAddr, Size);    
+    EVAL_AUDIO_TransferComplete_CallBack((uint32_t)pAddr, Size);    
     
     /* Clear the Interrupt flag */
     DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);
diff -uar ../../../../../download/STM32F4xx_Ethernet_Example/Utilities/STM32F4-Discovery/stm32f4_discovery_audio_codec.h STM32F4xx_Ethernet_Example/Utilities/STM32F4-Discovery/stm32f4_discovery_audio_codec.h
--- ../../../../../download/STM32F4xx_Ethernet_Example/Utilities/STM32F4-Discovery/stm32f4_discovery_audio_codec.h	2013-03-07 05:51:14.000000000 +0400
+++ STM32F4xx_Ethernet_Example/Utilities/STM32F4-Discovery/stm32f4_discovery_audio_codec.h	2015-01-05 22:26:44.781640499 +0300
@@ -57,14 +57,14 @@
 //#define I2S_INTERRUPT                 /* Uncomment this line to enable audio transfert with I2S interrupt*/ 
 
 /* Audio Transfer mode (DMA, Interrupt or Polling) */
-#define AUDIO_MAL_MODE_NORMAL         /* Uncomment this line to enable the audio 
+/* #define AUDIO_MAL_MODE_NORMAL   */ /* Uncomment this line to enable the audio 
                                          Transfer using DMA */
-/* #define AUDIO_MAL_MODE_CIRCULAR */ /* Uncomment this line to enable the audio 
+#define AUDIO_MAL_MODE_CIRCULAR       /* Uncomment this line to enable the audio 
                                          Transfer using DMA */
 
 /* For the DMA modes select the interrupt that will be used */
 #define AUDIO_MAL_DMA_IT_TC_EN        /* Uncomment this line to enable DMA Transfer Complete interrupt */
-/* #define AUDIO_MAL_DMA_IT_HT_EN */  /* Uncomment this line to enable DMA Half Transfer Complete interrupt */
+#define AUDIO_MAL_DMA_IT_HT_EN        /* Uncomment this line to enable DMA Half Transfer Complete interrupt */
 /* #define AUDIO_MAL_DMA_IT_TE_EN */  /* Uncomment this line to enable DMA Transfer Error interrupt */
 
 /* Select the interrupt preemption priority and subpriority for the DMA interrupt */

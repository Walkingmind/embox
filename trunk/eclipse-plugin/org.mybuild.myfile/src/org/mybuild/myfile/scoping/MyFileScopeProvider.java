/*
 * generated by Xtext
 */
package org.mybuild.myfile.scoping;

import static com.google.common.collect.Iterables.transform;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.MapBasedScope;
import org.mybuild.myfile.Annotation;
import org.mybuild.myfile.AnnotationType;
import org.mybuild.myfile.Property;
import org.mybuild.myfile.PropertyValueBinding;

import com.google.common.base.Function;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class MyFileScopeProvider extends AbstractDeclarativeScopeProvider {

	public IScope scope_PropertyValueBinding_property(PropertyValueBinding ctx,
			EReference ref) {
		EObject container = ctx.eContainer();
		if (container == null) {
			throw new IllegalStateException(
					"context.eContainer may not be null");
		}

		if (container instanceof Annotation) {
			Annotation annotation = (Annotation) container;
			AnnotationType annotationType = annotation.getType();
			if (annotationType == null || annotationType.eIsProxy()) {
				return IScope.NULLSCOPE;
			}

			return createPropertiesScope(IScope.NULLSCOPE,
					annotationType.getElements());
		}

		return IScope.NULLSCOPE;
	}

	protected IScope createPropertiesScope(IScope parent,
			EList<Property> elements) {
		Iterable<IEObjectDescription> descriptions = transform(elements,
				new Function<Property, IEObjectDescription>() {
					public IEObjectDescription apply(Property from) {
						return EObjectDescription.create(
								QualifiedName.create(from.getName()), from);
					}
				});
		return MapBasedScope.createScope(parent, descriptions);
	}

}

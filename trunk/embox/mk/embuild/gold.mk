# $Id: $
#
# Builtins and runtime support for parsers generated by GOLD.
#
#   Date: Oct 26, 2011
# Author: Eldar Abusalimov
#

ifndef __embuild_gold_mk
__embuild_gold_mk := 1

include mk/core/common.mk
include mk/core/string.mk
include mk/core/define.mk

include mk/util/var/assign.mk

ascii_table = \
		SOH	STX	ETX	EOT	ENQ	ACK	BEL	BS	TAB	LF	VT	FF	CR	SO	SI	\
	DLE	DC1	DC2	DC3	DC4	NAK	SYN	ETB	CAN	EM	SUB	ESC	FS	GS	RS	US	\
	SP	!	"	\#	$	%	&	'	(	)	*	+	,	â€”	.	/	\
	0	1	2	3	4	5	6	7	8	9	 :	 ;	<	=	>	?	\
	@	A	B	C	D	E	F	G	H	I	J	K	L	M	N	O	\
	P	Q	R	S	T	U	V	W	X	Y	Z	[	\	]	^	_	\
	`	a	b	c	d	e	f	g	h	i	j	k	l	m	n	o	\
	p	q	r	s	t	u	v	w	x	y	z	{	|	}	~	DEL

ascii_table := $(subst $(\t),$(\s),$(value ascii_table))

__gold_prefix = $(call builtin_tag,gold-parser)

define builtin_tag_gold-parser
#	$(or \
#		$(call filter-patsubst,%parser,%,$(__def_var)),
#		$(call builtin_error,
#			Bad variable name: '$(__def_var)'
#		)
#	)
	__golden# TODO for devel only
endef

define builtin_func_gold-parser
endef

__gold_prefix_symbol = $(__gold_prefix)_symbol

builtin_func_gold-symbol-table =# Noop

# 1. Id
# 2. Symbol type:
#     0: Normal Nonterminal.
#     1: Normal Terminal.
#     2: Whitespace Terminal.
#     3: End of File.
#     4: Start of a block quote.
#     5: End of a block quote.
#     6: Line Comment Terminal.
#     7: Error Terminal.
# 3. Instantiation function.
define builtin_func_gold-symbol
	$(call var_assign_simple,$(__gold_prefix_symbol)$1,
		$2 $3
	)
endef

__gold_prefix_rule = $(__gold_prefix)_rule

builtin_func_gold-rule-table =# Noop

# 1. Id
# 2. Nonterminal
# 3. Number of symbols in right-hand side
# 4. Instantiation function.
define builtin_func_gold-rule
	$(call var_assign_simple,$(__gold_prefix_rule)$1,
		$3 $4# TODO do I actually need an Id of Nonterminal?
	)
endef

__gold_prefix_charset = $(__gold_prefix)_charset

builtin_func_gold-charset-table =# Noop

# 1. Id
# ... Char codes
define builtin_func_gold-charset
	$(call var_assign_recursive_sl,$(__gold_prefix_charset)$1,
		$(foreach a,$(nofirstword $(builtin_args_list)),
			$($a)
		)
	)
endef

__gold_prefix_dfa     = $(__gold_prefix)_dfa

define __gold_dfa_accept
	$(info DFA accept symbol $2 ($(word 2,$(__golden_symbol$2))): \
		[$(foreach c,$1,$(word $c,$(ascii_table)))])
endef

__gold_dfa_accept_begin  = $$$(\p[)call __gold_dfa_accept,
__gold_dfa_accept_end    = ,$(subst +,,$(__gold_dfa_state__))$(\p])

# 1. Initial state
# ... States (unused)
define builtin_func_gold-dfa-table
	$(call var_assign_recursive_sl,
		# Params:
		#   1. Input string
		# Return:
		#   The code to expand to get all tokens instantiated.
		$(__gold_prefix)_dfa_table,
		# =

		$${eval \
			__gold_dfa_state__ := $1
		}

		$$(__gold_dfa_accept_begin)
		$$(foreach 1,$$1,
			$${eval \
				__gold_dfa_state__ := \
					$$($(__gold_prefix_dfa)$$(__gold_dfa_state__))
			}

			$$(if $$(findstring +,$$(__gold_dfa_state__)),
				$$(__gold_dfa_accept_end)

				$${eval \
					__gold_dfa_state__ := $$($(__gold_prefix_dfa)$1)
				}

				$$(__gold_dfa_accept_begin)
			)
			$$1
		)
		$$(__gold_dfa_accept_end)
	)
	$(call var_assign_simple,$(__gold_prefix_dfa),)# Cyclic error until EOF
endef

# 1. Id
# 2. Accept symbol or -1
# ... Edges
define builtin_func_gold-dfa-state
	$(call var_assign_recursive_sl,
		# Params:
		#   1. Char code.
		# Return:
		#   Plain number: Next state Id;
		#   '+' Number: Accepted symbol Id;
		#   Empty on error.
		$(__gold_prefix_dfa)$1,
		# =
		$$(info DFA state $1, char $$(word $$1,$$(ascii_table)))
		$$(or \
			$(foreach a,$(words-from 3,$(builtin_args_list)),
				$($a)
			)
			$(if $(findstring $2,-1),,+$2)
		)
	)
endef

# 1. Charset
# 2. Target state
define builtin_func_gold-dfa-edge
	$$(if $$(filter $$1,$$($(__gold_prefix_charset)$1)),$2),
endef

define builtin_func_gold-lalr-table
endef

define builtin_func_gold-lalr-state
endef

define builtin_func_gold-lalr-action
endef

$(def_all)

define __gold_example_parser
	$(gold-parser \

		$(gold-symbol-table \
			# Args: Id,Type,Name
			$(gold-symbol  0,3,# (EOF)
				Symbol_Eof),
			# ...
		),

		$(gold-rule-table \
			# Args: Id,Nonterminal,SymbolsNr,Name
			$(gold-rule 0,9,1,# <Program> ::= <Expression>
				Rule_Program),
			# ...
		),

		$(gold-charset-table \
			# Args: Id,Chars...
			$(gold-charset 0,# &#9;&#10;&#11;&#12;&#13; &#160; #
				9,10,11,12,13,32,160),
			# ...
		),

		$(gold-dfa-table 0,# <- Initial state
			$(gold-dfa-state 0,-1,
				$(gold-dfa-edge 0,1),
				# ...
			),
			# ...
		),

		$(gold-lalr-table 0,# <- Initial state
			$(gold-lalr-state 0,
				$(gold-lalr-action 4,1,1),# Shift to State 1
				# ...
			),
			# ...
		)

	)
endef
__gold_example_parser :=

$(def_all)

endif # __embuild_gold_mk



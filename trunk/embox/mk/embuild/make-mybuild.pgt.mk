##TEMPLATE-NAME 'Make MyBuild'
##LANGUAGE 'GNU Make'
##ENGINE-NAME 'MyBuild'
##AUTHOR 'Eldar Abusalimov' 
##FILE-EXTENSION 'mk'
##NOTES
This template outputs the tables using extended syntax of Make functional language.
##END-NOTES
##DELIMITER ','
##ID-SEPARATOR '_'
##ID-SYMBOL-PREFIX 'Symbol'
##ID-RULE-PREFIX 'Rule'
##PARAMETERS

# Override to define everything in a different namespace. Must not be empty.
gold_prefix := $(subst $(\s),_,%Name%)

ifeq ($(call singleword,$(gold_prefix)),)

error_msg = \
	gold_prefix is empty or not a single word, \
	you have to define it in order to continue
$(error $(error_msg))

endif
gold_prefix := $(call trim,$(gold_prefix))

ifndef __gold_grammar_$(gold_prefix)_mk
__gold_grammar_$(gold_prefix)_mk := 1

# This function is auto-generated by GOLD Parser Builder
# using MyBuild program template. Do not edit!
#
# Grammar info:
#   Name            : %Name%
#   Version         : %Version%
#   Author          : %Author%
#   About           : %About%
#   Case Sensitive  : %CaseSensitive%
#   Start Symbol    : %StartSymbol%
##END-PARAMETERS
define $(gold_prefix)_parser
	$(gold-parser \

##SYMBOL-TABLE
		$(gold-symbol-table \
			# Args: Id,Type,Name
##SYMBOLS
			$(gold-symbol %Value.Padded%,%Kind%,# %Description%
				%ID%)%Delimiter%
##END-SYMBOLS
		),# Total %Count% symbol(s).
##END-SYMBOL-TABLE

##RULE-TABLE
		$(gold-rule-table \
			# Args: Id,Nonterminal,SymbolsNr,Name
##RULES
			$(gold-rule %Value.Padded%,%NonterminalIndex%,%SymbolCount%,# %Description%
				%ID%)%Delimiter%
##END-RULES
		),# Total %Count% rule(s).
##END-RULE-TABLE

##CHAR-SET-TABLE
		$(gold-charset-table \
			# Args: Id,Chars...
##CHAR-SETS
##RANGE-CHARS '.'
			$(gold-charset %Index%,# %Chars.XML% #
				%Chars.List%)%Delimiter%
##END-CHAR-SETS
		),# Total %Count% charset(s).
##END-CHAR-SET-TABLE

##DFA-TABLE
		$(gold-dfa-table %InitialState%,# <- Initial state
##DFA-STATES
			$(gold-dfa-state %Index%,%AcceptIndex%,
##DFA-EDGES
				$(gold-dfa-edge %CharSetIndex%,%Target%)%Delimiter%
##END-DFA-EDGES
			)%Delimiter%# Total %EdgeCount% edge(s).
##END-DFA-STATES 
		),# Total %Count% state(s).
##END-DFA-TABLE

##LALR-TABLE
		$(gold-lalr-table %InitialState%,# <- Initial state
##LALR-STATES
			$(gold-lalr-state %Index%,
##LALR-ACTIONS
				$(gold-lalr-action %SymbolIndex%,%Action%,%Value%)%Delimiter%# %Action.Name% %Value%
##END-LALR-ACTIONS
			)%Delimiter%# Total %ActionCount% action(s).
##END-LALR-STATES  
		)# Total %Count% state(s).
##END-LALR-TABLE

	)
endef


##SYMBOLS
# %Description% symbol.
define $(gold_prefix)_%ID%
endef

##END-SYMBOLS

##RULES
# %Description% rule.
define $(gold_prefix)_%ID%
endef

##END-RULES

endif # __gold_grammar_$(gold_prefix)_mk


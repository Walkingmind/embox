«IMPORT ecore»

«EXTENSION template::GeneratorExtensions»
«EXTENSION org::eclipse::xtend::util::stdlib::counter»

«DEFINE main FOR EPackage»«FILE fileName("model") -»
«fileHeader()»

# Model of '«name»' package.

«inclusionGuardBegin("model")»

include mk/model/model_impl.mk
«EXPAND class FOREACH eClassifiers.typeSelect(EClass) -»

«PROTECT CSTART '# ' CEND '' ID metaVariable()»
# TODO Add custom implementation here and remove this comment.
«ENDPROTECT»

$(def_all)

«inclusionGuardEnd("model")»

«ENDFILE»«ENDDEFINE»

«DEFINE class FOR EClass»
#
# Model object '«name»'.
#
«EXPAND classMembersComment("defined") -»
«FOREACH eAllSuperTypes.reverse() AS superType -»
«EXPAND classMembersComment("inherited from '" + superType.name + "'") FOR superType -»
«ENDFOREACH -»
define class-«className()»«IF abstract» # abstract«ELSEIF interface» # interface«ENDIF»
«IF className() != "EObject" && className() != "ELink" -»
«IF !eSuperTypes.isEmpty -»
	# Extends '«eSuperTypes.className()
		.toString("', '")»' class«IF eSuperTypes.size > 1»es«ENDIF».
«ELSE -»
	# Extends 'EObject' class (implicitly).
«ENDIF -»
	«mk("eobject", { metaVariable(),
		"\n\t\t" + className(), eSuperTypes.className().toString(" "),
		metaFlags().toString(" ") })»
«ENDIF -»
«EXPAND feature FOREACH eStructuralFeatures -»
«EXPAND operation FOREACH eOperations»
«PROTECT CSTART '\t# ' CEND '' ID metaVariable()»
#	# TODO Add custom implementation here and remove this comment.
«ENDPROTECT»
endef
«ENDDEFINE»

«DEFINE classMembersComment(String suffixText) FOR EClass -»
«IF eStructuralFeatures.isEmpty && eOperations.isEmpty -»
# No features or operations «suffixText».
«ELSE -»
# The following «let l = { } :
	if !eStructuralFeatures.isEmpty then l.add("features") ->
	if !eOperations.isEmpty then l.add("operations") ->
	l.toString(" and ")» are «suffixText»:
«FOREACH eStructuralFeatures AS feature -»
#   - «EReference.isInstance(feature)
		? "reference"
		: "attribute"» '«feature.name»'
«ENDFOREACH -»
«FOREACH eOperations AS operation -»
#   - operation '«operation.name»'
«ENDFOREACH -»
«ENDIF -»
#
«ENDDEFINE»


«DEFINE feature FOR EStructuralFeature»
«IF !derived -»
	# Property '«propertySignature()»'«IF !changeable» (read-only)«ENDIF».
«IF EReference.isInstance(this) && ((EReference) this).isLinkableReference() -»
	# Property '«((EReference) this).propertyLinkSignature()»'«IF !changeable» (read-only)«ENDIF».
«ENDIF -»
«EXPAND nonVolatileFeature -»
«ELSE -»
	# «featureInfo() -»
«EXPAND volatileFeature -»
«ENDIF -»
«ENDDEFINE»

«DEFINE nonVolatileFeature FOR EStructuralFeature»
	«ERROR "Unexpected EStructuralFeature: " + this»
«ENDDEFINE»

«DEFINE nonVolatileFeature FOR EAttribute -»
	«mk("eobject-attribute", { metaVariable(),
		"\n\t\t" + propertyName(),
		metaFlags().toString(" ")})»
«ENDDEFINE»

«DEFINE nonVolatileFeature FOR EReference -»
	«mk("eobject-reference", { metaVariable(),
		"\n\t\t" + propertyName(), eReferenceType.className(), eOpposite.propertyName(),
		metaFlags().toString(" ")})»
«ENDDEFINE»


«DEFINE volatileFeature FOR EStructuralFeature»
	«mkProperty(propertyName() + memberCardinality() + memberType())»
«PROTECT CSTART '\t# ' CEND '' ID metaVariable()»
«EXPAND volatileFeatureStubs(propertyName()) -»
«ENDPROTECT»
«ENDDEFINE»

«DEFINE volatileFeatureStubs(String property) FOR EStructuralFeature -»
#	# TODO Uncomment and implement me.
	«mkGetterWrap(property, "$(error $0: NIY)")»
«IF changeable -»
#	# TODO Uncomment and implement me.
	«mkSetterWrap(property, "$(error $0($1): NIY)")»
«ENDIF -»
«ENDDEFINE»

«DEFINE operation FOR EOperation»
	# Method '«methodSignature()»'.
«FOREACH eParameters AS param ITERATOR i -»
	#   «i.counter1». «param.name + param.memberCardinality() + param.memberType()»
«ENDFOREACH -»
«PROTECT CSTART '\t# ' CEND '' ID metaVariable()»
#	# TODO Uncomment and implement me.
	«mkMethod(methodSignature(),
	"$(error $0(" + eParameters.collect(p | "$" + counterInc()).toString(",") +
			"): NIY)")»
«ENDPROTECT»
«ENDDEFINE»


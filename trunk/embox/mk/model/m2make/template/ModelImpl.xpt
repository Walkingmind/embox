«IMPORT ecore»

«EXTENSION template::GeneratorExtensions»
«EXTENSION org::eclipse::xtend::util::stdlib::counter»

«DEFINE main FOR EPackage»«FILE fileName("model_impl") -»
«fileHeader()»

# Model implementation of '«name»' package.

«implInclusionCheck("model")»

include mk/model/eobject.mk
«EXPAND classifier FOREACH eClassifiers.typeSelect(EClass) -»

$(def_all)

«ENDFILE»«ENDDEFINE»

«DEFINE classifier FOR EClass»
# Implementation of '«name»' model object.
define class-«classImplName()»
«IF classImplName() != "EObjectImpl" -»
	«mk("eobject", { metaVariable(),
		"\n\t\t" + className(), eSuperTypes.className().toString(" "),
		metaFlags().toString(" ") })»
«ENDIF -»
«EXPAND feature FOREACH eStructuralFeatures -»
«EXPAND operation FOREACH eOperations»
«PROTECT CSTART '\t# ' CEND '' ID id()»
#	# TODO Add custom implementation here and remove this comment.
«ENDPROTECT»
endef
«ENDDEFINE»

«DEFINE feature FOR EStructuralFeature»
	# «featureInfo() -»
«IF derived -»
«EXPAND volatileFeature -»
«ELSE -»
«EXPAND nonVolatileFeature -»
«ENDIF -»
«ENDDEFINE»

«DEFINE nonVolatileFeature FOR EStructuralFeature»
	«ERROR "Unexpected EStructuralFeature: " + this»
«ENDDEFINE»

«DEFINE nonVolatileFeature FOR EAttribute»
	«mk("eobject-attribute", { metaVariable(),
		"\n\t\t" + propertyName(),
		metaFlags().toString(" ")})»
«ENDDEFINE»

«DEFINE nonVolatileFeature FOR EReference»
	«mk("eobject-reference", { metaVariable(),
		"\n\t\t" + propertyName(), eReferenceType.className(), eOpposite.propertyName(),
		metaFlags().toString(" ")})»
«ENDDEFINE»


«DEFINE volatileFeature FOR EStructuralFeature»
	«mkProperty(propertyName() + memberCardinality() + memberType())»
«PROTECT CSTART '\t# ' CEND '' ID id()»
«EXPAND memberStub FOR mkGetterWrap(propertyName(), "$(error $0: NIY)") -»
«IF changeable -»
«EXPAND memberStub FOR mkSetterWrap(propertyName(), "$(error $0($1): NIY)") -»
«IF many -»
«EXPAND memberStub FOR mkSetterPlusWrap(propertyName(), "$(error $0($1): NIY)") -»
«EXPAND memberStub FOR mkSetterMinusWrap(propertyName(), "$(error $0($1): NIY)") -»
«ENDIF -»
«ENDIF -»
«EXPAND volatileCrossReference -»
«ENDPROTECT»
«ENDDEFINE»

«DEFINE volatileCrossReference FOR EStructuralFeature»«ENDDEFINE»
«DEFINE volatileCrossReference FOR EReference -»
«IF isLinkableReference() -»
«EXPAND memberStub FOR mkGetterWrap(propertyLinkName(), "$(error $0: NIY)") -»
«IF changeable -»
«EXPAND memberStub FOR mkSetterWrap(propertyLinkName(), "$(error $0($1): NIY)") -»
«IF many -»
«EXPAND memberStub FOR mkSetterPlusWrap(propertyLinkName(), "$(error $0($1): NIY)") -»
«EXPAND memberStub FOR mkSetterMinusWrap(propertyLinkName(), "$(error $0($1): NIY)") -»
«ENDIF -»
«ENDIF -»
«ENDIF -»
«ENDDEFINE»

«DEFINE memberStub FOR String -»
#	# TODO Uncomment and implement me.
#	«comment()»
«ENDDEFINE»


«DEFINE nonVolatileFeatureOld FOR EStructuralFeature»
	«ERROR "Unexpected EStructuralFeature: " + this»
«ENDDEFINE»

«DEFINE nonVolatileFeatureOld FOR EAttribute»
«IF changeable -»
	«mkPropertyField(propertyName() + memberCardinality() + memberType())»
«ELSE -»
	«mkProperty(propertyName() + memberCardinality() + memberType())»
	«mkField(propertyName() + memberCardinality() + memberType())»
	«mkGetter(propertyName(), mkGetField(propertyName()))»
«ENDIF -»
«ENDDEFINE»

«DEFINE nonVolatileFeatureOld FOR EReference»
	«mkProperty(propertyName() + memberCardinality() + memberType())»
«LET containment ? "Containment" : (container ? "Container" :
	(eOpposite != null ? "Bidirectional" : "Unidirectional")) AS suffix -»
«LET { propertyName(), "$(suffix $1)", eOpposite.propertyName(), metaVariable() } AS setterArgs -»
«IF container -»
	«mkGetterWrap(propertyName(),
		mkCall("__eObjectGet" + suffix, propertyName()))»
«ELSE -»
	«mkField(propertyName() + memberCardinality() + memberType())»
	«mkGetterWrap(propertyName(), "$(suffix " + mkGetField(propertyName()) + ")")»
«ENDIF -»
«IF changeable -»
	«mkSetterWrap(propertyName(), mkCall("__eObjectSet" + suffix, setterArgs))»
«IF many -»
	«mkSetterPlusWrap(propertyName(), mkCall("__eObjectAdd" + suffix, setterArgs))»
	«mkSetterMinusWrap(propertyName(), mkCall("__eObjectRemove" + suffix, setterArgs))»
«ENDIF -»
«ENDIF -»
«IF isLinkableReference() -»
	# Link operations.
	«mkGetterWrap(propertyLinkName(), mkCall("__eObjectGet" + suffix + "_link", propertyName()))»
«IF changeable -»
	«mkSetterWrap(propertyLinkName(), mkCall("__eObjectSet" + suffix + "_link", setterArgs))»
«IF many -»
	«mkSetterPlusWrap(propertyLinkName(), mkCall("__eObjectAdd" + suffix + "_link", setterArgs))»
	«mkSetterMinusWrap(propertyLinkName(), mkCall("__eObjectRemove" + suffix + "_link", setterArgs))»
«ENDIF -»
«ENDIF -»
«ENDIF -»
«ENDLET -»
«ENDLET -»
«ENDDEFINE»

«DEFINE operation FOR EOperation»
	# '«name + memberCardinality() + memberType()»' operation.
«FOREACH eParameters AS param ITERATOR i -»
	#   «i.counter1». «param.name + param.memberCardinality() + param.memberType()»
«ENDFOREACH -»
«PROTECT CSTART '\t# ' CEND '' ID id()»
«EXPAND memberStub FOR (mkMethod(methodName(),
	"$(error $0(" + eParameters.collect(p | "$" + counterInc()).toString(",") +
			"): NIY)")) -»
«ENDPROTECT»
«ENDDEFINE»


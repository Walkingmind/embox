
include mk/mybuild/resource.mk
include core/define.mk

HEADERS_BUILD := \
  $(patsubst %,$(OBJ_DIR)/mods/%.h,$(subst .,/,$(basename $(APIS_BUILD))))

__header_mod = \
  $(subst /,.,$(patsubst $(abspath $(OBJ_DIR))/mods/%.h,%,$(abspath $@)))

__header_gen = \
  $(subst $(\n),\n,$(call __header_template,$(__header_mod)))

# Param:
#   1. module name
#   2. module list
# Return:
#   Module descedant from list
define find_descedant
	$(for o <- $(call find_mod,$(__header_mod)),
		m <- $2,
		$(with $m,
			$(for l <- $(get $1.super_module_ref),
				super <- $(invoke l->get_reference),
				$(if $(eq $(suffix $(super)),$(suffix $o)),
					$m,$(call $0,$(super)))
			)
		)
	)
endef

$(call def,find_descedant)

# 1. Header module name
define __header_template
/* Autogenerated file. Do not edit. */

#ifndef __MOD_HEADER__$(subst .,__,$1)
#define __MOD_HEADER__$(subst .,__,$1)
$(foreach impl,$(call find_descedant,$1,$(MODS_ENABLE_OBJ)),$(\n)// impl: \
  $(impl)$(foreach header,$(strip $(patsubst $(abspath $(SRC_DIR))/%,%,
                 $(abspath $(call module_get_headers,$(impl))))) \
      ,$(\n)$(\h)include __impl_x($(header))))

#endif /* __MOD_HEADER__$(subst .,__,$1) */

endef

$(HEADERS_BUILD): $(MK_DIR)/image.mk $(AUTOCONF_DIR)/mods.mk
	@$(MKDIR) $(@D) && printf "%b" '$(__header_gen)' > $@

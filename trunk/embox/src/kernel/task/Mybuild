package embox.kernel.task

@DefaultImpl(single)
abstract module api {
	option number max_resource_size = 2048

}

module single extends api {
	source "single.c"
	depends kernel_task


	depends embox.kernel.thread.current.api
	depends embox.kernel.sched.strategy.api
	depends task_thread_api
}

module multi extends api {
	source "multi.c"
	depends kernel_task

	option number tasks_quantity = 20

	depends embox.util.idx_table

	/* uses task_self() to initialize resources, which implies
	   to thread be already loaded, as task_self uses thread_self
	   to determine current thread
	*/
	depends embox.kernel.thread.core
	depends task_thread_api
	depends task_key_table
}

module task_environment { }

@DefaultImpl(NoThread)
abstract module task_thread_api {
}

module NoThread extends task_thread_api {
	depends task_no_thread_key
}

module MultiThread extends task_thread_api {
	source "multi_thread.c"
	@NoRuntime depends task_key_table
}

module kernel_task {
	source "common.c"
	source "kernel_task.c"
	source "task_alloc_onstack.c"

	depends task_thread_api
	depends embox.util.DList

}

module signal {
	source "signal.c"

	depends embox.kernel.sched.sched
}

module idx_table extends task_environment {

	option number task_res_quantity = 64
	
	source "idesc_table.c"
	source "idesc_table_resource.c"
	source "index_descriptor.c"
	
	depends embox.mem.objalloc
	depends embox.util.idx_table
	depends api
	depends io_sync
}

module errno {
	source "errno.c"
	depends api
}

module env {
	option number env_per_task=8
	option number env_str_len=32
	source "env.c"

	depends kernel_task
}

module u_area {
	source "u_area.c"
}

module io_sync {
//	source "io_sync.c"

	depends embox.kernel.manual_event_api
	depends embox.kernel.event_api
}

module waitpid {
	source "waitpid.c"

	depends embox.kernel.sched.sched
	depends embox.kernel.sched.wait_queue
}

module kfork {
	source "kfork.c"
}

@DefaultImpl(task_thread_key)
abstract module task_key_table {

}

module task_no_thread_key extends task_key_table {
	source "task_no_thread_key.h"
}

module task_thread_key extends task_key_table {
	option number keys_quantity = 0x40

	source "task_thread_key.h"
	source "task_thread_key.c"

	@NoRuntime depends embox.util.indexator
}

root_dir = '.'
build_dir = 'build'

import os
import sys

sys.path.insert(0, './tools')

from mywaf.model import create_model



def options(ctx):
    ctx.add_option('--template', type='string', default='', action='store',
                   help='using template')


def configure(ctx):
    template_path = 'templates/' + ctx.options.template
    sys.path.insert(0, template_path)
    import build

    crosstool = getattr(build, 'CROSS_COMPILE', '')
    ctx.env.CC = crosstool + "gcc"
    ctx.env.LD = crosstool + "ld"
    ctx.env.TEMPLATE = template_path

    for flag in ['CFLAGS', 'CXXFLAGS', 'CPPFLAGS', 'LDFLAGS', 'ARFLAGS', 'ASFLAGS']:
        setattr(ctx.env, 'user_' + flag, getattr(build, flag, []))

    ctx.find_program(ctx.env.CC, var='CC')
    ctx.find_program(ctx.env.LD, var='LD')


def build(bld):
    print('CC ' + str(bld.env.CC))
    print('LD ' + str(bld.env.LD))
    print(bld.env.TEMPLATE + '/conf.py')

    print(bld.path.find_node(bld.env.TEMPLATE).abspath())

    create_model(bld)



# useful, but not used now
def _load_defaults_from_file(filename):
    globals_ = {}
    execfile(filename, globals_)

    try:
        attrs = globals_['__all__']
    except KeyError:
        attrs = [attr for attr in globals_ if not attr.startswith('_')]

    defaults = {}
    for attr in attrs:
        defaults[attr] = globals_[attr]

    return defaults

